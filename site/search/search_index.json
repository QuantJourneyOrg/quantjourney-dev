{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Quant Journey with Code","text":"<p>Explore the world of quantitative trading with Python through our in-depth blog series, where we guide both beginners and experienced coders.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Diverse Coding Techniques: From basic scripting to advanced object-oriented programming in Python.</li> <li>Custom Algorithm Development: Build tailored algorithms based on your trading preferences and risk tolerance.</li> <li>Risk Management: Essential techniques to manage losses and enhance gains.</li> <li>Backtesting and Optimization: Test and optimize your strategies with historical data.</li> <li>Real-World Case Studies: Apply what you learn to real trading scenarios.</li> <li>Community Support: Engage with a community of like-minded quant traders.</li> </ul>"},{"location":"#code","title":"Code","text":"<p>To full code is available in private GitHub repository, and available to paid subscribers to Quant Journey with Code blog. If you'd like to have an access please subscribe it.</p>"},{"location":"#reach-us-at","title":"Reach us at","text":"<ul> <li>Discord - for discussion in Community</li> <li>YouTube - for short videos on the Qlib and Framework</li> <li>Telegram - for quick discussion</li> <li>Substack - for Blog Posts</li> <li>GitHub - Code Trading Framework (paid users)</li> </ul>"},{"location":"#get-started","title":"Get Started","text":"<p>You can watch videos for most of the installation at Youtube at 'https://www.youtube.com/channel/UCe87vJTlGGtVt-UwiVQhmdQ'</p> <p>Or read how to start at [Installation Guide]../docs/installation.md)</p>"},{"location":"documentation/","title":"Start","text":"<p>Welcome to the Documentation section of our Trading Framework and Backtesting Framework! This aim of this guide is to provide users, developers, and contributors with comprehensive information on how to install, configure, and use our software effectively. Below, you will find detailed descriptions, step-by-step tutorials, and additional resources to help you understand and work with our product.</p>"},{"location":"documentation/#overview","title":"Overview","text":"<p>The documentation is organized into several key areas as:</p> <ul> <li>Assets - the wrappers to fetch the data (equities, crypto, macro, etc.), modify and present different assets</li> <li>Connectors - the wrapper to different sources of data (EOD, CCXT, Fred, etc.)</li> <li>Exchanges - the wrapper to execute trades (IBKR as per now)</li> <li>Backtesting - the complete framework for backtesting </li> </ul>"},{"location":"documentation/#example-this-is-just-an-example-of-exmaple-see-more-in-examples-section","title":"Example (this is just an example of exmaple, see more in Examples section)","text":"<p>Please see how easily is to use the Qlib framework, in your Python code. The below example is getting daily data for Apple from EOD Historical Data source and presenting. You may modify ([see examples]../docs/examples/get_equities/)) to select other sources and to get it directly from DataBase. </p>"},{"location":"documentation/#python-code-example","title":"Python Code Example","text":"<pre><code># Initialize Data Connector\ndc = DataConnector()\n\n# Fetch OHLCV data for AAPL from EOD Historical Data\neod_data = await dc.equities.async_get_ohlcv(\n    tickers=[\"AAPL\"],           # Specify the ticker for Apple Inc.\n    exchanges=[\"US\"],           # Specify the exchange as US (typically NASDAQ for AAPL)\n    granularity=\"1d\",           # Daily granularity for the OHLCV data\n    period_starts=[\"2023-01-01\"],   # Start date of the period for data fetching\n    period_ends=[\"2023-12-31\"],     # End date of the period\n    source='eod'                # Specify the data source as EOD Historical Data\n)\n\nprint(eod_data)\n</code></pre> <p>with output:</p> <pre><code>\n[                     datetime    open    high     low   close  adj_close     volume\n0   2023-01-03 00:00:00+00:00  130.28  130.90  124.17  125.07   124.2163  112117500\n1   2023-01-04 00:00:00+00:00  126.89  128.66  125.08  126.36   125.4975   89113600\n2   2023-01-05 00:00:00+00:00  127.13  127.77  124.76  125.02   124.1666   80962700\n3   2023-01-06 00:00:00+00:00  126.01  130.29  124.89  129.62   128.7352   87754700\n4   2023-01-09 00:00:00+00:00  130.47  133.41  129.89  130.15   129.2616   70790800\n..                        ...     ...     ...     ...     ...        ...        ...\n245 2023-12-22 00:00:00+00:00  195.18  195.41  192.97  193.60   193.3533   37122800\n246 2023-12-26 00:00:00+00:00  193.61  193.89  192.83  193.05   192.8040   28919300\n247 2023-12-27 00:00:00+00:00  192.49  193.50  191.09  193.15   192.9038   48087700\n248 2023-12-28 00:00:00+00:00  194.14  194.66  193.17  193.58   193.3333   34049900\n249 2023-12-29 00:00:00+00:00  193.90  194.40  191.73  192.53   192.2846   42628800\n\n[250 rows x 7 columns]]\n</code></pre>"},{"location":"documentation/#local-infra","title":"Local Infra","text":"<p>For the infrastructure we are using  We are using different DataBases which you can specify in the config file (_config/config.json). As per now, it's recommened to [install MongoDB]../docs/installation/) on your PC/Mac prior doing examples. With predefined scripts it shouldn't take more than 15-30 min.</p>"},{"location":"documentation/#sources-of-data","title":"Sources of Data","text":"<p>We rely on data sourced from the Internet, including both free and paid services. Free data is available from sources like YFinance. Paid data is sourced from services such as EODHistorical Data, which covers over 80 markets and includes data for equities, CFDs, REITs, and more. Another source, FinancialModelingPrep, provides data on over 15,000 stocks, ETFs, and Mutual Funds across various exchanges in the US, Europe, Canada, China, and others. Many of these services offer free tiers with limited capabilities or data coverage, but for comprehensive access, a paid subscription is often required.</p> <p>You should choose data sources based on your specific requirements. Much of the research and analysis conducted by QuantJourney can be performed using the free-of-charge Yahoo Finance data. It\u2019s up to you to determine what data you need to run your analyses effectively.</p>"},{"location":"documentation/#code-and-github-repository","title":"Code and GitHub Repository","text":"<p>To full code is available in private GitHub repository, and available to paid subscribers to Quant Journey with Code blog. If you'd like to have an access please subscribe it.</p> <p>The best way is to start with examples, and discover more!</p> <p>If you have any questions, please contact me directly.</p>"},{"location":"installation/","title":"Installation MongoDB","text":"<p>In this section, we'll walk through the process of downloading, installing, and setting up MongoDB on your local machine. We'll also explore how to create a database, user, and run some basic operations using scripts. d</p>"},{"location":"installation/#video","title":"Video","text":"<p>You can watch video explaining how to use MongoDB in QuantJourney Framework at  x  xi dddd</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>Before we begin, make sure you have the following:</p> <ul> <li>A computer running macOS, Linux, or Windows</li> <li>Basic knowledge of the command line interface (CLI)</li> </ul>"},{"location":"installation/#step-1-download-mongodb","title":"Step 1: Download MongoDB","text":"<p>A) Visit the official MongoDB website: https://www.mongodb.com/docs/manual/tutorial/install-mongodb-on-os-x/</p> <p>B) Choose your operating system on the left and then decide how you want to install MongoDB on your computer with the presented options. I am using the Homebrew package manager on macOS (read more at: https://hornebnew.com/), which simplifies the installation.</p>"},{"location":"installation/#step-2-install-mongodb","title":"Step 2: Install MongoDB","text":"<p>A) While using the Homebrew package manager, type the following in your terminal to download the latest version of MongoDB Community Edition. It's completely free of charge.</p> <pre><code>brew install mongodb-community@7.0\n</code></pre> <p>B) Now that it is downloaded, let's try to start MongoDB with the following command:</p> <pre><code>brew services start mongodb-community@7.0\n</code></pre> <p>It should run, and with <code>brew services</code> you should be able to see that your MongoDB daemon is running. However, for QuantJourney, we want to run the mongod daemon (MongoDB process) manually as a background process using a config file and specifying our <code>_log</code> (for logging), <code>_data</code> (for data storing), etc. directories.</p> <p>You can run the above command to check if all is okay.</p> <p>C) To run MongoDB with our config file, start it by executing the <code>start_mongodb.sh</code> shell script from your terminal from the main directory:</p> <pre><code>#!/bin/bash\n\n# Set the data directory path\nDATA_DIR=\"/Users/jakub/quantjourney/_data/mongodb\"\n\n# Set the log directory path\nLOG_DIR=\"/Users/jakub/quantjourney/_logs\"\n\n# Create the data directory if it doesn't exist\nmkdir -p \"$DATA_DIR\"\n\n# Create the log directory if it doesn't exist\nmkdir -p \"$LOG_DIR\"\n\n# Start MongoDB with the specified data directory and log file on localhost port 27019\nmongod --dbpath \"$DATA_DIR\" --logpath \"$LOG_DIR/mongodb.log\" --logappend --port 27019 --bind_ip localhost\n</code></pre> <p>Prior to running the script, change the directories <code>DATA_DIR</code> and <code>LOG_DIR</code> to your own.</p> <p>The default port for MongoDB is 27017; however, you may change it if needed. In this case, it is set to 27019. In the future, we may run MongoDB replicas (multiple databases sharing data), and these ports will become important for distinguishing between different instances.</p> <p>This script will start the mongod daemon and set the proper config for our use. You may notice that the <code>_log</code> and <code>_data</code> directories will be automatically created in the main directory.</p> <p>Please note that in macOS you may need to add rights to execute this script, as follows:</p> <pre><code>chmod +x start_mongodb.sh\n</code></pre>"},{"location":"installation/#step-3-configuring-quantjourney-db-on-mongodb","title":"Step 3: Configuring QuantJourney DB on MongoDB","text":"<p>A) The <code>start_mongodb.sh</code> shell script will start MongoDB; however, we need to set up our database with proper privileges and names, which we will then use in our Python code.</p> <p>For that, you should get another shell script <code>create_mongodb.sh</code> from the main directory:</p> <pre><code>#!/bin/bash\n\n# Set MongoDB connection details\nMONGO_DB=\"quantjp\"\nMONGO_USER=\"jakub\"\nMONGO_PW=\"password\"\nMONGO_ADMIN_PW=\"-123456789-\"\nMONGO_CLUSTER=\"localhost:27019\"\n\n# Connect to MongoDB admin database\nmongosh \"$MONGO_CLUSTER/admin\" &lt;&lt;EOF\n  // Enable access control\n  db.runCommand({ setParameter: 1, authenticationMechanisms: 'SCRAM-SHA-256' })\n\n  // Create admin user\n  db.createUser({\n    user: 'admin',\n    pwd: '$MONGO_ADMIN_PW',\n    roles: [\n      { role: 'userAdminAnyDatabase', db: 'admin' },\n      { role: 'dbAdminAnyDatabase', db: 'admin' },\n      { role: 'clusterAdmin', db: 'admin' }\n    ]\n  })\n\n  // Authenticate as admin user\n  db.auth('admin', '$MONGO_ADMIN_PW')\n\n  // Create the database (it will be created automatically when it's used the first time)\n  use $MONGO_DB\n\n  // Create user with specified username and password\n  db.createUser({\n    user: \"$MONGO_USER\",\n    pwd: \"$MONGO_PW\",\n    customData: { appName: \"quantjp\" },\n    roles: [\n      { role: \"readWrite\", db: \"$MONGO_DB\" }\n    ]\n  })\n\n  // Create a sample collection and insert a document to ensure the database is created\n  db.createCollection(\"general\")\n  db.general.insertOne({ message: \"Database created successfully.\" })\nEOF\n</code></pre> <p>You can see this script creates a few things. Firstly, it sets the proper roles for the <code>admin</code> user (the main user of the DB instance) and changes the default password for <code>admin</code> to <code>-123456789-</code>. It is good practice to change the default password of used applications. Then, the script creates a regular user to operate the DB with the name <code>jakub</code>, assigns the password <code>password</code>, creates a DB with the name <code>quantjp</code>, and grants privileges to this user for the created DB.</p> <p>You may modify those parameters, but then in the configuration file for the QuantJourney framework, you will have to specify them again to access MongoDB. Here, the parameters are used to create the DB; in the config file, they will be used to access it.</p> <p>Please note that in macOS you may need to add rights to execute this script, as follows:</p> <pre><code>chmod +x create_mongodb.sh\n</code></pre>"},{"location":"installation/#step-4-checking-mongodb","title":"Step 4: Checking MongoDB","text":"<p>A) Once the DB is created, we may start it again and check if all is fine. I usually use MongoDB Compass for this, which you can download from https://www.mongodb.com/products/tools/compass</p> <p>After installing it, you may connect to your MongoDB with:</p> <pre><code>mongodb://localhost:27017/\n</code></pre> <p>or directly from Compass.</p> <p>Then you should see:</p> <p>Please note I have more DBs (collections), which we will create while running our framework.</p> <p>Congratulations! You have successfully installed MongoDB, created a database, user, and performed some basic operations using scripts.</p>"},{"location":"installation/#step-5-running-mongodb-in-the-cloud-with-mongodb-atlas","title":"Step 5: Running MongoDB in the Cloud with MongoDB Atlas","text":"<p>If you don't want to run MongoDB locally on your computer, you can use MongoDB Atlas, a cloud-based database service that provides robust features and scalability. To get started with MongoDB Atlas:</p> <ol> <li>Sign up for a free account at MongoDB Atlas.</li> <li>Follow the instructions to create a new cluster (MongoDB running as a cluster in the cloud).</li> <li>Configure your cluster settings, including region and instance size.</li> <li>Connect to your cluster using the provided connection string.</li> </ol> <p>With MongoDB Atlas, you can easily manage and scale your MongoDB deployments in the cloud. The only difference will be modifying the config file in QuantJourney to access the cloud version.</p> <p>The local version will be available as:</p> <pre><code># Connect to local MongoDB instance\nclient = MongoClient('mongodb://localhost:27017/')\n</code></pre> <p>while the cloud version will be:</p> <pre><code>client = MongoClient('mongodb+srv://&lt;username&gt;:&lt;password&gt;@&lt;cluster-url&gt;/test?retryWrites=true&amp;w=majority')\n</code></pre> <p>so only the URL will change.</p>"},{"location":"repo/","title":"Getting QuantJourney Repository from GitHub","text":"<p>In this section, we will clone the QuantJourney repository from GitHub, unpack the contents, and set up the Python environment.</p>"},{"location":"repo/#step-1-cloning-a-repository","title":"Step 1: Cloning a Repository","text":"<p>A) To clone a repository, you need to go to https://github.com/jpolec/quantjourney once you have access.</p> <p>Then, go to the <code>Code</code> button and uncover options on how to download the repository. One of the recommended ways is to use GitHub Desktop, which you can download from their site. It allows for better sync-up with further repository changes.</p> <p>Alternatively, you can download Git and install it on your computer from Git SCM.</p> <p>B) Once you have your directory for the project, e.g., <code>/Users/&lt;your_name&gt;/quantjourney</code> (for OSX), you may do:</p> <pre><code>   cd path/to/your/folder\n\n   git clone https://github.com/jpolec/quantjourney.git\n</code></pre> <p>This downloads the repository and its entire version history.</p>"},{"location":"repo/#step-2-unpacking-and-setting-environment","title":"Step 2: Unpacking and Setting Environment","text":"<p>After cloning the repository, you might need to unpack files, or with GitHub Desktop, they will automatically be in the set directory, so you can start VSC (Visual Studio Code) or any other IDE to work with the code.</p> <p>C) Setting up the repository.</p> <p>You need to start with a virtual environment - in my case, I am doing it as follows:</p> <pre><code>python -m venv venv_3.12\n</code></pre> <p>from the main directory within VSC. I used to set up an environment for a specific version of Python (in my case, 3.12).</p> <p>Using a virtual environment in Python projects helps manage dependencies efficiently and keeps your project organized. Always activate your virtual environment before working on your project to ensure you're using the right versions of your dependencies.</p> <p>In the future, we may use Poetry or any other tool for package and dependency management in Python. This part is with pip, as this is a commonly used package manager for Python packages.</p> <p>Once you set up the virtual environment, you have to activate it with:</p> <pre><code>source venv_3.12/bin/activate\n</code></pre> <p>In the main directory, you will find a file called <code>requirements.txt</code>, where all libraries needed to run QuantJourney are stored. You should install them with the command:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"repo/#step-3-setting-final-configuration","title":"Step 3: Setting final configuration","text":"<p>A) In order QuantJourney be able to use DB and other sources of data we have to set-up configuration file. This file by default is set in <code>_config</code> directory and is in JSON form with the name <code>config.json</code>.</p> <p>It looks like:</p> <p>As you may see in the bottom there is a configuration for MongoDB which we set-up during MongoDB installation</p> <p>We rely on data sourced from the Internet, including both free and paid services. Free data is available from sources like YFinance. Paid data is sourced from services such as EODHistorical Data, which covers over 80 markets and includes data for equities, CFDs, REITs, and more. Another source, FinancialModelingPrep, provides data on over 15,000 stocks, ETFs, and Mutual Funds across various exchanges in the US, Europe, Canada, China, and others. Many of these services offer free tiers with limited capabilities or data coverage, but for comprehensive access, a paid subscription is often required.</p> <p>You should choose data sources based on your specific requirements. Much of the research and analysis conducted by QuantJourney can be performed using the free-of-charge Yahoo Finance data. It\u2019s up to you to determine what data you need to run your analyses effectively.</p> <p>If you don't have an access to some of those sources of data, you may leave such section blank.</p>"},{"location":"repo/#final-step-test","title":"Final Step: Test!","text":"<p>That's all. Your QuantJourney repository should work right now.</p> <p>The best way will be to check  ```bash</p>"},{"location":"videos/","title":"Videos on Quantitative Trading","text":"<p>Welcome to our video library where we explore various aspects of quantitative trading. Dive into detailed explanations and demonstrations through our selected videos. Whether you're a beginner or an experienced trader, these resources are designed to enhance your understanding and skills in quantitative trading with Python.</p>"},{"location":"videos/#featured-video","title":"Featured Video","text":""},{"location":"videos/#understanding-algorithmic-trading-systems","title":"Understanding Algorithmic Trading Systems","text":"<p>Understanding Algorithmic Trading Systems(https://www.youtube.com/shorts/ApK0BSam5dg)</p> <p>Video Description: This video provides a concise overview of the foundational concepts behind algorithmic trading systems. Ideal for those new to the field or looking to refresh their knowledge.</p>"},{"location":"videos/#more-videos","title":"More Videos","text":"<p>You can find more insightful videos on our YouTube channel. Explore a range of topics from basic concepts to advanced trading techniques.</p>"},{"location":"videos/#stay-connected","title":"Stay Connected","text":"<p>Don't miss out on any updates or new video releases. Subscribe to our channel and join our community of quant traders to stay informed and engaged.</p> <p>For any further questions or requests for specific video content, feel free to contact us via email.</p>"},{"location":"assets/bonds/","title":"Module Information","text":"<p>Description: Bonds Assets class for QuantJourney Framework</p> <p>The Bonds module is a component of the Quant Journey Framework, specifically tailored for handling and managing Bonds data for quantitative analysis and algorithmic trading. This module emphasizes the importance of accessing a wide range of Bonds data, including historical and intraday market data, through various data sources like EOD Historical Data, Yahoo Finance, and OANDA.</p> <p>Author: jpolec</p> <p>Date: 27-02-2024 and 18-03-2024</p>"},{"location":"assets/bonds/#class-bonds","title":"Class: Bonds()","text":""},{"location":"assets/bonds/#method-get_bond_ohlcv","title":"Method: get_bond_ohlcv","text":"<pre><code>def get_bond_ohlcv(\n            tickers: List[str],\n            exchanges: List[str],\n            granularity: str,\n            period_starts: List[str],\n            period_ends: List[str],\n            source: str\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get bond OHLCV data Parameters:</p> Name Type Description <code>tickers</code> <code>List[str]</code> List of bond tickers <code>exchanges</code> <code>List[str]</code> List of bond exchanges <code>granularity</code> <code>str</code> Granularity of the data <code>period_starts</code> <code>List[str]</code> List of start dates <code>period_ends</code> <code>List[str]</code> List of end dates <code>source</code> <code>str</code> Source of the data <p>Returns:</p> Type Description <code>pd.DataFrame</code> OHLCV data for the specified bonds"},{"location":"assets/bonds/#method-get_bond_info","title":"Method: get_bond_info","text":"<pre><code>def get_bond_info(\n            tickers: List[str],\n            exchanges: List[str],\n            source: str\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get bond info Parameters:</p> Name Type Description <code>tickers</code> <code>List[str]</code> List of bond tickers <code>exchanges</code> <code>List[str]</code> List of bond exchanges <code>source</code> <code>str</code> Source of the data <p>Returns:</p> Type Description <code>pd.DataFrame</code> Information about the specified bonds"},{"location":"assets/commodities/","title":"Module Information","text":"<p>Description: Commodities Assets class for QuantJourney Framework</p> <p>The Commodities module is an essential part of the QuantJourney Framework, crafted to cater specifically to the complexities  of managing and analyzing commodities data for quantitative finance applications. This module leverages the power of multiple data connectors,  including EOD Historical Data, Yahoo Finance, and OANDA, to provide comprehensive access to a wide array of commodities data, crucial for conducting  robust market analysis and developing effective trading strategies in hedge funds.  </p> <p>@gmail.com</p> <p>Author: jpolec</p> <p>Date: 27-02-2024 and 18-03-2024</p>"},{"location":"assets/commodities/#class-commodities","title":"Class: Commodities()","text":""},{"location":"assets/commodities/#method-async_get_commodities_yf","title":"Method: async_get_commodities_yf","text":"<pre><code>def async_get_commodities_yf(\n            read_from_db=False,\n            write_to_db=False\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get commodities data from Yahoo Finance. Parameters:</p> Name Type Description <code>read_from_db</code> <code>bool</code> Read data from database. <code>write_to_db</code> <code>bool</code> Write data to database. <p>Returns:</p> Type Description <code>pd.DataFrame</code> Commodities data."},{"location":"assets/commodities/#method-async_get_ohlcv","title":"Method: async_get_ohlcv","text":"<pre><code>def async_get_ohlcv(\n            tickers,\n            exchanges,\n            source,\n            granularity,\n            period_starts=None,\n            period_ends=None,\n            db_name=None,\n            read_from_db=False,\n            write_to_db=False\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Async get historical OHLCV data for a commodity tickers Parameters:</p> Name Type Description <code>tickers</code> <code>List[str]</code> List of stock tickers. <code>exchanges</code> <code>List[str]</code> List of stock exchanges. <code>source</code> <code>str</code> Data source for connectors (yf, eod, oanda, etc.). <code>granularity</code> <code>str</code> Time period (5m, 15m, 30m, 1h, 1d). <code>period_starts</code> <code>List[str]</code> Start date. <code>period_ends</code> <code>List[str]</code> End date. <code>db_name</code> <code>str</code> Database to read from/write to (e.g. Mongo). <code>read_from_db</code> <code>bool</code> Read from database. <code>write_to_db</code> <code>bool</code> Write to database. <p>Returns:</p> Type Description <code>pd.DataFrame</code> OHLCV data."},{"location":"assets/crypto/","title":"Module Information","text":"<p>Description: Crypto Assets class for QuantJourney Framework</p> <p>This module is responsible for managing cryptocurrency assets for quantitative analysis and algorithmic trading. It has methods to fetch prices and other data from various cryptocurrency exchanges using the CCXT library. You can use it with any exchange, but currently 'binance' and 'coinbase' are implemented below.</p> <p>Author: jpolec</p> <p>Date: 18-03-2024</p>"},{"location":"assets/crypto/#class-crypto","title":"Class: Crypto()","text":""},{"location":"assets/crypto/#method-get_exchange_symbols","title":"Method: get_exchange_symbols","text":"<pre><code>def get_exchange_symbols(\n            exchange: str ='binance'\n        ) -&gt; list\n</code></pre> <p>Get all available symbols for an exchange.</p> <p>Examples:</p> <pre><code>symbols = dc.crypto.get_exchange_symbols('binance')\nsymbols = dc.crypto.get_exchange_symbols('coinbase')\n\nExchange symbols: ['ETH/BTC', 'LTC/BTC', 'BNB/BTC', 'NEO/BTC', 'QTUM/ETH', 'EOS/ETH', 'SNT/ETH',\n'BNT/ETH', 'BCC/BTC', 'GAS/BTC', 'BNB/ETH', 'BTC/USDT', 'ETH/USDT', 'HSR/BTC', 'OAX/ETH', 'DNT/ETH',\n'MCO/ETH', 'ICN/ETH', 'MCO/BTC', 'WTC/BTC', 'WTC/ETH', 'LRC/BTC', 'LRC/ETH', 'QTUM/BTC', 'YOYOW/BTC',\n'OMG/BTC', 'OMG/ETH', 'ZRX/BTC', 'ZRX/ETH', 'STRAT/BTC', 'STRAT/ETH', 'SNGLS/BTC', 'SNGLS/ETH', 'BQX/BTC',\n'BQX/ETH', 'KNC/BTC', 'KNC/ETH', 'FUN/BTC', 'FUN/ETH', 'SNM/BTC', 'SNM/ETH', 'NEO/ETH', 'IOTA/BTC', 'IOTA/ETH',\n'LINK/BTC', 'LINK/ETH', 'XVG/BTC', 'XVG/ETH', 'SALT/BTC', 'SALT/ETH', 'MDA/BTC', 'MDA/ETH', 'MTL/BTC',\n'MTL/ETH', 'SUB/BTC', 'SUB/ETH', 'EOS/BTC', 'SNT/BTC', 'ETC/ETH', 'ETC/BTC', 'MTH/BTC', 'MTH/ETH', 'ENG/BTC',\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange <p>Returns:</p> Type Description <code>list</code> list of all available symbols"},{"location":"assets/crypto/#method-get_latest_price","title":"Method: get_latest_price","text":"<pre><code>def get_latest_price(\n            exchange: str,\n            symbol: str\n        ) -&gt; Optional[float]\n</code></pre> <p>Get the latest price of a given symbol on a given exchange.</p> <p>Examples:</p> <pre><code>btc_price = dc.crypto.get_latest_price('binance', 'BTC/USDT')\neth_price = dc.crypto.get_latest_price('coinbase', 'ETH/USDT')\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange (e.g., 'binance', 'coinbase') <code>symbol</code> <code>str</code> the trading symbol (e.g., 'BTC/USDT', 'ETH/USDT') <p>Returns:</p> Type Description <code>Optional[float]</code> the latest price of the symbol on the specified exchange, or None if an error occurs"},{"location":"assets/crypto/#method-get_account_balance","title":"Method: get_account_balance","text":"<pre><code>def get_account_balance(\n            exchange: str\n        ) -&gt; Optional[Dict[str, float]]\n</code></pre> <p>Get the account balance for a given exchange.</p> <p>Examples:</p> <pre><code>binance_balance = dc.crypto.get_account_balance('binance')\ncoinbase_balance = dc.crypto.get_account_balance('coinbase')\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange (e.g., 'binance', 'coinbase') <p>Returns:</p> Type Description <code>Optional[Dict[str, float]]</code> the account balance on the specified exchange, or None if an error occurs"},{"location":"assets/crypto/#method-place_market_order","title":"Method: place_market_order","text":"<pre><code>def place_market_order(\n            exchange: str,\n            symbol: str,\n            side: str,\n            amount: float\n        ) -&gt; Optional[ccxt.Order]\n</code></pre> <p>Place a market order on a given exchange.</p> <p>Examples:</p> <pre><code>buy_order = dc.crypto.place_market_order('binance', 'BTC/USDT', 'buy', 0.1)\nsell_order = dc.crypto.place_market_order('coinbase', 'ETH/USDT', 'sell', 1.5)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange (e.g., 'binance', 'coinbase') <code>symbol</code> <code>str</code> the trading symbol (e.g., 'BTC/USDT', 'ETH/USDT') <code>side</code> <code>str</code> the side of the order ('buy' or 'sell') <code>amount</code> <code>float</code> the amount of the asset to buy or sell <p>Returns:</p> Type Description <code>Optional[ccxt.Order]</code> the placed market order, or None if an error occurs"},{"location":"assets/crypto/#method-get_order_book","title":"Method: get_order_book","text":"<pre><code>def get_order_book(\n            exchange: str,\n            symbol: str,\n            limit: int = 5\n        ) -&gt; Optional[Dict]\n</code></pre> <p>Get the order book for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>binance_order_book = dc.crypto.get_order_book('binance', 'BTC/USDT', limit=10)\ncoinbase_order_book = dc.crypto.get_order_book('coinbase', 'ETH/USDT', limit=5)\n\nOrder book: {'symbol': 'BTC/USDT', 'bids': [[57462.3, 2.331], [57462.2, 0.07], [57462.0, 0.075],\n[57461.3, 0.042], [57461.2, 0.07]], 'asks': [[57462.4, 1.993], [57462.5, 0.003], [57462.6, 0.003],\n[57462.7, 0.003], [57462.8, 0.098]], 'timestamp': 1714626869768, 'datetime': '2024-05-02T05:14:29.768Z',\n'nonce': 4535218558049}\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange (e.g., 'binance', 'coinbase') <code>symbol</code> <code>str</code> the trading symbol (e.g., 'BTC/USDT', 'ETH/USDT') <code>limit</code> <code>int</code> the depth of the order book (default: 5) <p>Returns:</p> Type Description <code>Optional[Dict]</code> the order book for the specified symbol on the exchange, or None if an error occurs"},{"location":"assets/crypto/#method-get_market_structure","title":"Method: get_market_structure","text":"<pre><code>def get_market_structure(\n            exchange: str,\n            ticker: str\n        ) -&gt; Optional[Dict]\n</code></pre> <p>Get the market structure for a given ticker on an exchange.</p> <p>Examples:</p> <pre><code>binance_market_structure = dc.crypto.get_market_structure('binance', 'BTC/USDT')\ncoinbase_market_structure = dc.crypto.get_market_structure('coinbase', 'ETH/USDT')\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange (e.g., 'binance', 'coinbase') <code>ticker</code> <code>str</code> the trading ticker (e.g., 'BTC/USDT', 'ETH/USDT') <p>Returns:</p> Type Description <code>Optional[Dict]</code> the market structure for the specified ticker on the exchange, or None if an error occurs"},{"location":"assets/crypto/#method-get_tickers","title":"Method: get_tickers","text":"<pre><code>def get_tickers(\n            exchange: str,\n            symbols: List[str] = None\n        ) -&gt; Optional[Dict]\n</code></pre> <p>Get the tickers for a specific exchange.</p> <p>Examples:</p> <pre><code>binance_tickers = dc.crypto.get_tickers('binance')\ncoinbase_tickers = dc.crypto.get_tickers('coinbase', symbols=['BTC/USDT', 'ETH/USDT'])\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange (e.g., 'binance', 'coinbase') <code>symbols</code> <code>str</code> a list of symbols to retrieve tickers for (default: None) <p>Returns:</p> Type Description <code>Optional[Dict]</code> a dictionary of tickers for the specified exchange, or None if an error occurs"},{"location":"assets/crypto/#method-get_trades","title":"Method: get_trades","text":"<pre><code>def get_trades(\n            exchange: str,\n            symbol: str,\n            since: int = None,\n            limit: int = None\n        ) -&gt; Optional[List]\n</code></pre> <p>Get the recent trades for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>binance_trades = dc.crypto.get_trades('binance', 'BTC/USDT', since=1647580800000, limit=1000)\ncoinbase_trades = dc.crypto.get_trades('coinbase', 'ETH/USDT', limit=500)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange (e.g., 'binance', 'coinbase') <code>symbol</code> <code>str</code> the trading symbol (e.g., 'BTC/USDT', 'ETH/USDT') <code>since</code> <code>int</code> the timestamp (in milliseconds) to start retrieving trades from (default: None) <code>limit</code> <code>int</code> the maximum number of trades to retrieve (default: None) <p>Returns:</p> Type Description <code>Optional[List]</code> a list of recent trades for the specified symbol on the exchange, or None if an error occurs"},{"location":"assets/crypto/#method-get_funding_rates","title":"Method: get_funding_rates","text":"<pre><code>def get_funding_rates(\n            exchange: str,\n            symbol: str,\n            start_time: int = None,\n            end_time: int = None,\n            limit: int = 1000\n        ) -&gt; Optional[List]\n</code></pre> <p>Get the funding rates for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>binance_funding_rates = dc.crypto.get_funding_rates('binance', 'BTC/USDT', start_time=1620000000000, end_time=1621000000000, limit=500)\ncoinbase_funding_rates = dc.crypto.get_funding_rates('coinbase', 'ETH/USDT', limit=200)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange (e.g., 'binance', 'coinbase') <code>symbol</code> <code>str</code> the trading symbol (e.g., 'BTC/USDT', 'ETH/USDT') <code>start_time</code> <code>int</code> the start timestamp (default: None) <code>end_time</code> <code>int</code> the end timestamp (default: None) <code>limit</code> <code>int</code> the maximum number of funding rates to retrieve (default: 1000) <p>Returns:</p> Type Description <code>Optional[List]</code> a list of funding rates for the specified symbol on the exchange, or None if an error occurs"},{"location":"assets/crypto/#method-get_open_interest","title":"Method: get_open_interest","text":"<pre><code>def get_open_interest(\n            exchange: str,\n            symbol: str,\n            period: str,\n            limit: int = 500\n        ) -&gt; Optional[List]\n</code></pre> <p>Get the open interest for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>binance_open_interest = dc.crypto.get_open_interest('binance', 'BTC/USDT', '5m', limit=400)\ncoinbase_open_interest = dc.crypto.get_open_interest('coinbase', 'ETH/USDT', '1h', limit=300)\n\nOpen interest: [{'symbol': 'BTC/USDT:USDT', 'baseVolume': 74055.805, 'quoteVolume': 4419354219.18,\n'openInterestAmount': 74055.805, 'openInterestValue': 4419354219.18, 'timestamp': 1714506900000,\n'datetime': '2024-04-30T19:55:00.000Z', 'info': {'symbol': 'BTCUSDT', 'sumOpenInterest': '74055.80500000',\n'sumOpenInterestValue': '4419354219.18000000', 'timestamp': '1714506900000'}},\ns\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange (e.g., 'binance', 'coinbase') <code>symbol</code> <code>str</code> the trading symbol (e.g., 'BTC/USDT', 'ETH/USDT') <code>period</code> <code>str</code> the period for the open interest (e.g., '5m', '1h', '1d') <code>limit</code> <code>int</code> the maximum number of data points to retrieve (default: 500) <p>Returns:</p> Type Description <code>Optional[List]</code> a list of open interest data for the specified symbol on the exchange, or None if an error occurs"},{"location":"assets/crypto/#method-get_historical_trades","title":"Method: get_historical_trades","text":"<pre><code>def get_historical_trades(\n            exchange: str,\n            symbol: str,\n            start_time: int = None,\n            end_time: int = None,\n            limit: int = 1000\n        ) -&gt; Optional[List]\n</code></pre> <p>Get the historical trades for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>binance_historical_trades = dc.crypto.get_historical_trades('binance', 'BTC/USDT', start_time=1620000000000, end_time=1621000000000, limit=500)\ncoinbase_historical_trades = dc.crypto.get_historical_trades('coinbase', 'ETH/USDT', limit=200)\n\nHistorical trades: [{'info': {'a': '462350718', 'p': '56630.34', 'q': '0.003', 'f': '750315980', 'l': '750315980', 'T': '1620000000087', 'm': False},\n'timestamp': 1620000000087, 'datetime': '2021-05-03T00:00:00.087Z', 'symbol': 'BTC/USDT:USDT', 'id': '462350718', 'order': None, 'type': None, 'side': 'buy',\n'takerOrMaker': None, 'price': 56630.34, 'amount': 0.003, 'cost': 169.89102, 'fee': None, 'fees': []},\n\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange (e.g., 'binance', 'coinbase') <code>symbol</code> <code>str</code> the trading symbol (e.g., 'BTC/USDT', 'ETH/USDT') <code>start_time</code> <code>int</code> the start timestamp (default: None) <code>end_time</code> <code>int</code> the end timestamp (default: None) <code>limit</code> <code>int</code> the maximum number of trades to retrieve (default: 1000) <p>Returns:</p> Type Description <code>Optional[List]</code> a list of historical trades for the specified symbol on the exchange, or None if an error occurs"},{"location":"assets/crypto/#method-get_liquidations","title":"Method: get_liquidations","text":"<pre><code>def get_liquidations(\n            exchange: str,\n            symbol: str,\n            start_time: int = None,\n            end_time: int = None,\n            limit: int = 1000\n        ) -&gt; Optional[List]\n</code></pre> <p>Get the liquidations for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>binance_liquidations = dc.crypto.get_liquidations('binance', 'BTC/USDT', start_time=1620000000000, end_time=1621000000000, limit=500)\ncoinbase_liquidations = dc.crypto.get_liquidations('coinbase', 'ETH/USDT', limit=200)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange (e.g., 'binance', 'coinbase') <code>symbol</code> <code>str</code> the trading symbol (e.g., 'BTC/USDT', 'ETH/USDT') <code>start_time</code> <code>int</code> the start timestamp (default: None) <code>end_time</code> <code>int</code> the end timestamp (default: None) <code>limit</code> <code>int</code> the maximum number of liquidations to retrieve (default: 1000) <p>Returns:</p> Type Description <code>Optional[List]</code> a list of liquidations for the specified symbol on the exchange, or None if an error occurs"},{"location":"assets/crypto/#method-get_futures_klines","title":"Method: get_futures_klines","text":"<pre><code>def get_futures_klines(\n            exchange: str,\n            symbol: str,\n            interval: str,\n            start_time: int = None,\n            end_time: int = None,\n            limit: int = 1500\n        ) -&gt; Optional[List]\n</code></pre> <p>Get the futures klines (candlestick data) for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>binance_futures_klines = dc.crypto.get_futures_klines('binance', 'BTC/USDT', '5m', start_time=1620000000000, end_time=1621000000000, limit=1000)\ncoinbase_futures_klines = dc.crypto.get_futures_klines('coinbase', 'ETH/USDT', '1h', limit=500)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange (e.g., 'binance', 'coinbase') <code>symbol</code> <code>str</code> the trading symbol (e.g., 'BTC/USDT', 'ETH/USDT') <code>interval</code> <code>str</code> the kline interval (e.g., '1m', '5m', '1h', '1d') <code>start_time</code> <code>int</code> the start timestamp (default: None) <code>end_time</code> <code>int</code> the end timestamp (default: None) <code>limit</code> <code>int</code> the maximum number of klines to retrieve (default: 1500) <p>Returns:</p> Type Description <code>Optional[List]</code> a list of futures klines for the specified symbol on the exchange, or None if an error occurs"},{"location":"assets/crypto/#method-get_futures_mark_price_klines","title":"Method: get_futures_mark_price_klines","text":"<pre><code>def get_futures_mark_price_klines(\n            exchange: str,\n            symbol: str,\n            interval: str,\n            start_time: int = None,\n            end_time: int = None,\n            limit: int = 1500\n        ) -&gt; Optional[List]\n</code></pre> <p>Get the futures mark price klines for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>binance_futures_mark_price_klines = dc.crypto.get_futures_mark_price_klines('binance', 'BTC/USDT', '5m', start_time=1620000000000, end_time=1621000000000, limit=1000)\ncoinbase_futures_mark_price_klines = dc.crypto.get_futures_mark_price_klines('coinbase', 'ETH/USDT', '1h', limit=500)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange (e.g., 'binance', 'coinbase') <code>symbol</code> <code>str</code> the trading symbol (e.g., 'BTC/USDT', 'ETH/USDT') <code>interval</code> <code>str</code> the kline interval (e.g., '1m', '5m', '1h', '1d') <code>start_time</code> <code>int</code> the start timestamp (default: None) <code>end_time</code> <code>int</code> the end timestamp (default: None) <code>limit</code> <code>int</code> the maximum number of klines to retrieve (default: 1500) <p>Returns:</p> Type Description <code>Optional[List]</code> a list of futures mark price klines for the specified symbol on the exchange, or None if an error occurs"},{"location":"assets/crypto/#method-get_ohlcv","title":"Method: get_ohlcv","text":"<pre><code>def get_ohlcv(\n            exchange: str,\n            ticker: str,\n            timeframe: str,\n            start_date: str,\n            end_date: str,\n            db_name=None,\n            source='ccxt',\n            read_from_db=False,\n            write_to_db=False\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get OHLCV data for a specific ticker and timeframe from a specific exchange.</p> <p>Examples:</p> <pre><code>ohlcv_data = await dc.crypto.get_ohlcv('binance', 'BTC/USDT', '1d', '2022-01-01', '2022-01-10')\nohlcv_data = await dc.crypto.get_ohlcv('binance', 'BTC/USDT', '1d', '2022-01-01', '2022-01-10', db_name='Mongo', source='ccxt', read_from_db=True)\n\nOHLCV data:       open      high       low     close      volume\n48   2022-01-02  47704.35  48000.00  46605.68  47280.00  184795.093\n49   2022-01-03  47280.01  47575.22  45665.40  46445.81  244781.793\n50   2022-01-04  46445.80  47524.36  45445.57  45833.42  292149.750\n51   2022-01-05  45833.41  47075.29  42270.00  43421.69  485477.569\n52   2022-01-06  43421.70  43766.00  42385.83  43080.01  299509.851\n53   2022-01-07  43080.01  43135.00  40456.56  41553.86  473214.849\n54   2022-01-08  41553.87  42335.00  40500.00  41688.05  283737.224\n55   2022-01-09  41688.05  42773.85  41170.00  41851.22  223134.952\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> name of the exchange <code>ticker</code> <code>str</code> trading pair (e.g., 'BTC/USDT') <code>timeframe</code> <code>time period</code> (e.g., '1m', '5m', '15m', '30m', '1h', '1d') <code>start_date</code> <code>str</code> start date (e.g., '2022-01-01') <code>end_date</code> <code>str</code> end date (e.g., '2022-01-10') <code>db_name</code> <code>str</code> the name of the database to read from/write to (e.g., 'Mongo') <code>source</code> <code>str</code> used for reading / writing to the database, set in metadata <code>read_from_db</code> <code>bool</code> whether to read data from the database <code>write_to_db</code> <code>bool</code> whether to write data to the database <p>Returns:</p> Type Description <code>pd.DataFrame</code> pandas DataFrame containing OHLCV data"},{"location":"assets/equities/","title":"Module Information","text":"<p>Description: Equities Assets class for QuantJourney Framework</p> <p>The Equities module is a crucial component of the QuantJourney Framework, specifically tailored for  handling and managing equity data for quantitative analysis and algorithmic trading in hedge funds.  This module emphasizes the importance of accessing a wide range of equity data, including historical and intraday  market data, corporate actions, and financial news, through various data sources like EOD Historical Data,  Yahoo Finance, and OANDA.</p> <p>Author: jpolec</p> <p>Date: 27-02-2024 and 18-03-2024</p>"},{"location":"assets/equities/#class-equities","title":"Class: Equities()","text":""},{"location":"assets/equities/#method-get_us_securities","title":"Method: get_us_securities","text":"<pre><code>def get_us_securities() -&gt; pd.DataFrame\n</code></pre> <p>Get a list of all US securities from EODHistoricalData.</p> <p>Examples:</p> <pre><code>sec = dc.self.connectors['eod'].get_us_securities()\n\nUS Securities:              Code  ...          Isin\n0      0P0000A412  ...          None\n1      0P0000RX5G  ...          None\n2      0P0001GXZ7  ...          None\n3      0P0001NGF5  ...          None\n4               A  ...  US00846U1016\n...           ...  ...           ...\n47987        ZYME  ...  CA98985W1023\n47988        ZYXI  ...  US98986M1036\n47989       ZZHGF  ...          None\n47990       ZZHGY  ...          None\n47991       ZZZOF  ...          None\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> Code, Name, Country, Exchange, Currency, Type, Isin"},{"location":"assets/equities/#method-async_get_ticker_historical_mcap","title":"Method: async_get_ticker_historical_mcap","text":"<pre><code>def async_get_ticker_historical_mcap(\n            ticker: str,\n            exchange: str =\"US\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get historical market capitalization for a ticker</p> <p>Examples:</p> <pre><code>mcap = await dc.equities.async_get_ticker_historical_mcap(\"AAPL\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> the stock ticker <code>exchange</code> <code>str</code> the stock exchange <p>Returns:</p> Type Description <code>pd.DataFrame</code> the historical market capitalization data"},{"location":"assets/equities/#method-async_get_ticker_nearby_earnings","title":"Method: async_get_ticker_nearby_earnings","text":"<pre><code>def async_get_ticker_nearby_earnings(\n            ticker: str,\n            exchange: str =\"US\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get nearby earnings for a ticker</p> <p>Examples:</p> <pre><code>earnings = await dc.equities.async_get_ticker_nearby_earnings(\"AAPL\")\n\nNearby Earnings:       code report_date        date  ... estimate difference  percent\n0  AAPL.US  2023-05-04  2023-03-31  ...     1.43       0.09   6.2937\n1  AAPL.US  2023-08-03  2023-06-30  ...     1.19       0.07   5.8824\n2  AAPL.US  2023-11-02  2023-09-30  ...     1.39       0.07   5.0360\n3  AAPL.US  2024-02-01  2023-12-31  ...     2.10       0.08   3.8095\n4  AAPL.US  2024-05-02  2024-03-31  ...     1.50        NaN      NaN\n5  AAPL.US  2024-08-01  2024-06-30  ...      NaN        NaN      NaN\n6  AAPL.US  2024-10-31  2024-09-30  ...      NaN        NaN      NaN\n7  AAPL.US  2025-02-27  2024-12-31  ...      NaN        NaN      NaN\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <p>Returns:</p> Type Description <code>pd.DataFrame</code> the nearby earnings data"},{"location":"assets/equities/#method-async_get_nearby_ipos","title":"Method: async_get_nearby_ipos","text":"<pre><code>def async_get_nearby_ipos() -&gt; pd.DataFrame\n</code></pre> <p>Get nearby IPOs, i.e., Initial Public Offerings</p> <p>Examples:</p> <pre><code>ipos = await dc.equities.async_get_nearby_ipos()\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> the nearby IPOs data"},{"location":"assets/equities/#method-async_get_nearby_splits","title":"Method: async_get_nearby_splits","text":"<pre><code>def async_get_nearby_splits() -&gt; pd.DataFrame\n</code></pre> <p>Get nearby stock splits</p> <p>Examples:</p> <pre><code>splits = await dc.equities.async_get_nearby_splits()\n\nNearby Splits:               code  split_date optionable  old_shares  new_shares\n0     CANTABIL.BSE  2023-11-02          N           1           5\n1          MOTS.US  2023-11-02          N          15           1\n2            VR.CN  2023-11-02          N           3           1\n3     CANTABIL.NSE  2023-11-02          N           1           5\n4         VRCFD.US  2023-11-02          N           3           1\n...            ...         ...        ...         ...         ...\n1965       3AG1.BE  2024-09-27          N           1          10\n1966      9434.TSE  2024-09-27          N           1          10\n1967      3AG1.STU  2024-09-27          N           1          10\n1968        3AG1.F  2024-09-27          N           1          10\n1969      9534.TSE  2024-09-27          N           1           5\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> the nearby stock splits data"},{"location":"assets/equities/#method-async_get_ticker_earnings_trend","title":"Method: async_get_ticker_earnings_trend","text":"<pre><code>def async_get_ticker_earnings_trend(\n            ticker: str,\n            exchange: str =\"US\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get earnings trend for a ticker, i.e., the earnings trend for the last 90 days</p> <p>Examples:</p> <pre><code>trend = await dc.equities.async_get_ticker_earnings_trend(\"AAPL\")\n\nEarnings Trend: code                                            AAPL.US\ndate                                2025-09-30 00:00:00\nperiod                                              +1y\ngrowth                                           0.0920\nearningsEstimateAvg                              7.1300\nearningsEstimateLow                              6.5100\nearningsEstimateHigh                             7.7000\nearningsEstimateYearAgoEps                       6.5300\nearningsEstimateNumberOfAnalysts                39.0000\nearningsEstimateGrowth                           0.0920\nrevenueEstimateAvg                      410879000000.00\nrevenueEstimateLow                      386715000000.00\nrevenueEstimateHigh                     436241000000.00\nrevenueEstimateYearAgoEps                          None\nrevenueEstimateNumberOfAnalysts                   37.00\nrevenueEstimateGrowth                            0.0650\nepsTrendCurrent                                  7.1300\nepsTrend7daysAgo                                 7.1300\nepsTrend30daysAgo                                7.1600\nepsTrend60daysAgo                                7.1700\nepsTrend90daysAgo                                7.1700\nepsRevisionsUpLast7days                          0.0000\nepsRevisionsUpLast30days                         1.0000\nepsRevisionsDownLast30days                       2.0000\n\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <p>Returns:</p> Type Description <code>pd.DataFrame</code> the earnings trend data"},{"location":"assets/equities/#method-async_get_historical_splits","title":"Method: async_get_historical_splits","text":"<pre><code>def async_get_historical_splits(\n            ticker: str,\n            exchange: str =\"US\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get historical stock splits for a ticker, i.e., the historical stock splits data</p> <p>Examples:</p> <pre><code>splits = await dc.equities.async_get_historical_splits(\"AAPL\")\n\nHistorical Splits:\ndate        split\n1987-06-16  2.000000/1.000000\n2000-06-21  2.000000/1.000000\n2005-02-28  2.000000/1.000000\n2014-06-09  7.000000/1.000000\n2020-08-31  4.000000/1.000000\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <p>Returns:</p> Type Description <code>pd.DataFrame</code> the historical stock splits data"},{"location":"assets/equities/#method-async_get_historical_dividends","title":"Method: async_get_historical_dividends","text":"<pre><code>def async_get_historical_dividends(\n            ticker: str,\n            exchange: str =\"US\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get historical dividends for a ticker</p> <p>Examples:</p> <pre><code>dividends = await dc.equities.async_get_historical_dividends(\"AAPL\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <p>Returns:</p> Type Description <code>pd.DataFrame</code> the historical dividends data"},{"location":"assets/equities/#method-async_get_equity_news","title":"Method: async_get_equity_news","text":"<pre><code>def async_get_equity_news(\n            ticker: str =\"\",\n            exchange: str =\"US\",\n            tag: str =\"\",\n            period_end=datetime.now(pytz.utc\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get news for a ticker</p> <p>Examples:</p> <pre><code>news = await dc.equities.async_get_equity_news(\"AAPL\")\n\nEquity News:\ndate                                                                          ...\n2024-04-29T09:06:00+00:00  4 Artificial Intelligence (AI) Stocks Members ...  ...  0.112\n2024-04-29T09:50:00+00:00  Prediction: This Will Be Warren Buffett's Seco...  ...  0.105\n2024-04-29T13:00:00+00:00  Here's How Much Stock Apple Repurchased in the...  ...  0.156\n2024-04-29T13:48:00+00:00  These Stocks Are Moving the Most Today: Tesla,...  ...  0.113\n2024-04-29T14:26:52+00:00  12 Under-the-Radar Stocks With Massive Upside ...  ...  0.135\n2024-04-29T15:58:39+00:00  US STOCKS-Wall St edges up as Tesla and Apple ...  ...  0.094\n2024-04-29T16:16:57+00:00  US Benchmark Equity Indexes Extend Gains in Mi...  ...  0.369\n2024-04-29T16:47:00+00:00  Should You Buy Apple (AAPL) Stock Ahead of Q2 ...  ...  0.112\n2024-04-29T17:28:23+00:00  What Would Happen If Warren Buffett Bailed On ...  ...  0.144\n2024-04-29T17:49:01+00:00   Tesla, Apple Help US Equity Indexes Extend Gains  ...  0.576\n2024-04-29T19:10:54+00:00  US STOCKS-Wall Street stocks gain as investors...  ...  0.093\n2024-04-29T19:13:12+00:00  Apple shares gain ground after Bernstein analy...  ...  0.098\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>tag</code> <code>str</code> The news tag <code>period_end</code> <code>datetime</code> The end date for the period <code>period_days</code> <code>int</code> The number of days for the period <code>limit</code> <code>int</code> The number of news items to fetch <p>Returns:</p> Type Description <code>pd.DataFrame</code> the news data"},{"location":"assets/equities/#method-async_get_ohlcv","title":"Method: async_get_ohlcv","text":"<pre><code>def async_get_ohlcv(\n            tickers: List[str],\n            exchanges: List[str],\n            source : str,\n            granularity: str = \"1d\",\n            period_starts: List[str] = None,\n            period_ends: List[str] = None,\n            db_name: Optional[str] = None,\n            read_from_db: bool = False,\n            write_to_db: bool = False\n        ) -&gt; List[pd.DataFrame]\n</code></pre> <p>Async get historical OHLCV data for stock tickers. All tickers, exchanges, and period_starts, period_ends are expected to be lists of the same length. Please note read_db and write_db are require running DB; otherwise, it will raise an error, unless set as False. You can specify different source: eod, yf, oanda, etc.</p> <p>Examples:</p> <pre><code>ohlcv_data = await dc.equities.async_get_ohlcv(\ntickers=[\"AAPL\", \"MSFT\"],\nexchanges=[\"US\", \"US\"],\nsource=\"eod\",\ngranularity=\"1d\",\nperiod_starts=[\"2023-01-01\", \"2023-01-01\"],\nperiod_ends=[\"2023-12-31\", \"2023-12-31\"],\nread_from_db=False,\nwrite_to_db=False\n)\n\nOHLCV data: [                     datetime    open    high  ...   close  adj_close     volume\n0   2023-01-03 00:00:00+00:00  130.28  130.90  ...  125.07   124.2163  112117500\n1   2023-01-04 00:00:00+00:00  126.89  128.66  ...  126.36   125.4975   89113600\n2   2023-01-05 00:00:00+00:00  127.13  127.77  ...  125.02   124.1666   80962700\n3   2023-01-06 00:00:00+00:00  126.01  130.29  ...  129.62   128.7352   87754700\n4   2023-01-09 00:00:00+00:00  130.47  133.41  ...  130.15   129.2616   70790800\n..                        ...     ...     ...  ...     ...        ...        ...\n245 2023-12-22 00:00:00+00:00  195.18  195.41  ...  193.60   193.3533   37122800\n246 2023-12-26 00:00:00+00:00  193.61  193.89  ...  193.05   192.8040   28919300\n247 2023-12-27 00:00:00+00:00  192.49  193.50  ...  193.15   192.9038   48087700\n248 2023-12-28 00:00:00+00:00  194.14  194.66  ...  193.58   193.3333   34049900\n249 2023-12-29 00:00:00+00:00  193.90  194.40  ...  192.53   192.2846   42628800\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>tickers</code> <code>list of str</code> List of stock tickers <code>exchanges</code> <code>list of str</code> List of stock exchanges corresponding to tickers <code>source</code> <code>str</code> Data source for connectors (e.g., \"yf\", \"eod\", \"oanda\", etc.) <code>granularity</code> <code>str</code> Granularity for the OHLCV data ('1d', '1h', '15m', '5m', '1m') <code>period_starts</code> <code>list of str</code> List of start dates for the OHLCV data <code>period_ends</code> <code>list of str</code> List of end dates for the OHLCV data <code>db_name</code> <code>str</code> Database name to read from/write to (e.g. Mongo) <code>read_from_db</code> <code>bool</code> Read from database <code>write_to_db</code> <code>bool</code> Write to database <p>Returns:</p> Type Description <code>List[pd.DataFrame]</code> List of OHLCV DataFrames for each ticker"},{"location":"assets/equities/#method-async_get_live_lagged_prices","title":"Method: async_get_live_lagged_prices","text":"<pre><code>def async_get_live_lagged_prices(\n            tickers: List[str],\n            exchanges: List[str],\n            source: str\n        ) -&gt; dict\n</code></pre> <p>Asynchronously fetches live and lagged prices for the given tickers and exchanges. You can specify different source: eod, yf, oanda, etc.</p> <p>Examples:</p> <pre><code>prices = await dc.equities.async_get_live_lagged_prices(\ntickers=[\"AAPL\", \"MSFT\"],\nexchanges=[\"US\", \"US\"],\nsource=\"eod\"\n)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>tickers</code> <code>list of str</code> List of stock tickers. <code>exchanges</code> <code>list of str</code> List of stock exchanges corresponding to tickers. <code>source</code> <code>str</code> Data source for connectors (e.g., \"yf\", \"eod\", \"oanda\", etc.). <p>Returns:</p> Type Description <code>dict</code> dictionary containing live and lagged prices DataFrames for each ticker."},{"location":"assets/equities/#method-async_get_intraday_data","title":"Method: async_get_intraday_data","text":"<pre><code>def async_get_intraday_data(\n            tickers: List[str],\n            exchanges: List[str],\n            source: str,\n            interval: str = \"5m\",\n            to_utc: Optional[datetime] = None,\n            period_days: int = 120\n        ) -&gt; dict\n</code></pre> <p>Asynchronously fetches intraday data for the given tickers and exchanges. You can specify different source: eod, yf, oanda, etc. Interval options: '1m', '5m', '15m', '30m', '1h'.</p> <p>Examples:</p> <pre><code>intraday_data = await dc.equities.async_get_intraday_data(\ntickers=[\"AAPL\", \"MSFT\"],\nexchanges=[\"US\", \"US\"],\nsource=\"eod\",\ninterval=\"5m\",\nto_utc=datetime.utcnow(),\nperiod_days=120\n)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>tickers</code> <code>list of str</code> List of stock tickers <code>exchanges</code> <code>list of str</code> List of stock exchanges corresponding to tickers <code>source</code> <code>str</code> Data source for connectors (e.g., \"yf\", \"eod\", \"oanda\", etc.) <code>interval</code> <code>str</code> Interval for the intraday data ('1m', '5m', '15m', '30m', '1h') <code>to_utc</code> <code>datetime</code> End date and time in UTC. Defaults to current UTC time <code>period_days</code> <code>int</code> Number of days for the data period <p>Returns:</p> Type Description <code>dict</code> dictionary containing intraday data DataFrames for each ticker."},{"location":"assets/equities/#method-async_get_fundamental_data","title":"Method: async_get_fundamental_data","text":"<pre><code>def async_get_fundamental_data(\n            ticker: str,\n            exchange: str = \"US\",\n            source: str = \"eod\",\n            statement_type: Optional[str] = None,\n            period: Union[str,\n            int,\n            None] = None,\n            specific_date: Optional[str] = None,\n            db_name: Optional[str] = None,\n            read_from_db: bool = False,\n            write_to_db: bool = False\n        ) -&gt; Union[Dict, pd.DataFrame]\n</code></pre> <p>Async get fundamental data (income statement, cash flow, balance sheet) for a stock ticker. Reads from the database if read_from_db is True, otherwise fetches from the data source. Writes to the database if write_to_db is True.</p> <p>Examples:</p> <pre><code>fundamental_data = await dc.equities.async_get_fundamental_data(\"AAPL\", \"US\", \"eod\", \"income_statement\", \"y\")\nasync_get_funamental_data(\"AAPL\", \"US\", \"eod\", \"income_statement\", \"y\")\nasync_get_funamental_data(\"AAPL\", \"US\", \"eod\", \"cash_flow\", \"q\")\nasync_get_funamental_data(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <code>statement_type</code> <code>str</code> The type of fundamental data (income_statement, cash_flow, balance_sheet) <code>period</code> <code>str, int</code> The period for the fundamental data (e.g., 'y', 'q', 1, 4) <code>specific_date</code> <code>str</code> The specific date for the fundamental data <code>db_name</code> <code>str</code> Database name to read from/write to (e.g. Mongo) <code>read_from_db</code> <code>bool</code> Read from database <code>write_to_db</code> <code>bool</code> Write to database <p>Returns:</p> Type Description <code>Union[Dict, pd.DataFrame]</code> the fundamental data"},{"location":"assets/equities/#method-async_get_income_statement","title":"Method: async_get_income_statement","text":"<pre><code>def async_get_income_statement(\n            ticker: str,\n            exchange: str,\n            option: str = \"q\",\n            source: str = \"eod\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get income statement for a ticker.</p> <p>Examples:</p> <pre><code>income_statement = await dc.equities.async_get_income_statement(\"AAPL\", \"US\", \"q\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>option</code> <code>str</code> The period option (q - quarterly, y - yearly) <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the income statement data"},{"location":"assets/equities/#method-async_get_balance_sheet","title":"Method: async_get_balance_sheet","text":"<pre><code>def async_get_balance_sheet(\n            ticker: str,\n            exchange: str,\n            option: str = \"q\",\n            source: str = \"eod\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get balance sheet for a ticker.</p> <p>Examples:</p> <pre><code>balance_sheet = await dc.equities.async_get_balance_sheet(\"AAPL\", \"US\", \"q\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>option</code> <code>str</code> The period option (q - quarterly, y - yearly) <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> pd.DataFrame, The balance sheet data"},{"location":"assets/equities/#method-async_get_cash_flow","title":"Method: async_get_cash_flow","text":"<pre><code>def async_get_cash_flow(\n            ticker: str,\n            exchange: str,\n            option: str = \"q\",\n            source: str = \"eod\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get cash flow for a ticker.</p> <p>Examples:</p> <pre><code>cash_flow = await dc.equities.async_get_cash_flow(\"AAPL\", \"US\", \"q\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>option</code> <code>str</code> The period option (q - quarterly, y - yearly) <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the cash flow data"},{"location":"assets/equities/#method-async_get_ticker_highlights","title":"Method: async_get_ticker_highlights","text":"<pre><code>def async_get_ticker_highlights(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker highlights.</p> <p>Examples:</p> <pre><code>highlights = await dc.equities.async_get_ticker_highlights(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> pd.DataFrame, The ticker highlights data"},{"location":"assets/equities/#method-async_get_ticker_mcap","title":"Method: async_get_ticker_mcap","text":"<pre><code>def async_get_ticker_mcap(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker market capitalization.</p> <p>Examples:</p> <pre><code>mcap = await dc.equities.async_get_ticker_mcap(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker market capitalization data"},{"location":"assets/equities/#method-async_get_ticker_ebitda","title":"Method: async_get_ticker_ebitda","text":"<pre><code>def async_get_ticker_ebitda(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker EBITDA.</p> <p>Examples:</p> <pre><code>ebitda = await dc.equities.async_get_ticker_ebitda(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker EBITDA data"},{"location":"assets/equities/#method-async_get_ticker_pe","title":"Method: async_get_ticker_pe","text":"<pre><code>def async_get_ticker_pe(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker PE.</p> <p>Examples:</p> <pre><code>pe = await dc.equities.async_get_ticker_pe(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> pd.DataFrame, The ticker PE data"},{"location":"assets/equities/#method-async_get_ticker_peg","title":"Method: async_get_ticker_peg","text":"<pre><code>def async_get_ticker_peg(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker PEG.</p> <p>Examples:</p> <pre><code>peg = await dc.equities.async_get_ticker_peg(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker PEG data"},{"location":"assets/equities/#method-async_get_ticker_book","title":"Method: async_get_ticker_book","text":"<pre><code>def async_get_ticker_book(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker book.</p> <p>Examples:</p> <pre><code>book = await dc.equities.async_get_ticker_book(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> pd.DataFrame, The ticker book data"},{"location":"assets/equities/#method-async_get_ticker_div_ps","title":"Method: async_get_ticker_div_ps","text":"<pre><code>def async_get_ticker_div_ps(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker div ps.</p> <p>Examples:</p> <pre><code>div_ps = await dc.equities.async_get_ticker_div_ps(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker div ps data"},{"location":"assets/equities/#method-async_get_ticker_div_yield","title":"Method: async_get_ticker_div_yield","text":"<pre><code>def async_get_ticker_div_yield(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker div yield.</p> <p>Examples:</p> <pre><code>div_yield = await dc.equities.async_get_ticker_div_yield(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker div yield data"},{"location":"assets/equities/#method-async_get_ticker_eps","title":"Method: async_get_ticker_eps","text":"<pre><code>def async_get_ticker_eps(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker EPS.</p> <p>Examples:</p> <pre><code>eps = await dc.equities.async_get_ticker_eps(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker EPS data"},{"location":"assets/equities/#method-async_get_ticker_last_quarter_date","title":"Method: async_get_ticker_last_quarter_date","text":"<pre><code>def async_get_ticker_last_quarter_date(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker last quarter date.</p> <p>Examples:</p> <pre><code>last_quarter_date = await dc.equities.async_get_ticker_last_quarter_date(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> pd.DataFrame, The ticker last quarter date data"},{"location":"assets/equities/#method-async_get_ticker_profit_margin","title":"Method: async_get_ticker_profit_margin","text":"<pre><code>def async_get_ticker_profit_margin(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker profit margin.</p> <p>Examples:</p> <pre><code>profit_margin = await dc.equities.async_get_ticker_profit_margin(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker profit margin data"},{"location":"assets/equities/#method-async_get_ticker_op_marginttm","title":"Method: async_get_ticker_op_marginTTM","text":"<pre><code>def async_get_ticker_op_marginTTM(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker op margin TTM (Operating Margin TTM)</p> <p>Examples:</p> <pre><code>op_marginTTM = await dc.equities.async_get_ticker_op_marginTTM(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker op margin TTM data"},{"location":"assets/equities/#method-async_get_ticker_roattm","title":"Method: async_get_ticker_roaTTM","text":"<pre><code>def async_get_ticker_roaTTM(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker ROA TTM (Return on Assets TTM)</p> <p>Examples:</p> <pre><code>roaTTM = await dc.equities.async_get_ticker_roaTTM(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker ROA TTM data"},{"location":"assets/equities/#method-async_get_ticker_roettm","title":"Method: async_get_ticker_roeTTM","text":"<pre><code>def async_get_ticker_roeTTM(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker ROE TTM (Return on Equity TTM)</p> <p>Examples:</p> <pre><code>roeTTM = await dc.equities.async_get_ticker_roeTTM(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker ROE TTM data"},{"location":"assets/equities/#method-async_get_ticker_revenuettm","title":"Method: async_get_ticker_revenueTTM","text":"<pre><code>def async_get_ticker_revenueTTM(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker revenue TTM</p> <p>Examples:</p> <pre><code>revenueTTM = await dc.equities.async_get_ticker_revenueTTM(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker revenue TTM data"},{"location":"assets/equities/#method-async_get_ticker_revenue_psttm","title":"Method: async_get_ticker_revenue_psTTM","text":"<pre><code>def async_get_ticker_revenue_psTTM(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker revenue ps TTM.</p> <p>Examples:</p> <pre><code>revenue_psTTM = await dc.equities.async_get_ticker_revenue_psTTM(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker revenue ps TTM data"},{"location":"assets/equities/#method-async_get_ticker_qoq_rev_growth","title":"Method: async_get_ticker_qoq_rev_growth","text":"<pre><code>def async_get_ticker_qoq_rev_growth(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker QoQ revenue growth.</p> <p>Examples:</p> <pre><code>qoq_rev_growth = await dc.equities.async_get_ticker_qoq_rev_growth(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker QoQ revenue growth data"},{"location":"assets/equities/#method-async_get_ticker_qoq_earnings_growth","title":"Method: async_get_ticker_qoq_earnings_growth","text":"<pre><code>def async_get_ticker_qoq_earnings_growth(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker QoQ earnings growth.</p> <p>Examples:</p> <pre><code>qoq_earnings_growth = await dc.equities.async_get_ticker_qoq_earnings_growth(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker QoQ earnings growth data"},{"location":"assets/equities/#method-async_get_ticker_gross_profitttm","title":"Method: async_get_ticker_gross_profitTTM","text":"<pre><code>def async_get_ticker_gross_profitTTM(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker gross profit TTM.</p> <p>Examples:</p> <pre><code>gross_profitTTM = await dc.equities.async_get_ticker_gross_profitTTM(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker gross profit TTM data"},{"location":"assets/equities/#method-async_get_ticker_diluted_epsttm","title":"Method: async_get_ticker_diluted_epsTTM","text":"<pre><code>def async_get_ticker_diluted_epsTTM(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker diluted EPS TTM (Earnings Per Share TTM).</p> <p>Examples:</p> <pre><code>diluted_epsTTM = await dc.equities.async_get_ticker_diluted_epsTTM(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker diluted EPS TTM data"},{"location":"assets/equities/#method-async_get_ticker_analyst_target","title":"Method: async_get_ticker_analyst_target","text":"<pre><code>def async_get_ticker_analyst_target(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker analyst target.</p> <p>Examples:</p> <pre><code>analyst_target = await dc.equities.async_get_ticker_analyst_target(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker analyst target data"},{"location":"assets/equities/#method-async_get_ticker_sharestats","title":"Method: async_get_ticker_sharestats","text":"<pre><code>def async_get_ticker_sharestats(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker share stats.</p> <p>Examples:</p> <pre><code>sharestats = await dc.equities.async_get_ticker_sharestats(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker share stats data"},{"location":"assets/equities/#method-async_get_ticker_shortratio","title":"Method: async_get_ticker_shortratio","text":"<pre><code>def async_get_ticker_shortratio(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker short ratio.</p> <p>Examples:</p> <pre><code>shortratio = await dc.equities.async_get_ticker_shortratio(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker short ratio data"},{"location":"assets/equities/#method-async_get_ticker_percentinsiders","title":"Method: async_get_ticker_percentinsiders","text":"<pre><code>def async_get_ticker_percentinsiders(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker percent insiders.</p> <p>Examples:</p> <pre><code>percentinsiders = await dc.equities.async_get_ticker_percentinsiders(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker percent insiders data"},{"location":"assets/equities/#method-async_get_ticker_valuation","title":"Method: async_get_ticker_valuation","text":"<pre><code>def async_get_ticker_valuation(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker valuation.</p> <p>Examples:</p> <pre><code>valuation = await dc.equities.async_get_ticker_valuation(\"AAPL\", \"US\", \"eod\")\n\nTicker Valuation: {'TrailingPE': 26.3297, 'ForwardPE': 26.3158, 'PriceSalesTTM': 6.778,\n'PriceBookMRQ': 35.4267, 'EnterpriseValue': 2649250332672, 'EnterpriseValueRevenue': 6.8966,\n'EnterpriseValueEbitda': 19.929}\n\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker valuation data"},{"location":"assets/equities/#method-async_get_ticker_trailing_pe","title":"Method: async_get_ticker_trailing_pe","text":"<pre><code>def async_get_ticker_trailing_pe(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker trailing PE (Price to Earnings).</p> <p>Examples:</p> <pre><code>trailing_pe = await dc.equities.async_get_ticker_trailing_pe(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker trailing PE data"},{"location":"assets/equities/#method-async_get_ticker_forward_pe","title":"Method: async_get_ticker_forward_pe","text":"<pre><code>def async_get_ticker_forward_pe(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker forward PE (Price to Earnings).</p> <p>Examples:</p> <pre><code>forward_pe = await dc.equities.async_get_ticker_forward_pe(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker forward PE data"},{"location":"assets/equities/#method-async_get_ticker_price_to_sales","title":"Method: async_get_ticker_price_to_sales","text":"<pre><code>def async_get_ticker_price_to_sales(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker price to sales.</p> <p>Examples:</p> <pre><code>price_to_sales = await dc.equities.async_get_ticker_price_to_sales(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker price to sales data"},{"location":"assets/equities/#method-async_get_ticker_price_to_book","title":"Method: async_get_ticker_price_to_book","text":"<pre><code>def async_get_ticker_price_to_book(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker price to book.</p> <p>Examples:</p> <pre><code>price_to_book = await dc.equities.async_get_ticker_price_to_book(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker price to book data"},{"location":"assets/equities/#method-async_get_ticker_ev","title":"Method: async_get_ticker_ev","text":"<pre><code>def async_get_ticker_ev(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker enterprise value.</p> <p>Examples:</p> <pre><code>ev = await dc.equities.async_get_ticker_ev(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker enterprise value data"},{"location":"assets/equities/#method-async_get_ticker_ev_revenue","title":"Method: async_get_ticker_ev_revenue","text":"<pre><code>def async_get_ticker_ev_revenue(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker enterprise value to revenue.</p> <p>Examples:</p> <pre><code>ev_revenue = await dc.equities.async_get_ticker_ev_revenue(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker enterprise value to revenue data"},{"location":"assets/equities/#method-async_get_ticker_ev_ebitda","title":"Method: async_get_ticker_ev_ebitda","text":"<pre><code>def async_get_ticker_ev_ebitda(\n            ticker: str,\n            exchange: str,\n            source: str = \"eod\",\n            fundamental_data=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get ticker enterprise value to EBITDA (Earnings Before Interest, Taxes, Depreciation, and Amortization).</p> <p>Examples:</p> <pre><code>ev_ebitda = await dc.equities.async_get_ticker_ev_ebitda(\"AAPL\", \"US\", \"eod\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker <code>exchange</code> <code>str</code> The stock exchange <code>source</code> <code>str</code> The data source (eod, yf, etc.) <p>Returns:</p> Type Description <code>pd.DataFrame</code> the ticker enterprise value to EBITDA data"},{"location":"assets/etfs/","title":"Module Information","text":"<p>Description: ETFs Assets class for QuantJourney Framework</p> <p>The ETF module is a key component of the QuantJourney Framework, designed to facilitate the retrieval and analysis of Exchange-Traded Funds (ETFs) data. This module leverages multiple data connectors, including EOD Historical Data, Yahoo Finance, and OANDA, to provide comprehensive access to ETF data.</p> <p>Author: jpolec</p> <p>Date: 18-03-2024</p>"},{"location":"assets/etfs/#class-etfs","title":"Class: ETFs()","text":""},{"location":"assets/etfs/#method-async_get_etf_general_data","title":"Method: async_get_etf_general_data","text":"<pre><code>def async_get_etf_general_data(\n            tickers,\n            exchanges\n        ) -&gt; List[pd.DataFrame]\n</code></pre> <p>Fetch ETF general data</p> <p>Examples:</p> <pre><code>data = await dc.etfs.async_get_etf_general_data(tickers=[\"SPY\", \"QQQ\"], exchanges=[\"US\", \"US\"])\n\nETF General Data:\n[                     Name  ...     Category\n0  SPDR S&amp;P 500 ETF Trust  ...  Large Blend\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>tickers</code> <code>list of str</code> the list of ETF tickers <code>exchanges</code> <code>list of str</code> the list of ETF exchanges <p>Returns:</p> Type Description <code>List[pd.DataFrame]</code> the ETF general data as a list of DataFrames."},{"location":"assets/etfs/#method-async_get_etf_technicals","title":"Method: async_get_etf_technicals","text":"<pre><code>def async_get_etf_technicals(\n            tickers,\n            exchanges\n        ) -&gt; List[pd.DataFrame]\n</code></pre> <p>Fetch ETF technical data</p> <p>Examples:</p> <pre><code>data = await dc.etfs.async_get_etf_technicals(tickers=[\"SPY\", \"QQQ\"], exchanges=[\"US\", \"US\"])\n\nETF Technical Data:\n[   Beta  52WeekHigh  52WeekLow   50DayMA  200DayMA\n0     1      524.61   402.8064  511.2396  468.3622,    Beta  52WeekHigh  52WeekLow  50DayMA  200DayMA\n0  1.18      449.34   314.1122  436.531  398.0516]\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>tickers</code> <code>list of str</code> the list of ETF tickers <code>exchanges</code> <code>list of str</code> the list of ETF exchanges <p>Returns:</p> Type Description <code>List[pd.DataFrame]</code> the ETF technical data as a list of DataFrames."},{"location":"assets/etfs/#method-async_get_etf_market_cap","title":"Method: async_get_etf_market_cap","text":"<pre><code>def async_get_etf_market_cap(\n            tickers,\n            exchanges\n        ) -&gt; List[pd.DataFrame]\n</code></pre> <p>Fetch ETF market capitalization data</p> <p>Examples:</p> <pre><code>data = await dc.etfs.async_get_etf_market_cap(tickers=[\"SPY\", \"QQQ\"], exchanges=[\"US\", \"US\"])\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>tickers</code> <code>list of str</code> the list of ETF tickers <code>exchanges</code> <code>list of str</code> the list of ETF exchanges <p>Returns:</p> Type Description <code>List[pd.DataFrame]</code> the ETF market capitalization data as a list of DataFrames."},{"location":"assets/etfs/#method-async_get_etf_asset_allocation","title":"Method: async_get_etf_asset_allocation","text":"<pre><code>def async_get_etf_asset_allocation(\n            tickers,\n            exchanges\n        ) -&gt; List[pd.DataFrame]\n</code></pre> <p>Fetch ETF asset allocation data</p> <p>Examples:</p> <pre><code>data = await dc.etfs.async_get_etf_asset_allocation(tickers=[\"SPY\", \"QQQ\"], exchanges=[\"US\", \"US\"])\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>tickers</code> <code>list of str</code> the list of ETF tickers <code>exchanges</code> <code>list of str</code> the list of ETF exchanges <code>ETF Asset Allocation Data</code> <code>None</code> <code>0  {'Long_%'</code> <code>None</code> '0.39321', 'Short_%': '0', 'Net_Ass...  ...  {'Long_%': '0', 'Short_%': '0', 'Net_Assets_%'... <p>Returns:</p> Type Description <code>List[pd.DataFrame]</code> the ETF asset allocation data as a list of DataFrames."},{"location":"assets/etfs/#method-async_get_etf_world_regions","title":"Method: async_get_etf_world_regions","text":"<pre><code>def async_get_etf_world_regions(\n            tickers,\n            exchanges\n        ) -&gt; List[pd.DataFrame]\n</code></pre> <p>Fetch ETF world regions data</p> <p>Examples:</p> <pre><code>data = await dc.etfs.async_get_etf_world_regions(tickers=[\"SPY\", \"QQQ\"], exchanges=[\"US\", \"US\"])\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>tickers</code> <code>list of str</code> the list of ETF tickers <code>exchanges</code> <code>list of str</code> the list of ETF exchanges <p>Returns:</p> Type Description <code>List[pd.DataFrame]</code>"},{"location":"assets/etfs/#method-async_get_etf_sector_weights","title":"Method: async_get_etf_sector_weights","text":"<pre><code>def async_get_etf_sector_weights(\n            tickers,\n            exchanges\n        ) -&gt; List[pd.DataFrame]\n</code></pre> <p>Fetch ETF sector weights data</p> <p>Examples:</p> <pre><code>data = await dc.etfs.async_get_etf_sector_weights(tickers=[\"SPY\", \"QQQ\"], exchanges=[\"US\", \"US\"])\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>tickers</code> <code>list of str</code> the list of ETF tickers <code>exchanges</code> <code>list of str</code> the list of ETF exchanges <p>Returns:</p> Type Description <code>List[pd.DataFrame]</code> the ETF sector weights data as a list of DataFrames."},{"location":"assets/etfs/#method-async_get_etf_top_10_holdings","title":"Method: async_get_etf_top_10_holdings","text":"<pre><code>def async_get_etf_top_10_holdings(\n            tickers,\n            exchanges\n        ) -&gt; List[pd.DataFrame]\n</code></pre> <p>Fetch ETF top 10 holdings data</p> <p>Examples:</p> <pre><code>data = await dc.etfs.async_get_etf_top_10_holdings(tickers=[\"SPY\", \"QQQ\"], exchanges=[\"US\", \"US\"])\n\nETF Top 10 Holdings Data:\n[                            MSFT.US  ...                        LLY.US\nCode                           MSFT  ...                           LLY\nExchange                         US  ...                            US\nName          Microsoft Corporation  ...         Eli Lilly and Company\nSector                   Technology  ...                    Healthcare\nIndustry  Software - Infrastructure  ...  Drug Manufacturers - General\nCountry               United States  ...                 United States\nRegion                North America  ...                 North America\nAssets_%                     6.9392  ...                        1.3638\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>tickers</code> <code>list of str</code> the list of ETF tickers <code>exchanges</code> <code>list of str</code> the list of ETF exchanges <p>Returns:</p> Type Description <code>List[pd.DataFrame]</code> the ETF top 10 holdings data as a list of DataFrames."},{"location":"assets/etfs/#method-get_etf_ohlcv","title":"Method: get_etf_ohlcv","text":"<pre><code>def get_etf_ohlcv(\n            tickers,\n            exchanges,\n            granularity,\n            period_starts,\n            period_ends\n        ) -&gt; Dict\n</code></pre> <p>Fetch ETFs OHLCV data</p> <p>Examples:</p> <pre><code>data = await dc.etfs.get_etf_ohlcv(tickers=[\"SPY\", \"QQQ\"], exchanges=[\"US\", \"US\"], granularity='1d', period_starts=[\"2022-06-01\"], period_ends=[\"2024-03-25\"])\n\nETF OHLCV Data:\n[                   datetime    open    high  ...   close  adj_close     volume\n0   2023-01-03 00:00:00+00:00  384.37  386.43  ...  380.82   373.9561   74850727\n1   2023-01-04 00:00:00+00:00  383.18  385.88  ...  383.76   376.8432   85934094\n2   2023-01-05 00:00:00+00:00  381.72  381.84  ...  379.38   372.5421   76970461\n3   2023-01-06 00:00:00+00:00  382.61  389.25  ...  388.08   381.0853  104189602\n4   2023-01-09 00:00:00+00:00  390.37  393.70  ...  387.86   380.8693   73978070\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>tickers</code> <code>list of str</code> The list of ETF tickers. <code>exchanges</code> <code>list of str</code> The list of ETF exchanges. <code>granularity</code> <code>str</code> The granularity of the data (e.g., '1d', '1wk', '1mo'). <code>period_starts</code> <code>list of str</code> The start dates of the period. <code>period_ends</code> <code>list of str</code> The end dates of the period."},{"location":"assets/forex/","title":"Module Information","text":"<p>Description: Forex Assets class for QuantJourney Framework</p> <p>The Forex class provides methods for fetching forex data from various sources,  such as EOD Historical Data, OANDA, and Yahoo Finance.</p> <p>Author: jpolec</p> <p>Date: 27-02-2024 and 18-03-2024</p>"},{"location":"assets/forex/#class-forex","title":"Class: Forex()","text":""},{"location":"assets/forex/#method-async_get_intraday_forex_data","title":"Method: async_get_intraday_forex_data","text":"<pre><code>def async_get_intraday_forex_data(\n            pairs: List[str],\n            source: str,\n            interval: str = \"5m\",\n            to_utc: Optional[datetime] = None,\n            period_days: int = 120\n        ) -&gt; dict\n</code></pre> <p>Asynchronously fetches intraday data for the given forex pairs.</p> <p>Examples:</p> <pre><code>data = async_get_intraday_forex_data(pairs=['EURUSD', 'GBPUSD'], source='eod', interval='5m', period_days=120)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>pairs</code> <code>list of str</code> List of forex pairs. <code>source</code> <code>str</code> Data source for connectors (e.g., \"yf\", \"eod\", \"oanda\", etc.). <code>interval</code> <code>str</code> Interval for the intraday data ('1m', '5m', '15m', '30m', '1h'). <code>to_utc</code> <code>datetime</code> End date and time in UTC. Defaults to current UTC time. <code>period_days</code> <code>int</code> Number of days for the data period. <p>Returns:</p> Type Description <code>dict</code> Dictionary containing intraday data DataFrames for each pair."},{"location":"assets/forex/#method-get_forex_pricing_yfinance","title":"Method: get_forex_pricing_yfinance","text":"<pre><code>def get_forex_pricing_yfinance(\n            pairs: List[str],\n            start_date: str,\n            end_date: str\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Fetch pricing data for the given forex pairs between the start_date and end_date from YFinance. Parameters:</p> Name Type Description <code>pairs</code> <code>list of str</code> List of forex pairs. <code>start_date</code> <code>str</code> Start date for the pricing data. <code>end_date</code> <code>str</code> End date for the pricing data. <p>Returns:</p> Type Description <code>pd.DataFrame</code> DataFrame containing the pricing data for the given forex pairs."},{"location":"assets/futures/","title":"Module Information","text":"<p>Description: Futures Assets class for QuantJourney Framework</p> <p>The Futures module is a crucial part of the QuantJourney Framework, designed to handle and manage futures data for quantitative finance applications. This module leverages the power of multiple data connectors, including EOD Historical Data and OANDA, to provide comprehensive access to a wide array of futures data.</p> <p>// NOTE: Eod decomissioned Futures from 01.2024, will re-factor in future</p> <p>Author: jpolec</p> <p>Date: 27-02-2024 and 18-03-2024</p>"},{"location":"assets/futures/#class-futures","title":"Class: Futures()","text":""},{"location":"assets/futures/#method-async_get_futures_contracts_eod","title":"Method: async_get_futures_contracts_eod","text":"<pre><code>def async_get_futures_contracts_eod(\n            start_date: datetime,\n            end_date: datetime\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Fetch futures contracts data between the start_date and end_date from EOD.</p> <p>Examples:</p> <pre><code>futures_contracts = await dc.futures.async_get_futures_contracts_eod(start_date=datetime(2023, 1, 1), end_date=datetime(2023, 12, 31))\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>start_date</code> <code>datetime</code> The start date for fetching futures contracts. <code>end_date</code> <code>datetime</code> The end date for fetching futures contracts. <p>Returns:</p> Type Description <code>pd.DataFrame</code> DataFrame containing futures contracts data."},{"location":"assets/futures/#method-async_get_futures_pricing_eod","title":"Method: async_get_futures_pricing_eod","text":"<pre><code>def async_get_futures_pricing_eod(\n            contracts: List[str],\n            start_date: datetime,\n            end_date: datetime\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Fetch pricing data for the given futures contracts between the start_date and end_date from EOD.</p> <p>Examples:</p> <pre><code>futures_pricing = await dc.futures.async_get_futures_pricing_eod(contracts=[\"CL\", \"GC\"], start_date=datetime(2023, 1, 1), end_date=datetime(2023, 12, 31))\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>contracts</code> <code>List[str]</code> List of futures contract codes. <code>start_date</code> <code>datetime</code> The start date for fetching pricing data. <code>end_date</code> <code>datetime</code> The end date for fetching pricing data. <p>Returns:</p> Type Description <code>pd.DataFrame</code> DataFrame containing futures pricing data."},{"location":"assets/futures/#method-async_get_futures_expiration_dates_eod","title":"Method: async_get_futures_expiration_dates_eod","text":"<pre><code>def async_get_futures_expiration_dates_eod(\n            contracts: List[str]\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Fetch expiration dates for the given futures contracts from EOD.</p> <p>Examples:</p> <pre><code>expiration_dates = await dc.futures.async_get_futures_expiration_dates_eod(contracts=[\"CL\", \"GC\"])\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>contracts</code> <code>List[str]</code> List of futures contract codes. <p>Returns:</p> Type Description <code>pd.DataFrame</code> DataFrame containing futures expiration dates."},{"location":"assets/futures/#method-async_get_futures_contracts_oanda","title":"Method: async_get_futures_contracts_oanda","text":"<pre><code>def async_get_futures_contracts_oanda(\n            start_date: datetime,\n            end_date: datetime,\n            contract_prefix: str\n        ) -&gt; List[Dict]\n</code></pre> <p>Fetch futures contracts data between the start_date and end_date from Oanda for a specific contract prefix.</p> <p>Examples:</p> <pre><code>await dc.futures.async_get_futures_contracts_oanda(start_date=datetime(2023, 1, 1), end_date=datetime(2023, 12, 31), contract_prefix='BCO')\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>start_date</code> <code>datetime</code> The start date for fetching futures contracts. <code>end_date</code> <code>datetime</code> The end date for fetching futures contracts. <code>contract_prefix</code> <code>str</code> The prefix of the futures contract to fetch (e.g., 'BCO' for Brent Crude Oil). <p>Returns:</p> Type Description <code>List[Dict]</code> A list of dictionaries containing the futures contracts data."},{"location":"assets/futures/#method-async_get_futures_pricing_oanda","title":"Method: async_get_futures_pricing_oanda","text":"<pre><code>def async_get_futures_pricing_oanda(\n            contracts: List[str],\n            start_date: datetime,\n            end_date: datetime\n        ) -&gt; Optional[pd.DataFrame]\n</code></pre> <p>Fetch pricing data for the given futures contracts between the start_date and end_date from Oanda.</p> <p>Examples:</p> <pre><code>futures_pricing = await dc.futures.async_get_futures_pricing_oanda(contracts=[\"US30_USD\", \"AU200_AUD\"], start_date=datetime(2023, 1, 1), end_date=datetime(2023, 12, 31))\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>contracts</code> <code>List[str]</code> List of futures contract codes. <code>start_date</code> <code>datetime</code> The start date for fetching pricing data. <code>end_date</code> <code>datetime</code> The end date for fetching pricing data. <p>Returns:</p> Type Description <code>Optional[pd.DataFrame]</code> DataFrame containing futures pricing data, or None if an error occurs."},{"location":"assets/futures/#method-async_get_futures_expiration_dates_oanda","title":"Method: async_get_futures_expiration_dates_oanda","text":"<pre><code>def async_get_futures_expiration_dates_oanda(\n            contracts: List[str]\n        ) -&gt; Dict[str, datetime]\n</code></pre> <p>Fetch expiration dates for the given futures contracts from Oanda.</p> <p>Examples:</p> <pre><code>await dc.futures.async_get_futures_expiration_dates_oanda(contracts=[\"US30_USD\", \"AU200_AUD\"])\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>contracts</code> <code>List[str]</code> List of futures contract codes. <p>Returns:</p> Type Description <code>Dict[str, datetime]</code> A dictionary mapping contract codes to their expiration dates."},{"location":"assets/futures/#method-fetch_expiration_date","title":"Method: fetch_expiration_date","text":"<pre><code>def fetch_expiration_date(\n            contract\n        )\n</code></pre>"},{"location":"assets/indices/","title":"Module Information","text":"<p>Description: Indices Assets class for QuantJourney Framework</p> <p>The Indicies module is a crucial component of the QuantJourney Framework, specifically tailored for  handling and managing indices data for quantitative finance applications. This module leverages the power of multiple data connectors, including EOD Historical Data, Yahoo Finance, and OANDA, to provide comprehensive access  to a wide array of indices data,</p> <p>Author: jpolec</p> <p>Date: 18-03-2024</p>"},{"location":"assets/indices/#class-indices","title":"Class: Indices()","text":""},{"location":"assets/indices/#method-get_sp500","title":"Method: get_sp500","text":"<pre><code>def get_sp500() -&gt; List[str]\n</code></pre> <p>Get a list of S&amp;P 500 tickers from Wikipedia, with use of BeautifulSoup.</p> <p>Examples:</p> <pre><code>spy = dc.indices.get_sp500()\n\n['MMM', 'AOS', 'ABT', 'ABBV', 'ACN', 'ADBE', 'AMD', 'AES', 'AFL', 'A', 'APD',\n'ABNB', 'AKAM', 'ALB', 'ARE', 'ALGN', 'ALLE', 'LNT', 'ALL', 'GOOGL', 'GOOG',\n'MO', 'AMZN', 'AMCR', 'AEE', 'AAL', 'AEP', 'AXP', 'AIG', 'AMT', 'AWK', 'AMP',\n'AME', 'AMGN', 'APH', 'ADI', 'ANSS', 'AON', 'APA', 'AAPL', 'AMAT', 'APTV', 'ACGL',\n'ADM', 'ANET', 'AJG', 'AIZ', 'T', 'ATO', 'ADSK', 'ADP', 'AZO', 'AVB', 'AVY', 'AXON',\n'BKR', 'BALL', 'BAC', 'BK', 'BBWI', 'BAX', 'BDX', 'BRK.B', 'BBY', 'BIO', 'TECH',\n'BIIB', 'BLK', 'BX', 'BA', 'BKNG', 'BWA', 'BXP', 'BSX', 'BMY', 'AVGO', 'BR', 'BRO',\n'BF.B', 'BLDR', 'BG', 'CDNS', 'CZR', 'CPT', 'CPB', 'COF', 'CAH', 'KMX', 'CCL', 'CARR',\n'CTLT', 'CAT', 'CBOE', 'CBRE', 'CDW', 'CE', 'COR', 'CNC', 'CNP', 'CF', 'CHRW', 'CRL',\n\n\n</code></pre> <p>Returns:</p> Type Description <code>List[str]</code> A list of ticker symbols for companies in the S&amp;P 500 index."},{"location":"assets/indices/#method-get_sp500_yfinance","title":"Method: get_sp500_yfinance","text":"<pre><code>def get_sp500_yfinance() -&gt; pd.DataFrame\n</code></pre> <p>Get ticker symbol, sector, and sector abbreviation for all S&amp;P 500 stocks using yfinance.</p> <p>Examples:</p> <pre><code>spy = dc.indices.get_sp500_yfinance()\n\nTicker             Sector                     Full Name\n0       Open        Real Estate    Opendoor Technologies Inc.\n1       High                N/A  Simplify Enhanced Income ETF\n2        Low  Consumer Cyclical        Lowe's Companies, Inc.\n3      Close                N/A                           N/A\n4  Adj Close                N/A                           N/A\n5     Volume                N/A                           N/A\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> DataFrame containing each ticker's info."},{"location":"assets/indices/#method-get_sp500_df","title":"Method: get_sp500_df","text":"<pre><code>def get_sp500_df() -&gt; pd.DataFrame\n</code></pre> <p>Get S&amp;P 500 historical data from Yahoo Finance</p> <p>Examples:</p> <pre><code>spy = dc.indices.get_sp500_df()\n\n(                            MMM open   MMM high  ...   AMT close  AMT volume\ndate                                             ...\n2014-05-02 00:00:00-04:00  79.119009  79.230738  ...   70.025688     2788500\n2014-05-05 00:00:00-04:00  77.728029  78.795018  ...   71.152512     2769200\n2014-05-06 00:00:00-04:00  78.364858  78.448654  ...   70.186661     2792000\n2014-05-07 00:00:00-04:00  78.197292  78.906755  ...   71.112289     2843300\n2014-05-08 00:00:00-04:00  78.700071  79.392774  ...   71.031799     1706100\n...                              ...        ...  ...         ...         ...\n2024-04-26 00:00:00-04:00  91.500000  92.190002  ...  171.690002     1701400\n2024-04-29 00:00:00-04:00  91.559998  92.620003  ...  174.990005     2104800\n2024-04-30 00:00:00-04:00  95.730003  97.839996  ...  171.559998     3710600\n2024-05-01 00:00:00-04:00  98.099998  99.699997  ...  176.839996     3877100\n2024-05-02 00:00:00-04:00  97.959999  98.339996  ...  176.880005\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> DataFrame containing the historical data for the S&amp;P 500"},{"location":"assets/indices/#method-get_sp500_sectors","title":"Method: get_sp500_sectors","text":"<pre><code>def get_sp500_sectors() -&gt; pd.DataFrame\n</code></pre> <p>Get ticker symbol, sector, and sector abbreviation for all 505 SPX stocks.</p> <p>Examples:</p> <pre><code>spy = dc.indices.get_sp500_sectors()\n\nSPX Ticker                                        Sector\n0          MMM                      Industrial Conglomerates\n1          AOS                             Building Products\n2          ABT                         Health Care Equipment\n3         ABBV                                 Biotechnology\n4          ACN                IT Consulting &amp; Other Services\n..         ...                                           ...\n498        XYL  Industrial Machinery &amp; Supplies &amp; Components\n499        YUM                                   Restaurants\n500       ZBRA            Electronic Equipment &amp; Instruments\n501        ZBH                         Health Care Equipment\n502        ZTS                               Pharmaceuticals\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> DataFrame containing each ticker's info."},{"location":"assets/indices/#method-get_osebx_instruments","title":"Method: get_osebx_instruments","text":"<pre><code>def get_osebx_instruments(\n            parameter=None\n        ) -&gt; List[str]\n</code></pre> <p>Get a list of OSEBX tickers from live.euronext.com.</p> <p>FR0003500008-XPAR - PARIS/CAC40 QS0010989117-XPAR - PARIS/CAC60</p> <p>Examples:</p> <pre><code>osebx = dc.indices.get_osebx_instruments(parameter=\"NO0010865256-XOSL\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>parameter</code> <code>str</code> The parameter to use for the request. <p>Returns:</p> Type Description <code>List[str]</code> A list of ticker symbols for companies in the OSEBX index."},{"location":"assets/indices/#method-get_sec_tickers","title":"Method: get_sec_tickers","text":"<pre><code>def get_sec_tickers() -&gt; pd.DataFrame\n</code></pre> <p>Get a list of all company tickers from the SEC.</p> <p>Examples:</p> <pre><code>sec = await dc.indices.get_sec_tickers()\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> cik_str, ticker, title"},{"location":"assets/indices/#method-fetch_dow_jones_index","title":"Method: fetch_dow_jones_index","text":"<pre><code>def fetch_dow_jones_index() -&gt; pd.DataFrame\n</code></pre> <p>Get the Dow Jones index data from Wikipedia.</p> <p>Examples:</p> <pre><code>dji = await dc.indices.fetch_dow_jones_index()\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the Dow Jones index data."},{"location":"assets/indices/#method-fetch_nasdaq_100_index","title":"Method: fetch_nasdaq_100_index","text":"<pre><code>def fetch_nasdaq_100_index() -&gt; pd.DataFrame\n</code></pre> <p>Get the Nasdaq 100 index data from Wikipedia.</p> <p>Examples:</p> <pre><code>nasdaq = await dc.indices.fetch_nasdaq_100_index()\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the Nasdaq 100 index data."},{"location":"assets/indices/#method-fetch_ftse_100_index","title":"Method: fetch_ftse_100_index","text":"<pre><code>def fetch_ftse_100_index() -&gt; pd.DataFrame\n</code></pre> <p>Get the FTSE 100 index data from Wikipedia.</p> <p>Examples:</p> <pre><code>ftse = await dc.indices.fetch_ftse_100_index()\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the FTSE 100 index data."},{"location":"assets/indices/#method-fetch_sp500_index","title":"Method: fetch_sp500_index","text":"<pre><code>def fetch_sp500_index() -&gt; pd.DataFrame\n</code></pre> <p>Get the S&amp;P 500 index data from Wikipedia.</p> <p>Examples:</p> <pre><code>spy = await dc.indices.fetch_sp500_index()\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the S&amp;P 500 index data."},{"location":"assets/indices/#method-fetch_sse_50_index","title":"Method: fetch_sse_50_index","text":"<pre><code>def fetch_sse_50_index() -&gt; pd.DataFrame\n</code></pre> <p>Get the SSE 50 index data from Wikipedia.</p> <p>Examples:</p> <pre><code>sse = await dc.indices.fetch_sse_50_index()\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the SSE 50 index data."},{"location":"assets/indices/#method-fetch_nikkei_225_index","title":"Method: fetch_nikkei_225_index","text":"<pre><code>def fetch_nikkei_225_index() -&gt; pd.DataFrame\n</code></pre> <p>Get the Nikkei 225 index data from Wikipedia.</p> <p>Examples:</p> <pre><code>nikkei = await dc.indices.fetch_nikkei_225_index()\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the Nikkei 225 index data."},{"location":"assets/indices/#method-fetch_hang_seng_index","title":"Method: fetch_hang_seng_index","text":"<pre><code>def fetch_hang_seng_index() -&gt; pd.DataFrame\n</code></pre> <p>Get the Hang Seng index data from Wikipedia.</p> <p>Examples:</p> <pre><code>hang_seng = await dc.indices.fetch_hang_seng_index()\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the Hang Seng index data."},{"location":"assets/indices/#method-fetch_cac_40_index","title":"Method: fetch_cac_40_index","text":"<pre><code>def fetch_cac_40_index() -&gt; pd.DataFrame\n</code></pre> <p>Get the CAC 40 index data from Wikipedia.</p> <p>Examples:</p> <pre><code>cac_40 = await dc.indices.fetch_cac_40_index()\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the CAC 40 index data."},{"location":"assets/indices/#method-fetch_dax_index","title":"Method: fetch_dax_index","text":"<pre><code>def fetch_dax_index() -&gt; pd.DataFrame\n</code></pre> <p>Get the DAX index data from Wikipedia.</p> <p>Examples:</p> <pre><code>dax = await dc.indices.fetch_dax_index()\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the DAX index data."},{"location":"assets/indices/#method-fetch_wig20_index","title":"Method: fetch_wig20_index","text":"<pre><code>def fetch_wig20_index() -&gt; pd.DataFrame\n</code></pre> <p>Get the WIG 20 index data from Wikipedia.</p> <p>Examples:</p> <pre><code>wig20 = await dc.indices.fetch_wig20_index()\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the WIG 20 index data."},{"location":"assets/indices/#method-async_get_index_generals","title":"Method: async_get_index_generals","text":"<pre><code>def async_get_index_generals(\n            ticker: str,\n            exchange: str\n        ) -&gt; Dict[str, Union[str, float, int]]\n</code></pre> <p>Get the general information for an index with EOD</p> <p>Examples:</p> <pre><code>index_generals = await dc.indices.async_get_index_generals(ticker='IXIC', exchange=\"INDX\")\n\nIXIC Index Generals:\n{'Code': 'IXIC', 'Type': 'INDEX', 'Name': 'NASDAQ Composite', 'Exchange': 'INDX', 'CurrencyCode': 'USD', 'CurrencyName': 'US Dollar', 'CurrencySymbol': '$', 'CountryName': 'USA', 'CountryISO': 'US', 'OpenFigi': None}\nRUT Index Generals:\n{'Code': 'RUT', 'Type': 'INDEX', 'Name': 'Russell 2000', 'Exchange': 'INDX', 'CurrencyCode': 'USD', 'CurrencyName': 'US Dollar', 'CurrencySymbol': '$', 'CountryName': 'USA', 'CountryISO': 'US', 'OpenFigi': None}\nFTSE Index Generals:\n{'Code': 'FTSE', 'Type': 'INDEX', 'Name': 'FTSE 100 Index (UK)', 'Exchange': 'INDX', 'CurrencyCode': 'GBP', 'CurrencyName': 'British Pound', 'CurrencySymbol': '\u00a3', 'CountryName': 'UK', 'CountryISO': 'GB', 'OpenFigi': None}\nGDAXI Index Generals:\n{'Code': 'GDAXI', 'Type': 'INDEX', 'Name': 'DAX Index', 'Exchange': 'INDX', 'CurrencyCode': 'EUR', 'CurrencyName': 'Euro', 'CurrencySymbol': '\u20ac', 'CountryName': 'Germany', 'CountryISO': 'DE', 'OpenFigi': None}\nN225 Index Generals:\n{'Code': 'N225', 'Type': 'INDEX', 'Name': 'Nikkei 225', 'Exchange': 'INDX', 'CurrencyCode': 'JPY', 'CurrencyName': 'Japanese Yen', 'CurrencySymbol': '\u00a5', 'CountryName': 'Japan', 'CountryISO': 'JP', 'OpenFigi': None}\n\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The ticker symbol of the index <code>exchange</code> <code>str</code> The exchange of the index <p>Returns:</p> Type Description <code>Dict[str, Union[str, float, int]]</code> A dictionary containing the general information for the index."},{"location":"assets/indices/#method-get_index_components","title":"Method: get_index_components","text":"<pre><code>def get_index_components(\n            ticker: str,\n            exchange: str =\"INDX\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get the components of an index with EOD Supported indices: https://eodhistoricaldata.com/financial-apis/list-supported-indices/</p> <p>Examples:</p> <pre><code>components = await dc.indices.get_index_components(ticker='IXIC', exchange=\"INDX\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The ticker symbol of the index. <code>exchange</code> <code>str</code> The exchange of the index. <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the components of the index."},{"location":"assets/indices/#method-get_index_historical_components","title":"Method: get_index_historical_components","text":"<pre><code>def get_index_historical_components(\n            ticker: str,\n            exchange: str =\"INDX\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get the historical components of an index with EOD</p> <p>Examples:</p> <pre><code>historical_components = await dc.indices.get_index_historical_components(ticker='IXIC', exchange=\"INDX\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The ticker symbol of the index. <code>exchange</code> <code>str</code> The exchange of the index. <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the historical components of the index."},{"location":"assets/macro/","title":"Module Information","text":"<p>Description: Macro Assets class for QuantJourney Framework</p> <p>The Macro class provides methods for fetching macroeconomic data from various sources, such as EOD Historical Data, FRED, OECD, and Quandl. It supports the retrieval of macroeconomic</p> <p>@gmail.com</p> <p>Author: jpolec</p> <p>Date: 18-03-2024</p>"},{"location":"assets/macro/#class-macro","title":"Class: Macro()","text":""},{"location":"assets/macro/#method-get_macro_releases","title":"Method: get_macro_releases","text":"<pre><code>def get_macro_releases(\n            from_date: str = '2022-01-01',\n            to_date: str = '2023-12-31',\n            countryiso: str = None,\n            limit: int = 1000,\n            comparison: str = None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get Macro Events Calendar (per country, type, etc.)</p> <p>Examples:</p> <pre><code>macro.get_macro_releases(from_date='2022-01-01', to_date='2023-12-31', countryiso='USA', limit=1000, comparison='mom')\n\nMacro Releases:\ntype comparison period country  ...  previous  estimate  change  change_percentage\ndate                                                                      ...\n2023-12-12 13:30:00          ECB McCaul Speech       None   None      EU  ...       NaN       NaN     NaN                NaN\n2023-12-12 13:30:00                    CPI s.a       None    Nov      US  ...   307.619       NaN   0.298              0.097\n2023-12-12 13:30:00        Core Inflation Rate        mom    Nov      US  ...     0.200       0.3   0.100             50.000\n2023-12-12 13:30:00        Core Inflation Rate        yoy    Nov      US  ...     4.000       4.0     NaN                NaN\n2023-12-12 13:30:00             Inflation Rate        yoy    Nov      US  ...     3.200       3.1  -0.100             -3.125\n...                                        ...        ...    ...     ...  ...       ...       ...     ...                ...\n2023-12-31 00:00:00             New Year\u2019s Eve       None   None      JP  ...       NaN       NaN     NaN                NaN\n2023-12-31 00:00:00             New Year\u2019s Eve       None   None      EU  ...       NaN       NaN     NaN                NaN\n2023-12-31 01:30:00      NBS Manufacturing PMI       None    Dec      CN  ...    49.400      49.5  -0.400             -0.810\n2023-12-31 01:30:00            NBS General PMI       None    Dec      CN  ...    50.400       NaN  -0.100             -0.198\n2023-12-31 01:30:00  NBS Non Manufacturing PMI       None    Dec      CN  ...    50.200       NaN   0.200              0.398\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>from_date</code> <code>str</code> The start date of the period for fetching data (default '2022-01-01') <code>to_date</code> <code>str</code> The end date of the period for fetching data (default '2023-12-31') <code>countryiso</code> <code>str</code> The country ISO code (default None) <code>limit</code> <code>int</code> The maximum number of events to fetch (default 1000) <code>comparison</code> <code>str</code> The comparison value - possible values: mom, qoq, yoy (default None) <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the macroeconomic events"},{"location":"assets/macro/#method-get_macro_indicators","title":"Method: get_macro_indicators","text":"<pre><code>def get_macro_indicators(\n            countryiso=\"USA\",\n            indicator_code=\"gdp_current_usd\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get Macro Indicators supported indicators: https://eodhistoricaldata.com/financial-apis/macroeconomics-data-and-macro-indicators-api/</p> <p>List of Available Macroeconomics Indicators real_interest_rate - Real interest rate (%). population_total - Population, total. population_growth_annual - Population growth (annual %). inflation_consumer_prices_annual - Inflation, consumer prices (annual %). consumer_price_index - Consumer Price Index (2010 = 100). gdp_current_usd - GDP (current US$). gdp_per_capita_usd - GDP per capita (current US$). gdp_growth_annual - GDP growth (annual %). debt_percent_gdp - Debt in percent of GDP (annual %). net_trades_goods_services - Net trades in goods and services (current US$). inflation_gdp_deflator_annual - Inflation, GDP deflator (annual %). agriculture_value_added_percent_gdp - Agriculture, value added (% of GDP). industry_value_added_percent_gdp - Industry, value added (% of GDP). services_value_added_percent_gdp - Services, etc., value added (% of GDP). exports_of_goods_services_percent_gdp - Exports of goods and services (% of GDP). imports_of_goods_services_percent_gdp - Imports of goods and services (% of GDP). gross_capital_formation_percent_gdp - Gross capital formation (% of GDP). net_migration - Net migration (absolute value). gni_usd - GNI, Atlas method (current US$). gni_per_capita_usd - GNI per capita, Atlas method (current US$). gni_ppp_usd - GNI, PPP (current international $). gni_per_capita_ppp_usd - GNI per capita, PPP (current international $). income_share_lowest_twenty - Income share held by lowest 20% (in %). life_expectancy - Life expectancy at birth, total (years). fertility_rate - Fertility rate, total (births per woman). prevalence_hiv_total - Prevalence of HIV, total (% of population ages 15-49). co2_emissions_tons_per_capita - CO2 emissions (metric tons per capita). surface_area_km - Surface area (sq. km). poverty_poverty_lines_percent_population - Poverty headcount ratio at national poverty lines (% of population). revenue_excluding_grants_percent_gdp - Revenue, excluding grants (% of GDP). cash_surplus_deficit_percent_gdp - Cash surplus/deficit (% of GDP). startup_procedures_register - Start-up procedures to register a business (number). market_cap_domestic_companies_percent_gdp - Market capitalization of listed domestic companies (% of GDP). mobile_subscriptions_per_hundred - Mobile cellular subscriptions (per 100 people). internet_users_per_hundred - Internet users (per 100 people). high_technology_exports_percent_total - High-technology exports (% of manufactured exports). merchandise_trade_percent_gdp - Merchandise trade (% of GDP). total_debt_service_percent_gni - Total debt service (% of GNI). unemployment_total_percent - Unemployment total (% of labor force).</p> <p>Examples:</p> <pre><code>macro.get_macro_indicators(countryiso=\"USA\", indicator_code=\"gdp_current_usd\")\nmacro.get_macro_indicators(countryiso=\"USA\", indicator_code=\"unemployment_rate\")\n\nCountryCode    CountryName          Indicator  Period           Value\nDate\n1960-12-31         USA  United States  GDP (current US$)  Annual    543300000000\n1961-12-31         USA  United States  GDP (current US$)  Annual    563300000000\n1962-12-31         USA  United States  GDP (current US$)  Annual    605100000000\n1963-12-31         USA  United States  GDP (current US$)  Annual    638600000000\n1964-12-31         USA  United States  GDP (current US$)  Annual    685800000000\n...                ...            ...                ...     ...             ...\n2019-12-31         USA  United States  GDP (current US$)  Annual  21380976119000\n2020-12-31         USA  United States  GDP (current US$)  Annual  21060473613000\n2021-12-31         USA  United States  GDP (current US$)  Annual  23315080560000\n2022-12-31         USA  United States  GDP (current US$)  Annual  25439700000000\n2023-12-31         USA  United States  GDP (current US$)  Annual               0\n\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>countryiso</code> <code>str</code> The country ISO code (default \"USA\") <code>indicator_code</code> <code>str</code> The indicator code (default \"gdp_current_usd\") <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the macroeconomic indicators"},{"location":"assets/macro/#method-get_macro_borrow_rates","title":"Method: get_macro_borrow_rates","text":"<pre><code>def get_macro_borrow_rates(\n            ticker=\"LIBORUSD\",\n            duration=\"1M\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get Borrowing Rates</p> <p>Examples:</p> <pre><code>macro.get_macro_borrow_rates(ticker=\"LIBORUSD\", duration=\"1M\")\nmacro.get_macro_borrow_rates(ticker=\"LIBORUSD\", duration=\"3M\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The ticker symbol (default \"LIBORUSD\") <code>duration</code> <code>str</code> The duration of the borrowing rate (default \"1M\") <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the borrowing rates"},{"location":"assets/macro/#method-search_fred_for_series","title":"Method: search_fred_for_series","text":"<pre><code>def search_fred_for_series(\n            search_string=\"GDP\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Search FRED for series</p> <p>Examples:</p> <pre><code>macro.search_fred_for_series(search_string=\"GDP\")\nmacro.search_fred_for_series(search_string=\"unemployment\")\n\nFRED Series Search:\nseries id                   id  ... popularity                                              notes\n0            GFDEGDQ188S          GFDEGDQ188S  ...         84  Federal Debt: Total Public Debt as Percent of ...\n1            FYFSGDA188S          FYFSGDA188S  ...         75  Federal Surplus or Deficit [-] as Percent of G...\n2             FYFSDFYGDP           FYFSDFYGDP  ...         42                                               None\n3            GFDGDPA188S          GFDGDPA188S  ...         67  Gross Federal Debt as Percent of Gross Domesti...\n4                    GDP                  GDP  ...         93  BEA Account Code: A191RC  Gross domestic produ...\n..                   ...                  ...  ...        ...                                                ...\n995  OECDLORSGPORIXOBSAM  OECDLORSGPORIXOBSAM  ...          1  OECD descriptor ID: LORSGPOR OECD unit ID: IXO...\n996      NAEXKP02GBA661S      NAEXKP02GBA661S  ...          0  OECD Descriptor ID: NAEXKP02 OECD unit ID: IDX...\n997        DEBTTLESA188A        DEBTTLESA188A  ...          9  Debt is the entire stock of direct government ...\n998        DEBTTLCHA188A        DEBTTLCHA188A  ...          9  Debt is the entire stock of direct government ...\n999            NGMP17140            NGMP17140  ...         24  The All industry total includes all Private in...\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>search_string</code> <code>str</code> The search string (default \"GDP\") <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the search results"},{"location":"assets/macro/#method-get_fred_data_series_list_by_category","title":"Method: get_fred_data_series_list_by_category","text":"<pre><code>def get_fred_data_series_list_by_category(\n            category_id=101,\n            limit=1000,\n            order_by=\"popularity\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get FRED Data Series List by Category</p> <p>Examples:</p> <pre><code>macro.get_fred_data_series_list_by_category(category_id=101, limit=1000, order_by=\"popularity\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>category_id</code> <code>int</code> The category ID (default 101) <code>limit</code> <code>int</code> The maximum number of series to fetch (default 1000) <code>order_by</code> <code>str</code> The order of the series (default \"popularity\") <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the data series list"},{"location":"assets/macro/#method-get_fred_data_series_list_by_release","title":"Method: get_fred_data_series_list_by_release","text":"<pre><code>def get_fred_data_series_list_by_release(\n            release_id=175,\n            limit=1000,\n            order_by=\"popularity\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get FRED Data Series List by Release</p> <p>Examples:</p> <pre><code>macro.get_fred_data_series_list_by_release(release_id=175, limit=1000, order_by=\"popularity\")\n\nFRED Series by ID:\n2014-05-02    1881.14\n2014-05-05    1884.66\n2014-05-06    1867.72\n2014-05-07    1878.21\n2014-05-08    1875.63\n...\n2024-04-25    5048.42\n2024-04-26    5099.96\n2024-04-29    5116.17\n2024-04-30    5035.69\n2024-05-01    5018.39\nLength: 2609, dtype: float64\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>release_id</code> <code>int</code> The release ID (default 175) <code>limit</code> <code>int</code> The maximum number of series to fetch (default 1000) <code>order_by</code> <code>str</code> The order of the series (default \"popularity\") <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the data series list"},{"location":"assets/macro/#method-get_fred_data_series_by_id","title":"Method: get_fred_data_series_by_id","text":"<pre><code>def get_fred_data_series_by_id(\n            search_id=\"SP500\",\n            start=\"1950-01-01\",\n            end=datetime.today(\n        )\n</code></pre>"},{"location":"assets/macro/#method-get_fred_data_series_info","title":"Method: get_fred_data_series_info","text":"<pre><code>def get_fred_data_series_info(\n            search_id=\"SP500\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get FRED Data Series Info</p> <p>Examples:</p> <pre><code>macro.get_fred_data_series_info(search_id=\"SP500\")\n\nRED Series Info:\nid                                                                       SP500\nrealtime_start                                                      2024-05-02\nrealtime_end                                                        2024-05-02\ntitle                                                                  S&amp;P 500\nobservation_start                                                   2014-05-02\nobservation_end                                                     2024-05-01\nfrequency                                                         Daily, Close\nfrequency_short                                                              D\nunits                                                                    Index\nunits_short                                                              Index\nseasonal_adjustment                                    Not Seasonally Adjusted\nseasonal_adjustment_short                                                  NSA\nlast_updated                                            2024-05-01 19:10:58-05\npopularity                                                                  83\n\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>search_id</code> <code>str</code> The search ID (default \"SP500\") <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the data series info"},{"location":"assets/macro/#method-get_all_fred_data_tags","title":"Method: get_all_fred_data_tags","text":"<pre><code>def get_all_fred_data_tags() -&gt; pd.DataFrame\n</code></pre> <p>Get All FRED Data Tags</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the data tags"},{"location":"assets/macro/#method-get_all_fred_data_sources","title":"Method: get_all_fred_data_sources","text":"<pre><code>def get_all_fred_data_sources() -&gt; pd.DataFrame\n</code></pre> <p>Get All FRED Data Sources</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the data sources"},{"location":"assets/macro/#method-get_all_fred_series_by_tags","title":"Method: get_all_fred_series_by_tags","text":"<pre><code>def get_all_fred_series_by_tags(\n            tags=[\"usa\"]\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get All FRED Series by Tags Parameters:</p> Name Type Description <code>tags</code> <code>list</code> List of tags (default [\"usa\"]) <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the data series by tags"},{"location":"assets/macro/#method-get_all_fred_releases","title":"Method: get_all_fred_releases","text":"<pre><code>def get_all_fred_releases(\n            realtime_start=datetime.today(\n        )\n</code></pre>"},{"location":"assets/macro/#method-get_oecd_countries","title":"Method: get_oecd_countries","text":"<pre><code>def get_oecd_countries() -&gt; pd.DataFrame\n</code></pre> <p>Get OECD Countries</p> <p>Examples:</p> <pre><code>macro.get_oecd_countries()\n\nRequesting URL http://stats.oecd.org/SDMX-JSON/dataflow/MEI/all\nStructure: LOCATION, SUBJECT, MEASURE, FREQUENCY, TIME_PERIOD\nLOCATION values:\n{'id': 'AUS', 'name': 'Australia'}\n{'id': 'AUT', 'name': 'Austria'}\n{'id': 'BEL', 'name': 'Belgium'}\n{'id': 'CAN', 'name': 'Canada'}\n{'id': 'CHL', 'name': 'Chile'}\n{'id': 'COL', 'name': 'Colombia'}\n{'id': 'CRI', 'name': 'Costa Rica'}\n{'id': 'CZE', 'name': 'Czechia'}\n{'id': 'DNK', 'name': 'Denmark'}\n{'id': 'EST', 'name': 'Estonia'}\n{'id': 'FIN', 'name': 'Finland'}\n{'id': 'FRA', 'name': 'France'}\n{'id': 'DEU', 'name': 'Germany'}\n{'id': 'GRC', 'name': 'Greece'}\n{'id': 'HUN', 'name': 'Hungary'}\n{'id': 'ISL', 'name': 'Iceland'}\n{'id': 'IRL', 'name': 'Ireland'}\n{'id': 'ISR', 'name': 'Israel'}\n{'id': 'ITA', 'name': 'Italy'}\n{'id': 'JPN', 'name': 'Japan'}\n{'id': 'KOR', 'name': 'Korea'}\n{'id': 'LVA', 'name': 'Latvia'}\n{'id': 'LTU', 'name': 'Lithuania'}\n{'id': 'LUX', 'name': 'Luxembourg'}\n{'id': 'MEX', 'name': 'Mexico'}\n{'id': 'NLD', 'name': 'Netherlands'}\n{'id': 'NZL', 'name': 'New Zealand'}\n{'id': 'NOR', 'name': 'Norway'}\n{'id': 'POL', 'name': 'Poland'}\n{'id': 'PRT', 'name': 'Portugal'}\n{'id': 'SVK', 'name': 'Slovakia'}\n{'id': 'SVN', 'name': 'Slovenia'}\n{'id': 'ESP', 'name': 'Spain'}\n{'id': 'SWE', 'name': 'Sweden'}\n{'id': 'CHE', 'name': 'Switzerland'}\n{'id': 'TUR', 'name': 'Turkey'}\n{'id': 'GBR', 'name': 'United Kingdom'}\n{'id': 'USA', 'name': 'United States'}\n\n</code></pre> <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the OECD countries"},{"location":"assets/macro/#method-get_oecd_data","title":"Method: get_oecd_data","text":"<pre><code>def get_oecd_data(\n            dataset=\"QNA\",\n            country=\"USA\",\n            frequency=\"Q\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get OECD data for a given dataset, country, and frequency, showing all leading indicators. Parameters:</p> Name Type Description <code>dataset</code> <code>str</code> The dataset (default \"QNA\") <code>country</code> <code>str</code> The country (default \"USA\") <code>frequency</code> <code>str</code> The frequency (default \"Q\") <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the OECD data"},{"location":"assets/macro/#method-get_quandl_data","title":"Method: get_quandl_data","text":"<pre><code>def get_quandl_data(\n            dataset_code=\"WIKI/AAPL\",\n            start_date=None,\n            end_date=None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get Quandl Data</p> <p>Examples:</p> <pre><code>macro.get_quandl_data(dataset_code=\"WIKI/AAPL\", start_date=\"2017-01-01\", end_date=\"2017-12-31\")\n\nMetadata for WIKI/AAPL:\n[{'dataset': {'id': 9775409, 'dataset_code': 'AAPL', 'database_code': 'WIKI', 'name': 'Apple Inc (AAPL) Prices,\nDividends, Splits and Trading Volume', 'description': 'End of day open, high, low, close and volume, dividends and splits,\nand split/dividend adjusted open, high, low close and volume for Apple Inc. (AAPL). Ex-Dividend is non-zero on ex-dividend\ndates. Split Ratio is 1 on non-split dates. Adjusted prices are calculated per CRSP\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>dataset_code</code> <code>str</code> The dataset code (default \"WIKI/AAPL\") <code>start_date</code> <code>str</code> The start date (default None) <code>end_date</code> <code>str</code> The end date (default None) <p>Returns:</p> Type Description <code>pd.DataFrame</code> A DataFrame containing the Quandl data"},{"location":"assets/reits/","title":"Module Information","text":"<p>Description: REITs Assets class for QuantJourney Framework</p> <p>The REITs class provides methods for fetching REIT data from various sources, such as EOD Historical Data, Yahoo Finance, and OANDA.</p> <p>Author: jpolec</p> <p>Date: 27-02-2024 and 18-03-2024</p>"},{"location":"assets/reits/#class-reits","title":"Class: REITs()","text":""},{"location":"assets/reits/#method-get_reit_data","title":"Method: get_reit_data","text":"<pre><code>def get_reit_data(\n            symbols,\n            start_date,\n            end_date\n        )\n</code></pre> <p>Fetch REIT data for the given symbols between the start_date and end_date.</p>"},{"location":"blog/","title":"Index","text":"<p>Test</p>"},{"location":"connectors/ccxt_connector/","title":"Module Information","text":"<p>Description: CCXT Connector of QuantJourney Framework</p> <p>This module provides a class for connecting to cryptocurrency exchanges using the CCXT library. It allows for the retrieval of market data, account information, and the placement of orders. And is a base class for exchange-specific classes such as Binance, Bitfinex, Coinbase, etc.</p> <p>Author: jpolec</p> <p>Date: 18-03-2024</p>"},{"location":"connectors/ccxt_connector/#class-ccxtconnector","title":"Class: CcxtConnector()","text":""},{"location":"connectors/ccxt_connector/#method-get_exchange_instance","title":"Method: get_exchange_instance","text":"<pre><code>def get_exchange_instance(\n            exchange: str\n        ) -&gt; ccxt.Exchange\n</code></pre> <p>Get the exchange instance for a given exchange.</p> <p>Examples:</p> <pre><code>binance = ccxt_connector.get_exchange_instance('binance')\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> The exchange name (e.g., 'binance') <p>Returns:</p> Type Description <code>ccxt.Exchange</code> The exchange instance."},{"location":"connectors/ccxt_connector/#method-get_exchange_symbols","title":"Method: get_exchange_symbols","text":"<pre><code>def get_exchange_symbols(\n            exchange: str\n        ) -&gt; List[str]\n</code></pre> <p>Get all available symbols for an exchange.</p> <p>Examples:</p> <pre><code>Exchange Symbols for binance: ['ETH/BTC', 'LTC/BTC', 'BNB/BTC', 'NEO/BTC', 'QTUM/ETH',\n'EOS/ETH', 'SNT/ETH', 'BNT/ETH', 'BCC/BTC', 'GAS/BTC', 'BNB/ETH', 'BTC/USDT', 'ETH/USDT',\n'HSR/BTC', 'OAX/ETH', 'DNT/ETH', 'MCO/ETH', 'ICN/ETH', 'MCO/BTC', 'WTC/BTC', 'WTC/ETH',\n'LRC/BTC', 'LRC/ETH', 'QTUM/BTC', 'YOYOW/BTC', 'OMG/BTC', 'OMG/ETH', 'ZRX/BTC', 'ZRX/ETH',\n'STRAT/BTC', 'STRAT/ETH', 'SNGLS/BTC', 'SNGLS/ETH', 'BQX/BTC', 'BQX/ETH', 'KNC/BTC', 'KNC/ETH',\n'FUN/BTC', 'FUN/ETH', 'SNM/BTC', 'SNM/ETH', 'NEO/ETH', 'IOTA/BTC', 'IOTA/ETH', 'LINK/BTC',\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>None</code> The name of the exchange. <p>Returns:</p> Type Description <code>List[str]</code> A list of all available symbols."},{"location":"connectors/ccxt_connector/#method-get_latest_price","title":"Method: get_latest_price","text":"<pre><code>def get_latest_price(\n            exchange: str,\n            symbol: str\n        ) -&gt; float\n</code></pre> <p>Get the latest price of a given symbol on a given exchange.</p> <p>Examples:</p> <pre><code>btc = dc.crypto.get_latest_price('binance', 'BTC/USDT')\nbtc = dc.crypto.get_latest_price('coinbase', 'BTC/USDT')\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> the name of the exchange (e.g., 'binance') <code>symbol</code> <code>str</code> the symbol of the asset (e.g., 'BTC/USDT') <p>Returns:</p> Type Description <code>float</code> the latest price of the asset."},{"location":"connectors/ccxt_connector/#method-place_market_order","title":"Method: place_market_order","text":"<pre><code>def place_market_order(\n            exchange: str,\n            symbol: str,\n            side: str,\n            amount: float\n        ) -&gt; ccxt.Order\n</code></pre> <p>Place a market order on a given exchange.</p> <p>Examples:</p> <pre><code>binance_order = ccxt_connector.place_market_order('binance', 'BTC/USDT', 'buy', 0.1)\nbinance_order = ccxt_connector.place_market_order('binance', 'BTC/USDT', 'sell', 0.1)\ncoinbase_order = ccxt_connector.place_market_order('coinbase', 'BTC/USD', 'buy', 0.1)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> the exchange name (e.g., 'binance') <code>symbol</code> <code>str</code> the symbol of the asset (e.g., 'BTC/USDT') <code>side</code> <code>str</code> the side of the order ('buy' or 'sell') <code>amount</code> <code>float</code> the amount of the asset to buy or sell <p>Returns:</p> Type Description <code>ccxt.Order</code> the order object."},{"location":"connectors/ccxt_connector/#method-get_account_balance","title":"Method: get_account_balance","text":"<pre><code>def get_account_balance(\n            exchange: str\n        ) -&gt; Dict[str, float]\n</code></pre> <p>Get the account balance for a given exchange.</p> <p>Examples:</p> <pre><code>binance_balance = ccxt_connector.get_account_balance('binance')\ncoinbase_balance = ccxt_connector.get_account_balance('coinbase')\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> the exchange name (e.g., 'binance') <p>Returns:</p> Type Description <code>Dict[str, float]</code> the account balance."},{"location":"connectors/ccxt_connector/#method-get_order_book","title":"Method: get_order_book","text":"<pre><code>def get_order_book(\n            exchange,\n            symbol,\n            limit=None\n        ) -&gt; Dict\n</code></pre> <p>Get the order book for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>order_book = dc.crypto.get_order_book('binance', 'BTC/USDT')\norder_book = dc.crypto.get_order_book('binance', 'BTC/USDT', limit=5)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> The name of the exchange (e.g., 'binance') <code>symbol</code> <code>str</code> The trading symbol (e.g., 'BTC/USDT') <code>limit</code> <code>int</code> The maximum number of order book levels to retrieve (default: None) <p>Returns:</p> Type Description <code>Dict</code> The order book."},{"location":"connectors/ccxt_connector/#method-get_market_structure","title":"Method: get_market_structure","text":"<pre><code>def get_market_structure(\n            exchange: str,\n            ticker: str\n        ) -&gt; Dict\n</code></pre> <p>Get the market structure for a given ticker.</p> <p>Examples:</p> <pre><code>market = dc.crypto.get_market_structure('binance', 'BTC/USDT')\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>ccxt.Exchange</code> The ccxt exchange instance <code>ticker</code> <code>str</code> The symbol of the asset (e.g., 'BTC/USDT') <p>Returns:</p> Type Description <code>Dict</code> The market structure."},{"location":"connectors/ccxt_connector/#method-get_tickers","title":"Method: get_tickers","text":"<pre><code>def get_tickers(\n            exchange,\n            symbols=None\n        ) -&gt; Dict\n</code></pre> <p>Get the tickers for a specific exchange.</p> <p>Examples:</p> <pre><code>tickers = dc.crypto.get_tickers('binance')\ntickers = dc.crypto.get_tickers('binance', symbols=['BTC/USDT', 'ETH/USDT'])\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> The name of the exchange (e.g., 'binance') <code>symbols</code> <code>list</code> A list of symbols to retrieve tickers for (default: None) <p>Returns:</p> Type Description <code>Dict</code> A dictionary of tickers."},{"location":"connectors/ccxt_connector/#method-get_trades","title":"Method: get_trades","text":"<pre><code>def get_trades(\n            exchange: str,\n            symbol: str,\n            since: int =None,\n            limit: int =None\n        ) -&gt; List\n</code></pre> <p>Get the recent trades for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>trades = dc.crypto.get_trades('binance', 'BTC/USDT', since=1647580800000, limit=1000)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> The name of the exchange (e.g., 'binance') <code>symbol</code> <code>str</code> The trading symbol (e.g., 'BTC/USDT') <code>since</code> <code>int</code> The timestamp (in milliseconds) to start retrieving trades from (default: None) <code>limit</code> <code>int</code> The maximum number of trades to retrieve (default: None) <p>Returns:</p> Type Description <code>List</code> A list of trades."},{"location":"connectors/ccxt_connector/#method-get_funding_rates","title":"Method: get_funding_rates","text":"<pre><code>def get_funding_rates(\n            exchange: str,\n            symbol: str,\n            start_time=None,\n            end_time=None,\n            limit=1000\n        ) -&gt; List\n</code></pre> <p>Get the funding rates for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>funding_rates = dc.crypto.get_funding_rates('binance', 'BTC/USDT', start_time=1647580800000, end_time=1647580800000, limit=1000)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> The name of the exchange (e.g., 'binance') <code>symbol</code> <code>str</code> The trading symbol (e.g., 'BTC/USDT') <code>start_time</code> <code>int</code> The start timestamp (default: None) <code>end_time</code> <code>int</code> The end timestamp (default: None) <code>limit</code> <code>int</code> The maximum number of funding rates to retrieve (default: 1000) <p>Returns:</p> Type Description <code>List</code> A list of funding rates."},{"location":"connectors/ccxt_connector/#method-get_open_interest","title":"Method: get_open_interest","text":"<pre><code>def get_open_interest(\n            exchange,\n            symbol,\n            period,\n            limit=500\n        ) -&gt; List\n</code></pre> <p>Get the open interest for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>open_interest = dc.crypto.get_open_interest('binance', 'BTC/USDT', '5m', limit=500)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> The name of the exchange (e.g., 'binance') <code>symbol</code> <code>str</code> The trading symbol (e.g., 'BTC/USDT') <code>period</code> <code>str</code> The period for the open interest (e.g., '5m', '1h', '1d') <code>limit</code> <code>int</code> The maximum number of data points to retrieve (default: 500) <p>Returns:</p> Type Description <code>List</code> A list of open interest data."},{"location":"connectors/ccxt_connector/#method-get_historical_trades","title":"Method: get_historical_trades","text":"<pre><code>def get_historical_trades(\n            exchange: str,\n            symbol: str,\n            start_time=None,\n            end_time=None,\n            limit=1000\n        ) -&gt; List\n</code></pre> <p>Get the historical trades for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>historical_trades = dc.crypto.get_historical_trades('binance', 'BTC/USDT', start_time=1647580800000, end_time=1647580800000, limit=1000)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> The exchange name (e.g., 'binance') <code>symbol</code> <code>str</code> The trading symbol (e.g., 'BTC/USDT') <code>start_time</code> <code>int</code> The start timestamp (default: None) <code>end_time</code> <code>int</code> The end timestamp (default: None) <code>limit</code> <code>int</code> The maximum number of historical trades to retrieve (default: 1000) <p>Returns:</p> Type Description <code>List</code> A list of historical trades."},{"location":"connectors/ccxt_connector/#method-get_liquidations","title":"Method: get_liquidations","text":"<pre><code>def get_liquidations(\n            exchange: str,\n            symbol: str,\n            start_time=None,\n            end_time=None,\n            limit=1000\n        ) -&gt; List\n</code></pre> <p>Get the liquidations for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>liquidations = dc.crypto.get_liquidations('binance', 'BTC/USDT', start_time=1647580800000, end_time=1647580800000, limit=1000)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> The exchange name (e.g., 'binance') <code>symbol</code> <code>str</code> The trading symbol (e.g., 'BTC/USDT') <code>start_time</code> <code>int</code> The start timestamp (default: None) <code>end_time</code> <code>int</code> The end timestamp (default: None) <code>limit</code> <code>int</code> The maximum number of liquidations to retrieve (default: 1000) <p>Returns:</p> Type Description <code>List</code> A list of liquidations."},{"location":"connectors/ccxt_connector/#method-get_futures_klines","title":"Method: get_futures_klines","text":"<pre><code>def get_futures_klines(\n            exchange: str,\n            symbol: str,\n            interval,\n            start_time=None,\n            end_time=None,\n            limit=1500\n        ) -&gt; List\n</code></pre> <p>Get the futures klines (candlestick data) for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>futures_klines = dc.crypto.get_futures_klines('binance', 'BTC/USDT', '1m', start_time=1647580800000, end_time=1647580800000, limit=1500)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> The exchange name (e.g., 'binance') <code>symbol</code> <code>str</code> The trading symbol (e.g., 'BTC/USDT') <code>interval</code> <code>str</code> The kline interval (e.g., '1m', '5m', '1h', '1d') <code>start_time</code> <code>int</code> The start timestamp (default: None) <code>end_time</code> <code>int</code> The end timestamp (default: None) <code>limit</code> <code>int</code> The maximum number of klines to retrieve (default: 1500) <p>Returns:</p> Type Description <code>List</code> A list of klines."},{"location":"connectors/ccxt_connector/#method-get_futures_mark_price_klines","title":"Method: get_futures_mark_price_klines","text":"<pre><code>def get_futures_mark_price_klines(\n            exchange: str,\n            symbol: str,\n            interval,\n            start_time=None,\n            end_time=None,\n            limit=1500\n        ) -&gt; List\n</code></pre> <p>Get the futures mark price klines for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>futures_mark_price_klines = dc.crypto.get_futures_mark_price_klines('binance', 'BTC/USDT', '1m', start_time=1647580800000, end_time=1647580800000, limit=1500)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> The exchange name (e.g., 'binance') <code>symbol</code> <code>str</code> The trading symbol (e.g., 'BTC/USDT') <code>interval</code> <code>str</code> The kline interval (e.g., '1m', '5m', '1h', '1d') <code>start_time</code> <code>int</code> The start timestamp (default: None) <code>end_time</code> <code>int</code> The end timestamp (default: None) <code>limit</code> <code>int</code> The maximum number of klines to retrieve (default: 1500) <p>Returns:</p> Type Description <code>List</code> A list of mark price klines."},{"location":"connectors/ccxt_connector/#method-get_futures_funding_rate","title":"Method: get_futures_funding_rate","text":"<pre><code>def get_futures_funding_rate(\n            exchange: str,\n            symbol: str,\n            start_time=None,\n            end_time=None,\n            limit=1000\n        ) -&gt; List\n</code></pre> <p>Get the futures funding rate for a specific symbol on an exchange.</p> <p>Examples:</p> <pre><code>futures_funding_rate = dc.crypto.get_futures_funding_rate('binance', 'BTC/USDT', start_time=1647580800000, end_time=1647580800000, limit=1000)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> The exchange name (e.g., 'binance') <code>symbol</code> <code>str</code> The trading symbol (e.g., 'BTC/USDT') <code>start_time</code> <code>int</code> The start timestamp (default: None) <code>end_time</code> <code>int</code> The end timestamp (default: None) <code>limit</code> <code>int</code> The maximum number of funding rates to retrieve (default: 1000) <p>Returns:</p> Type Description <code>List</code> A list of funding rates."},{"location":"connectors/ccxt_connector/#method-datetime_to_milliseconds","title":"Method: datetime_to_milliseconds","text":"<pre><code>def datetime_to_milliseconds(\n            date_str\n        ) -&gt; int\n</code></pre> <p>Convert a YYYY-MM-DD string to milliseconds since epoch. Parameters:</p> Name Type Description <code>date_str</code> <code>str</code> a date string in the format YYYY-MM-DD <p>Returns:</p> Type Description <code>int</code> milliseconds since epoch"},{"location":"connectors/ccxt_connector/#method-milliseconds_to_datetime","title":"Method: milliseconds_to_datetime","text":"<pre><code>def milliseconds_to_datetime(\n            milliseconds\n        ) -&gt; datetime\n</code></pre> <p>Convert milliseconds since epoch to datetime. Parameters:</p> Name Type Description <code>milliseconds</code> <code>int</code> milliseconds since epoch <p>Returns:</p> Type Description <code>datetime</code> datetime object"},{"location":"connectors/ccxt_connector/#method-_fetch_ohlcv","title":"Method: _fetch_ohlcv","text":"<pre><code>def _fetch_ohlcv(\n            exchange: str,\n            ticker: str,\n            timeframe: str,\n            start_date: str,\n            end_date: str\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get OHLCV data for a specific ticker and timeframe from a specific exchange, handling the exchange's maximum time interval limitation.</p> <p>Examples:</p> <pre><code>df = dc.crypto.get_ohlcv('binance', 'BTC/USDT', '1d', datetime(2021, 1, 1), datetime(2021, 1, 5))\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> the name of the exchange. <code>ticker</code> <code>str</code> the ticker symbol. <code>timeframe</code> <code>str</code> the timeframe of the OHLCV data. <code>start_date</code> <code>str</code> the start date of the data. <code>end_date</code> <code>str</code> the end date of the data. <p>Returns:</p> Type Description <code>pd.DataFrame</code> the OHLCV data as a pandas DataFrame."},{"location":"connectors/ccxt_connector/#method-async_get_ohlcv","title":"Method: async_get_ohlcv","text":"<pre><code>def async_get_ohlcv(\n            exchange: str,\n            ticker: str,\n            timeframe: str,\n            start_date: str,\n            end_date: str,\n            db_name=None,\n            source='ccxt',\n            read_from_db=False,\n            write_to_db=False\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get OHLCV data for a specific ticker and timeframe from a specific exchange, handling the exchange's maximum time interval limitation.</p> <p>Examples:</p> <pre><code>df = dc.crypto.get_ohlcv('binance', 'BTC/USDT', '1d', '2021-01-01', '2021-01-05)\ndf = dc.crypto.get_ohlcv('binance', 'BTC/USDT', '1d', '2021-01-01', '2021-01-05', db_name='Mongo', source='ccxt', read_from_db=False, write_to_db=True)\n\nOHLCV Data for BTC/USDT on binance:\nopen      high       low     close      volume\ntimestamp\n2021-01-01  28948.19  29668.86  28627.12  29337.16  210716.398\n2021-01-02  29337.15  33480.00  28958.24  32199.91  545541.080\n2021-01-03  32198.41  34832.25  32000.02  33054.53  487486.989\n2021-01-04  33053.93  33653.56  27800.00  32031.07  506128.023\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> the name of the exchange. <code>ticker</code> <code>str</code> the ticker symbol. <code>timeframe</code> <code>str</code> the timeframe of the OHLCV data. <code>start_date</code> <code>str</code> the start date of the data. <code>end_date</code> <code>str</code> the end date of the data. <code>db_name</code> <code>str</code> the name of the database to read from/write to (e.g., 'Mongo') <code>source</code> <code>str</code> used for reading / writing to the database, set in metadata <code>read_from_db</code> <code>bool</code> whether to read data from the database <code>write_to_db</code> <code>bool</code> whether to write data to the database <p>Returns:</p> Type Description <code>pd.DataFrame</code> the OHLCV data as a pandas DataFrame."},{"location":"connectors/cnnfg_connector/","title":"Module Information","text":"<p>Description: CNN Fear and Greed Index Connector for QuantJourney Framework</p> <p>This connector facilitates the downloading and parsing of the CNN Fear and Greed Index and its components.  The index provides insight into the market's mood, contributing to financial market analysis in the QuantJourney Framework.</p> <p>date: 2024-03-18</p> <p>Author: jpolec</p>"},{"location":"connectors/cnnfg_connector/#class-cnnfconnector","title":"Class: CnnfConnector:()","text":""},{"location":"connectors/cnnfg_connector/#method-get_cnnfg_index_for_day","title":"Method: get_cnnfg_index_for_day","text":"<pre><code>def get_cnnfg_index_for_day(\n            day\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Fetches the Fear and Greed Index for a specific day.</p> <p>Examples:</p> <pre><code>data = await cnnfg.get_cnnfg_index_for_day('2024-03-18')\n\nx   fg_value fg_rating\ndate\n2024-03-18  1.710720e+12  71.085714     greed\n2024-03-19  1.710806e+12  69.114286     greed\n2024-03-20  1.710893e+12  73.171429     greed\n2024-03-21  1.710979e+12  73.142857     greed\n2024-03-22  1.711066e+12  68.771429     greed\n2024-03-25  1.711325e+12  69.600000     greed\n2024-03-26  1.711411e+12  67.828571     greed\n2024-03-27  1.711498e+12  69.257143     greed\n2024-03-28  1.711584e+12  71.028571     greed\n2024-03-29  1.711670e+12  69.485714     greed\n2024-04-01  1.711930e+12  67.371429     greed\n2024-04-02  1.712016e+12  62.393822     greed\n2024-04-03  1.712102e+12  63.428571     greed\n2024-04-04  1.712189e+12  58.428571     greed\n2024-04-05  1.712275e+12  62.321805     greed\n2024-04-08  1.712534e+12  62.371429     greed\n2024-04-09  1.712621e+12  54.769925   neutral\n2024-04-10  1.712707e+12  51.988868   neutral\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>day</code> <code>str</code> The day for which to fetch the index in 'YYYY-MM-DD' format. <p>Returns:</p> Type Description <code>pd.DataFrame</code> DataFrame containing the index and its components for the specified day."},{"location":"connectors/cnnfg_connector/#method-parse_cnnfg_index_data","title":"Method: parse_cnnfg_index_data","text":"<pre><code>def parse_cnnfg_index_data(\n            data\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Parses the Fear and Greed Index data from the CNN API response. Parameters:</p> Name Type Description <code>data</code> <code>dict</code> The raw data from the CNN API. <p>Returns:</p> Type Description <code>pd.DataFrame</code> DataFrame containing the index and its components."},{"location":"connectors/cnnfg_connector/#method-get_cnnfg_index_range","title":"Method: get_cnnfg_index_range","text":"<pre><code>def get_cnnfg_index_range(\n            start_date,\n            end_date\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Fetches the Fear and Greed Index for a range of dates. Parameters:</p> Name Type Description <code>start_date</code> <code>str</code> The start date in 'YYYY-MM-DD' format. <code>end_date</code> <code>str</code> The end date in 'YYYY-MM-DD' <p>Returns:</p> Type Description <code>pd.DataFrame</code> DataFrame containing the index and its components for the specified date range."},{"location":"connectors/eod_connector/","title":"Module Information","text":"<p>Description: Eodhistorical Data Connector of QuantJourney Framework</p> <p>This module provides a class for fetching financial and economic data from the Eodhistorical Data API. It supports the retrieval of OHLCV data, fundamental data, and other financial metrics for a wide range of stocks and indices.</p> <p>Author: jpolec</p> <p>Date: 18-03-2024</p>"},{"location":"connectors/eod_connector/#class-eodconnector","title":"Class: EodConnector()","text":""},{"location":"connectors/eod_connector/#method-async_get_ohlcv","title":"Method: async_get_ohlcv","text":"<pre><code>def async_get_ohlcv(\n            tickers: List[str],\n            exchanges: List[str],\n            granularity: str,\n            period_starts: List[str],\n            period_ends: List[str]\n        ) -&gt; List[pd.DataFrame]\n</code></pre> <p>Asynchronously fetches OHLCV data for a given list of tickers and exchanges. Parameters:</p> Name Type Description <code>tickers</code> <code>list of str</code> List of stock tickers. <code>exchanges</code> <code>list of str</code> List of stock exchanges corresponding to tickers. <code>granularity</code> <code>str</code> Time period ('5m', '15m', '30m', '1h', '1d'). <code>period_starts</code> <code>list of str</code> List of start dates for each ticker's data retrieval period. <code>period_ends</code> <code>list of str</code> List of end dates for each ticker's data retrieval period. <p>Returns:</p> Type Description <code>List[pd.DataFrame]</code> List of DataFrames containing OHLCV data for each ticker."},{"location":"connectors/eod_connector/#method-async_get_live_lagged_prices","title":"Method: async_get_live_lagged_prices","text":"<pre><code>def async_get_live_lagged_prices(\n            tickers: List[str],\n            exchanges: List[str]\n        ) -&gt; List[pd.DataFrame]\n</code></pre> <p>Asynchronously fetches live and lagged prices for the given tickers and exchanges. Parameters:</p> Name Type Description <code>tickers</code> <code>list of str</code> List of stock tickers. <code>exchanges</code> <code>list of str</code> List of stock exchanges corresponding to tickers. <p>Returns:</p> Type Description <code>List[pd.DataFrame]</code> Dictionary containing live and lagged prices for each ticker."},{"location":"connectors/eod_connector/#method-async_get_intraday_data","title":"Method: async_get_intraday_data","text":"<pre><code>def async_get_intraday_data(\n            pairs,\n            interval,\n            to_utc,\n            period_days\n        ) -&gt; Dict\n</code></pre> <p>Fetches intraday data for the given forex pairs Parameters:</p> Name Type Description <code>pairs</code> <code>list of str</code> List of forex pairs. <code>interval</code> <code>str</code> Interval for the intraday data ('1m', '5m', '15m', '30m', '1h'). <code>to_utc</code> <code>datetime</code> End date and time in UTC. <code>period_days</code> <code>int</code> Number of days for the data period. <p>Returns:</p> Type Description <code>Dict</code> Dictionary containing intraday data DataFrames for each pair."},{"location":"connectors/eod_connector/#method-async_get_fundamental_data","title":"Method: async_get_fundamental_data","text":"<pre><code>def async_get_fundamental_data(\n            ticker: str,\n            exchange: str =\"US\"\n        ) -&gt; Dict\n</code></pre> <p>Get fundamental data for a given stock ticker or Index. Available data:: https://eodhistoricaldata.com/financial-apis/stock-etfs-fundamental-data-feeds/ Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker or Index. <code>exchange</code> <code>str</code> Stock exchange. Default is 'US'. <p>Returns:</p> Type Description <code>Dict</code> Dictionary containing fundamental data."},{"location":"connectors/eod_connector/#method-async_get_income_statement","title":"Method: async_get_income_statement","text":"<pre><code>def async_get_income_statement(\n            ticker: str,\n            exchange: str,\n            option: str =\"q\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get income statement data for a given stock ticker and exchange.</p> <p>Examples:</p> <pre><code>income_statement = await async_get_income_statement(\"AAPL\", \"US\", \"q\")\n\nIncome Statement (Quarterly):\ndate filing_date currency_symbol researchDevelopment  \\\n1985-09-30  1985-09-30  1985-09-30             USD                None\n1985-12-31  1985-12-31  1985-12-31             USD                None\n1986-03-31  1986-03-31  1986-03-31             USD                None\n1986-06-30  1986-06-30  1986-06-30             USD                None\n1986-09-30  1986-09-30  1986-09-30             USD                None\n...                ...         ...             ...                 ...\n2022-12-31  2022-12-31  2023-02-03             USD       7709000000.00\n2023-03-31  2023-03-31  2023-05-05             USD       7457000000.00\n2023-06-30  2023-06-30  2023-08-04             USD       7442000000.00\n2023-09-30  2023-09-30  2023-11-03             USD       7307000000.00\n2023-12-31  2023-12-31  2024-02-02             USD       7696000000.00\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>option</code> <code>str</code> Option for quarterly ('q') or yearly ('y') data. <p>Returns:</p> Type Description <code>pd.DataFrame</code> DataFrame containing income statement data."},{"location":"connectors/eod_connector/#method-async_get_balance_sheet","title":"Method: async_get_balance_sheet","text":"<pre><code>def async_get_balance_sheet(\n            ticker,\n            exchange,\n            option=\"q\"\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get balance sheet data for a given stock ticker and exchange.</p> <p>Examples:</p> <pre><code>balance_sheet = await async_get_balance_sheet(\"AAPL\", \"US\", \"q\")\n\nBalance Sheet (Quarterly):\ndate filing_date currency_symbol      totalAssets  \\\n1985-09-30  1985-09-30  1985-09-30             USD     936200000.00\n1985-12-31  1985-12-31  1985-12-31             USD             None\n1986-03-31  1986-03-31  1986-03-31             USD             None\n1986-06-30  1986-06-30  1986-06-30             USD             None\n1986-09-30  1986-09-30  1986-09-30             USD    1160100000.00\n...                ...         ...             ...              ...\n2022-12-31  2022-12-31  2023-02-03             USD  346747000000.00\n2023-03-31  2023-03-31  2023-05-05             USD  332160000000.00\n2023-06-30  2023-06-30  2023-08-04             USD  335038000000.00\n2023-09-30  2023-09-30  2023-11-03             USD  352583000000.00\n2023-12-31  2023-12-31  2024-02-02             USD  353514000000.00\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>option</code> <code>str</code> Option for quarterly ('q') or yearly ('y') data. <p>Returns:</p> Type Description <code>pd.DataFrame</code> DataFrame containing balance sheet data."},{"location":"connectors/eod_connector/#method-async_get_cash_flow","title":"Method: async_get_cash_flow","text":"<pre><code>def async_get_cash_flow(\n            ticker,\n            exchange,\n            option=\"q\"\n        )\n</code></pre> <p>Get cash flow data for a given stock ticker and exchange.</p> <p>Examples:</p> <pre><code>cash_flow = await async_get_cash_flow(\"AAPL\", \"US\", \"q\")\n\nCash Flow (Quarterly):\ndate filing_date currency_symbol     investments  \\\n1989-12-31  1989-12-31  1989-12-31             USD            None\n1990-03-31  1990-03-31  1990-03-31             USD            None\n1990-06-30  1990-06-30  1990-06-30             USD            None\n1990-09-30  1990-09-30  1990-09-30             USD            None\n1990-12-31  1990-12-31  1990-12-31             USD            None\n...                ...         ...             ...             ...\n2022-12-31  2022-12-31  2023-02-03             USD  -1445000000.00\n2023-03-31  2023-03-31  2023-05-05             USD   2319000000.00\n2023-06-30  2023-06-30  2023-08-04             USD    437000000.00\n2023-09-30  2023-09-30  2023-11-03             USD   2394000000.00\n2023-12-31  2023-12-31  2024-02-02             USD   1927000000.00\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>option</code> <code>str</code> Option for quarterly ('q') or yearly ('y') data."},{"location":"connectors/eod_connector/#method-get_ticker_highlights","title":"Method: get_ticker_highlights","text":"<pre><code>def get_ticker_highlights(\n            ticker: str,\n            exchange: str,\n            fundamental_data: Optional[Dict] = None\n        ) -&gt; Optional[Dict]\n</code></pre> <p>Get highlights data for a given stock ticker and exchange. If fundamental data is pre-fetched, it can be passed directly to avoid fetching it again.</p> <p>Examples:</p> <pre><code>{'MarketCapitalization': 2614313615360, 'MarketCapitalizationMln': 2614313.6154, 'EBITDA': 130108997632, 'PERatio': 26.3297,\n'PEGRatio': 2.112, 'WallStreetTargetPrice': 198.9, 'BookValue': 4.793, 'DividendShare': 0.95, 'DividendYield': 0.0057,\n'EarningsShare': 6.43, 'EPSEstimateCurrentYear': 6.53, 'EPSEstimateNextYear': 7.13, 'EPSEstimateNextQuarter': 1.57,\n'EPSEstimateCurrentQuarter': 2.1, 'MostRecentQuarter': '2023-12-31', 'ProfitMargin': 0.2616, 'OperatingMarginTTM': 0.3376,\n'ReturnOnAssetsTTM': 0.2118, 'ReturnOnEquityTTM': 1.5427, 'RevenueTTM': 385706000384, 'RevenuePerShareTTM': 24.648,\n'QuarterlyRevenueGrowthYOY': 0.021, 'GrossProfitTTM': 170782000000, 'DilutedEpsTTM': 6.43, 'QuarterlyEarningsGrowthYOY': 0.16}\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>fundamental_data</code> <code>Optional[Dict]</code> Pre-fetched fundamental data for the ticker. <p>Returns:</p> Type Description <code>Optional[Dict]</code> Dictionary containing highlights data if found, otherwise None."},{"location":"connectors/eod_connector/#method-get_financial_metric","title":"Method: get_financial_metric","text":"<pre><code>def get_financial_metric(\n            ticker: str,\n            exchange: str,\n            metric_key: str,\n            fundamental_data: Optional[Dict] = None\n        ) -&gt; Optional[Union[str, float]]\n</code></pre> <p>Fetch a specific financial metric from the highlights data for a given stock ticker and exchange, using either pre-fetched fundamental data or by fetching it anew. This method ensures that the data is handled efficiently and errors are logged properly. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>metric_key</code> <code>str</code> The key of the financial metric in the highlights. <code>fundamental_data</code> <code>Optional[Dict]</code> Optionally pre-fetched fundamental data containing the 'Highlights' key. <p>Returns:</p> Type Description <code>Optional[Union[str, float]]</code> The requested financial metric in its original format if available, otherwise None."},{"location":"connectors/eod_connector/#method-get_ticker_mcap","title":"Method: get_ticker_mcap","text":"<pre><code>def get_ticker_mcap(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_ebitda","title":"Method: get_ticker_ebitda","text":"<pre><code>def get_ticker_ebitda(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_pe","title":"Method: get_ticker_pe","text":"<pre><code>def get_ticker_pe(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_peg","title":"Method: get_ticker_peg","text":"<pre><code>def get_ticker_peg(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_book","title":"Method: get_ticker_book","text":"<pre><code>def get_ticker_book(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_div_ps","title":"Method: get_ticker_div_ps","text":"<pre><code>def get_ticker_div_ps(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_div_yield","title":"Method: get_ticker_div_yield","text":"<pre><code>def get_ticker_div_yield(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_eps","title":"Method: get_ticker_eps","text":"<pre><code>def get_ticker_eps(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_last_quarter_date","title":"Method: get_ticker_last_quarter_date","text":"<pre><code>def get_ticker_last_quarter_date(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_profit_margin","title":"Method: get_ticker_profit_margin","text":"<pre><code>def get_ticker_profit_margin(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_op_marginttm","title":"Method: get_ticker_op_marginTTM","text":"<pre><code>def get_ticker_op_marginTTM(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_roattm","title":"Method: get_ticker_roaTTM","text":"<pre><code>def get_ticker_roaTTM(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_roettm","title":"Method: get_ticker_roeTTM","text":"<pre><code>def get_ticker_roeTTM(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_revenuettm","title":"Method: get_ticker_revenueTTM","text":"<pre><code>def get_ticker_revenueTTM(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_revenue_psttm","title":"Method: get_ticker_revenue_psTTM","text":"<pre><code>def get_ticker_revenue_psTTM(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_qoq_rev_growth","title":"Method: get_ticker_qoq_rev_growth","text":"<pre><code>def get_ticker_qoq_rev_growth(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_qoq_earnings_growth","title":"Method: get_ticker_qoq_earnings_growth","text":"<pre><code>def get_ticker_qoq_earnings_growth(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_gross_profitttm","title":"Method: get_ticker_gross_profitTTM","text":"<pre><code>def get_ticker_gross_profitTTM(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_diluted_epsttm","title":"Method: get_ticker_diluted_epsTTM","text":"<pre><code>def get_ticker_diluted_epsTTM(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_analyst_target","title":"Method: get_ticker_analyst_target","text":"<pre><code>def get_ticker_analyst_target(\n            ticker,\n            exchange,\n            fundamental_data=None\n        )\n</code></pre>"},{"location":"connectors/eod_connector/#method-get_ticker_sharestats","title":"Method: get_ticker_sharestats","text":"<pre><code>def get_ticker_sharestats(\n            ticker: str,\n            exchange: str,\n            fundamental_data: Optional[Dict] = None\n        ) -&gt; Optional[Dict]\n</code></pre> <p>Fetch ShareStats data for a given stock ticker and exchange. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>fundamental_data</code> <code>Optional[Dict]</code> Optionally pre-fetched fundamental data. <p>Returns:</p> Type Description <code>Optional[Dict]</code> Dictionary containing ShareStats data if found, otherwise None."},{"location":"connectors/eod_connector/#method-get_ticker_shortratio","title":"Method: get_ticker_shortratio","text":"<pre><code>def get_ticker_shortratio(\n            ticker: str,\n            exchange: str,\n            fundamental_data: Optional[Dict] = None\n        ) -&gt; Optional[float]\n</code></pre> <p>Get the short ratio from ShareStats for a given ticker and exchange. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>fundamental_data</code> <code>Optional[Dict]</code> Pre-fetched ShareStats or fundamental data. <p>Returns:</p> Type Description <code>Optional[float]</code> Short ratio if available, otherwise None."},{"location":"connectors/eod_connector/#method-get_ticker_percentinsiders","title":"Method: get_ticker_percentinsiders","text":"<pre><code>def get_ticker_percentinsiders(\n            ticker: str,\n            exchange: str,\n            fundamental_data: Optional[Dict] = None\n        ) -&gt; Optional[float]\n</code></pre> <p>Get the percentage of insiders from ShareStats for a given ticker and exchange. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>fundamental_data</code> <code>Optional[Dict]</code> Pre-fetched ShareStats or fundamental data. <p>Returns:</p> Type Description <code>Optional[float]</code> Percent of insiders if available, otherwise None."},{"location":"connectors/eod_connector/#method-get_ticker_valuation","title":"Method: get_ticker_valuation","text":"<pre><code>def get_ticker_valuation(\n            ticker: str,\n            exchange: str,\n            fundamental_data: Optional[Dict] = None\n        ) -&gt; Optional[Dict]\n</code></pre> <p>Fetch valuation data for a given stock ticker and exchange.</p> <p>Examples:</p> <pre><code>ticker_val = await get_ticker_valuation(\"AAPL\", \"US\")\n\n{'TrailingPE': 26.3297, 'ForwardPE': 26.3158, 'PriceSalesTTM': 6.778, 'PriceBookMRQ': 35.4267, 'EnterpriseValue': 2649250332672,\n'EnterpriseValueRevenue': 6.8966, 'EnterpriseValueEbitda': 19.929}\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>fundamental_data</code> <code>Optional[Dict]</code> Optionally pre-fetched fundamental data. <p>Returns:</p> Type Description <code>Optional[Dict]</code> Valuation data if found, otherwise None."},{"location":"connectors/eod_connector/#method-get_ticker_trailing_pe","title":"Method: get_ticker_trailing_pe","text":"<pre><code>def get_ticker_trailing_pe(\n            ticker: str,\n            exchange: str,\n            fundamental_data: Optional[Dict] = None\n        ) -&gt; Optional[float]\n</code></pre> <p>Get the trailing PE ratio from the valuation data for a given ticker and exchange. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>fundamental_data</code> <code>Optional[Dict]</code> Optionally pre-fetched fundamental or valuation data. <p>Returns:</p> Type Description <code>Optional[float]</code> Trailing PE ratio if available, otherwise None."},{"location":"connectors/eod_connector/#method-get_ticker_forward_pe","title":"Method: get_ticker_forward_pe","text":"<pre><code>def get_ticker_forward_pe(\n            ticker: str,\n            exchange: str,\n            fundamental_data: Optional[Dict] = None\n        ) -&gt; Optional[float]\n</code></pre> <p>Get the forward PE ratio from the valuation data for a given ticker and exchange. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>fundamental_data</code> <code>Optional[Dict]</code> Optionally pre-fetched fundamental or valuation data. <p>Returns:</p> Type Description <code>Optional[float]</code> Forward PE ratio if available, otherwise None."},{"location":"connectors/eod_connector/#method-get_ticker_price_to_sales","title":"Method: get_ticker_price_to_sales","text":"<pre><code>def get_ticker_price_to_sales(\n            ticker: str,\n            exchange: str,\n            fundamental_data: Optional[Dict] = None\n        ) -&gt; Optional[float]\n</code></pre> <p>Get the price-to-sales ratio from the valuation data for a given ticker and exchange. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>fundamental_data</code> <code>Optional[Dict]</code> Optionally pre-fetched fundamental or valuation data. <p>Returns:</p> Type Description <code>Optional[float]</code> Price-to-sales ratio if available, otherwise None."},{"location":"connectors/eod_connector/#method-get_ticker_price_to_book","title":"Method: get_ticker_price_to_book","text":"<pre><code>def get_ticker_price_to_book(\n            ticker: str,\n            exchange: str,\n            fundamental_data: Optional[Dict] = None\n        ) -&gt; Optional[float]\n</code></pre> <p>Get the price-to-book ratio from the valuation data for a given ticker and exchange. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>fundamental_data</code> <code>Optional[Dict]</code> Optionally pre-fetched fundamental or valuation data. <p>Returns:</p> Type Description <code>Optional[float]</code> Price-to-book ratio if available, otherwise None."},{"location":"connectors/eod_connector/#method-get_ticker_ev","title":"Method: get_ticker_ev","text":"<pre><code>def get_ticker_ev(\n            ticker: str,\n            exchange: str,\n            fundamental_data: Optional[Dict] = None\n        ) -&gt; Optional[float]\n</code></pre> <p>Get the enterprise value from the valuation data for a given ticker and exchange. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>fundamental_data</code> <code>Optional[Dict]</code> Optionally pre-fetched fundamental or valuation data. <p>Returns:</p> Type Description <code>Optional[float]</code> Enterprise value if available, otherwise None."},{"location":"connectors/eod_connector/#method-get_ticker_ev_revenue","title":"Method: get_ticker_ev_revenue","text":"<pre><code>def get_ticker_ev_revenue(\n            ticker: str,\n            exchange: str,\n            fundamental_data: Optional[Dict] = None\n        ) -&gt; Optional[float]\n</code></pre> <p>Get the enterprise value to revenue ratio from the valuation data for a given ticker and exchange. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>fundamental_data</code> <code>Optional[Dict]</code> Optionally pre-fetched fundamental or valuation data. <p>Returns:</p> Type Description <code>Optional[float]</code> Enterprise value to revenue ratio if available, otherwise None."},{"location":"connectors/eod_connector/#method-get_ticker_ev_ebitda","title":"Method: get_ticker_ev_ebitda","text":"<pre><code>def get_ticker_ev_ebitda(\n            ticker: str,\n            exchange: str,\n            fundamental_data: Optional[Dict] = None\n        ) -&gt; Optional[float]\n</code></pre> <p>Get the enterprise value to EBITDA ratio from the valuation data for a given ticker and exchange. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Stock ticker. <code>exchange</code> <code>str</code> Stock exchange. <code>fundamental_data</code> <code>Optional[Dict]</code> Optionally pre-fetched fundamental or valuation data. <p>Returns:</p> Type Description <code>Optional[float]</code> Enterprise value to EBITDA ratio if available, otherwise None."},{"location":"connectors/eod_connector/#method-get_exchange_symbols","title":"Method: get_exchange_symbols","text":"<pre><code>def get_exchange_symbols(\n            exchange=\"US\"\n        ) -&gt; List[str]\n</code></pre> <p>Get all symbols for a given exchange. Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> Stock exchange. Default is 'US'. <p>Returns:</p> Type Description <code>List[str]</code> List of symbols for the exchange."},{"location":"connectors/eod_connector/#method-get_exchange_list","title":"Method: get_exchange_list","text":"<pre><code>def get_exchange_list() -&gt; List[str]\n</code></pre> <p>Get a list of all exchanges.</p> <p>Returns:</p> Type Description <code>List[str]</code> List of all exchanges."},{"location":"connectors/eod_connector/#method-get_index_list","title":"Method: get_index_list","text":"<pre><code>def get_index_list() -&gt; List[str]\n</code></pre> <p>Get a list of all indices.</p>"},{"location":"connectors/eod_connector/#supported-indices-httpseodhistoricaldatacomfinancial-apislist-supported-indices","title":"Supported indices: https://eodhistoricaldata.com/financial-apis/list-supported-indices/","text":"<p>Returns:</p> Type Description <code>List[str]</code> List"},{"location":"connectors/eod_connector/#method-async_get_intraday_forex_data","title":"Method: async_get_intraday_forex_data","text":"<pre><code>def async_get_intraday_forex_data(\n            pairs: List[str],\n            interval: str = \"5m\",\n            to_utc: datetime = None,\n            period_days: int = 120\n        ) -&gt; List[pd.DataFrame]\n</code></pre> <p>Asynchronously fetches intraday data for the given forex pairs. Parameters:</p> Name Type Description <code>pairs</code> <code>list of str</code> List of forex pairs. <code>interval</code> <code>str</code> Interval for the intraday data ('1m', '5m', '15m', '30m', '1h'). <code>to_utc</code> <code>datetime</code> End date and time in UTC. Defaults to current UTC time. <code>period_days</code> <code>int</code> Number of days for the data period. <p>Returns:</p> Type Description <code>List[pd.DataFrame]</code> Dictionary containing intraday data DataFrames for each pair."},{"location":"connectors/fmp_connector/","title":"Module Information","text":"<p>Description: Financial Data Modelling Connector of QuantJourney Framework</p> <p>This module provides a class for fetching financial and economic data from the Eodhistorical Data API. It supports the retrieval of OHLCV data, fundamental data, and other financial metrics for a wide range of stocks and indices.</p> <p>Author: jpolec</p> <p>Date: 05-05-2024</p>"},{"location":"connectors/fmp_connector/#class-fmpconnector","title":"Class: FMPConnector()","text":""},{"location":"connectors/fmp_connector/#method-async_earning_calendar","title":"Method: async_earning_calendar","text":"<pre><code>def async_earning_calendar(\n            from_date: str = None,\n            to_date: str = None\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Query FMP earning calendar API.</p> <p>Fetch earning calendar data for a given date range. The maximum time interval between \"from\" and \"to\" parameters is 3 months. Parameters:</p> Name Type Description <code>from_date</code> <code>str, optional</code> Start date in the format 'YYYY-MM-DD'. Defaults to None. <code>to_date</code> <code>str, optional</code> End date in the format 'YYYY-MM-DD'. Defaults to None. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of earning calendar data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_historical_earning_calendar","title":"Method: async_historical_earning_calendar","text":"<pre><code>def async_historical_earning_calendar(\n            symbol: str,\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Query FMP /historical/earning_calendar/ API.</p> <p>Fetch historical earning calendar data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>limit</code> <code>int, optional</code> Number of historical earning calendar entries to retrieve. Defaults to DEFAULT_LIMIT. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> A list of dictionaries containing historical earning calendar data."},{"location":"connectors/fmp_connector/#method-async_ipo_calendar","title":"Method: async_ipo_calendar","text":"<pre><code>def async_ipo_calendar(\n            from_date: str = None,\n            to_date: str = None\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Query FMP IPO calendar API.</p> <p>Fetch IPO calendar data for a given date range. The maximum time interval between \"from\" and \"to\" parameters is 3 months. Parameters:</p> Name Type Description <code>from_date</code> <code>str, optional</code> Start date in the format 'YYYY-MM-DD'. Defaults to None. <code>to_date</code> <code>str, optional</code> End date in the format 'YYYY-MM-DD'. Defaults to None. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of IPO calendar data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_stock_split_calendar","title":"Method: async_stock_split_calendar","text":"<pre><code>def async_stock_split_calendar(\n            from_date: str = None,\n            to_date: str = None\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Query FMP stock split calendar API.</p> <p>Fetch stock split calendar data for a given date range. The maximum time interval between \"from\" and \"to\" parameters is 3 months. Parameters:</p> Name Type Description <code>from_date</code> <code>str, optional</code> Start date in the format 'YYYY-MM-DD'. Defaults to None. <code>to_date</code> <code>str, optional</code> End date in the format 'YYYY-MM-DD'. Defaults to None. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of stock split calendar data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_dividend_calendar","title":"Method: async_dividend_calendar","text":"<pre><code>def async_dividend_calendar(\n            from_date: str = None,\n            to_date: str = None\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Query FMP dividend calendar API.</p> <p>Fetch dividend calendar data for a given date range. The maximum time interval between \"from\" and \"to\" parameters is 3 months. Parameters:</p> Name Type Description <code>from_date</code> <code>str, optional</code> Start date in the format 'YYYY-MM-DD'. Defaults to None. <code>to_date</code> <code>str, optional</code> End date in the format 'YYYY-MM-DD'. Defaults to None. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of dividend calendar data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_economic_calendar","title":"Method: async_economic_calendar","text":"<pre><code>def async_economic_calendar(\n            from_date: str = None,\n            to_date: str = None\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Query FMP economic calendar API.</p> <p>Fetch economic calendar data for a given date range. The maximum time interval between \"from\" and \"to\" parameters is 3 months. Parameters:</p> Name Type Description <code>from_date</code> <code>str, optional</code> Start date in the format 'YYYY-MM-DD'. Defaults to None. <code>to_date</code> <code>str, optional</code> End date in the format 'YYYY-MM-DD'. Defaults to None. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of economic calendar data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_available_commodities","title":"Method: async_available_commodities","text":"<pre><code>def async_available_commodities() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch available commodities.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of available commodities data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_commodities_list","title":"Method: async_commodities_list","text":"<pre><code>def async_commodities_list() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch commodities list.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of commodities data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_company_profile","title":"Method: async_company_profile","text":"<pre><code>def async_company_profile(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch company profile data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of company profile data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_key_executives","title":"Method: async_key_executives","text":"<pre><code>def async_key_executives(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch key executives data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of key executives data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_search","title":"Method: async_search","text":"<pre><code>def async_search(\n            query: str = \"\",\n            limit: int = DEFAULT_LIMIT,\n            exchange: str = \"\"\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Search for stocks using a keyword and other optional parameters. Parameters:</p> Name Type Description <code>query</code> <code>str</code> Search keyword. <code>limit</code> <code>int</code> Maximum number of results to return. <code>exchange</code> <code>str</code> Stock exchange to filter results. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of search result dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_search_ticker","title":"Method: async_search_ticker","text":"<pre><code>def async_search_ticker(\n            query: str = \"\",\n            limit: int = DEFAULT_LIMIT,\n            exchange: str = \"\"\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Search for stocks by ticker symbol using a keyword and other optional parameters. Parameters:</p> Name Type Description <code>query</code> <code>str</code> Search keyword. <code>limit</code> <code>int</code> Maximum number of results to return. <code>exchange</code> <code>str</code> Stock exchange to filter results. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of search result dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_income_statement","title":"Method: async_income_statement","text":"<pre><code>def async_income_statement(\n            symbol: str,\n            period: str = \"annual\",\n            limit: int = DEFAULT_LIMIT,\n            download: bool = False,\n            filename: str = \"income_statement.csv\"\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch income statement data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>period</code> <code>str</code> Period of the income statement data. Can be \"annual\" or \"quarter\". <code>limit</code> <code>int</code> Maximum number of results to return. <code>download</code> <code>bool</code> Whether to download the data as a CSV file. <code>filename</code> <code>str</code> Name of the CSV file to save the data, if download is True. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of income statement data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_balance_sheet_statement","title":"Method: async_balance_sheet_statement","text":"<pre><code>def async_balance_sheet_statement(\n            symbol: str,\n            period: str = \"annual\",\n            limit: int = DEFAULT_LIMIT,\n            download: bool = False,\n            filename: str = \"balance_sheet_statement.csv\"\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch balance sheet statement data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>period</code> <code>str</code> Period of the balance sheet statement data. Can be \"annual\" or \"quarter\". <code>limit</code> <code>int</code> Maximum number of results to return. <code>download</code> <code>bool</code> Whether to download the data as a CSV file. <code>filename</code> <code>str</code> Name of the CSV file to save the data, if download is True. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of balance sheet statement data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_cash_flow_statement","title":"Method: async_cash_flow_statement","text":"<pre><code>def async_cash_flow_statement(\n            symbol: str,\n            period: str = \"annual\",\n            limit: int = DEFAULT_LIMIT,\n            download: bool = False,\n            filename: str = \"cash_flow_statement.csv\"\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch cash flow statement data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>period</code> <code>str</code> Period of the cash flow statement data. Can be \"annual\" or \"quarter\". <code>limit</code> <code>int</code> Maximum number of results to return. <code>download</code> <code>bool</code> Whether to download the data as a CSV file. <code>filename</code> <code>str</code> Name of the CSV file to save the data, if download is True. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of cash flow statement data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_financial_statement_symbol_lists","title":"Method: async_financial_statement_symbol_lists","text":"<pre><code>def async_financial_statement_symbol_lists() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch financial statement symbol lists.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of financial statement symbol lists data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_income_statement_growth","title":"Method: async_income_statement_growth","text":"<pre><code>def async_income_statement_growth(\n            symbol: str,\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch income statement growth data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>limit</code> <code>int</code> Maximum number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of income statement growth data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_balance_sheet_statement_growth","title":"Method: async_balance_sheet_statement_growth","text":"<pre><code>def async_balance_sheet_statement_growth(\n            symbol: str,\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch balance sheet statement growth data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>limit</code> <code>int</code> Maximum number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of balance sheet statement growth data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_cash_flow_statement_growth","title":"Method: async_cash_flow_statement_growth","text":"<pre><code>def async_cash_flow_statement_growth(\n            symbol: str,\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch cash flow statement growth data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>limit</code> <code>int</code> Maximum number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of cash flow statement growth data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_income_statement_as_reported","title":"Method: async_income_statement_as_reported","text":"<pre><code>def async_income_statement_as_reported(\n            symbol: str,\n            period: str = \"annual\",\n            limit: int = DEFAULT_LIMIT,\n            download: bool = False,\n            filename: str = \"income_statement_as_reported.csv\"\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch income statement as reported data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>period</code> <code>str</code> Period of the income statement as reported data. Can be \"annual\" or \"quarter\". <code>limit</code> <code>int</code> Maximum number of results to return. <code>download</code> <code>bool</code> Whether to download the data as a CSV file. <code>filename</code> <code>str</code> Name of the CSV file to save the data, if download is True. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of income statement as reported data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_balance_sheet_statement_as_reported","title":"Method: async_balance_sheet_statement_as_reported","text":"<pre><code>def async_balance_sheet_statement_as_reported(\n            symbol: str,\n            period: str = \"annual\",\n            limit: int = DEFAULT_LIMIT,\n            download: bool = False,\n            filename: str = \"balance_sheet_statement_as_reported.csv\"\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch balance sheet statement as reported data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>period</code> <code>str</code> Period of the balance sheet statement as reported data. Can be \"annual\" or \"quarter\". <code>limit</code> <code>int</code> Maximum number of results to return. <code>download</code> <code>bool</code> Whether to download the data as a CSV file. <code>filename</code> <code>str</code> Name of the CSV file to save the data, if download is True. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of balance sheet statement as reported data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_cash_flow_statement_as_reported","title":"Method: async_cash_flow_statement_as_reported","text":"<pre><code>def async_cash_flow_statement_as_reported(\n            symbol: str,\n            period: str = \"annual\",\n            limit: int = DEFAULT_LIMIT,\n            download: bool = False,\n            filename: str = \"cash_flow_statement_as_reported.csv\"\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch cash flow statement as reported data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>period</code> <code>str</code> Period of the cash flow statement as reported data. Can be \"annual\" or \"quarter\". <code>limit</code> <code>int</code> Maximum number of results to return. <code>download</code> <code>bool</code> Whether to download the data as a CSV file. <code>filename</code> <code>str</code> Name of the CSV file to save the data, if download is True. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of cash flow statement as reported data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_financial_statement_full_as_reported","title":"Method: async_financial_statement_full_as_reported","text":"<pre><code>def async_financial_statement_full_as_reported(\n            symbol: str,\n            period: str = \"annual\"\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch financial statement full as reported data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>period</code> <code>str</code> Period of the financial statement full as reported data. Can be \"annual\" or \"quarter\". <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of financial statement full as reported data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_financial_ratios_ttm","title":"Method: async_financial_ratios_ttm","text":"<pre><code>def async_financial_ratios_ttm(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch financial ratios TTM (trailing twelve months) data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of financial ratios TTM data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_financial_ratios","title":"Method: async_financial_ratios","text":"<pre><code>def async_financial_ratios(\n            symbol: str,\n            period: str = \"annual\",\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch financial ratios data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>period</code> <code>str</code> Period of the financial ratios data. Can be \"annual\" or \"quarter\". <code>limit</code> <code>int</code> Maximum number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of financial ratios data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_enterprise_values","title":"Method: async_enterprise_values","text":"<pre><code>def async_enterprise_values(\n            symbol: str,\n            period: str = \"annual\",\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch enterprise values data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>period</code> <code>str</code> Period of the enterprise values data. Can be \"annual\" or \"quarter\". <code>limit</code> <code>int</code> Maximum number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of enterprise values data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_key_metrics_ttm","title":"Method: async_key_metrics_ttm","text":"<pre><code>def async_key_metrics_ttm(\n            symbol: str,\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch key metrics TTM (trailing twelve months) data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>limit</code> <code>int</code> Maximum number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of key metrics TTM data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_key_metrics","title":"Method: async_key_metrics","text":"<pre><code>def async_key_metrics(\n            symbol: str,\n            period: str = \"annual\",\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch key metrics data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>period</code> <code>str</code> Period of the key metrics data. Can be \"annual\" or \"quarter\". <code>limit</code> <code>int</code> Maximum number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of key metrics data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_financial_growth","title":"Method: async_financial_growth","text":"<pre><code>def async_financial_growth(\n            symbol: str,\n            period: str = \"annual\",\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch financial growth data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>period</code> <code>str</code> Period of the financial growth data. Can be \"annual\" or \"quarter\". <code>limit</code> <code>int</code> Maximum number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of financial growth data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_rating","title":"Method: async_rating","text":"<pre><code>def async_rating(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch rating data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of rating data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_historical_rating","title":"Method: async_historical_rating","text":"<pre><code>def async_historical_rating(\n            symbol: str,\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch historical rating data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>limit</code> <code>int</code> Maximum number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of historical rating data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_discounted_cash_flow","title":"Method: async_discounted_cash_flow","text":"<pre><code>def async_discounted_cash_flow(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch discounted cash flow data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of discounted cash flow data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_historical_discounted_cash_flow","title":"Method: async_historical_discounted_cash_flow","text":"<pre><code>def async_historical_discounted_cash_flow(\n            symbol: str,\n            period: str = \"annual\",\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch historical discounted cash flow data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>period</code> <code>str</code> Period of the historical discounted cash flow data. Can be \"annual\" or \"quarter\". <code>limit</code> <code>int</code> Maximum number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of historical discounted cash flow data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_historical_daily_discounted_cash_flow","title":"Method: async_historical_daily_discounted_cash_flow","text":"<pre><code>def async_historical_daily_discounted_cash_flow(\n            symbol: str,\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch historical daily discounted cash flow data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>limit</code> <code>int</code> Maximum number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of historical daily discounted cash flow data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_market_capitalization","title":"Method: async_market_capitalization","text":"<pre><code>def async_market_capitalization(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch market capitalization data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of market capitalization data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_historical_market_capitalization","title":"Method: async_historical_market_capitalization","text":"<pre><code>def async_historical_market_capitalization(\n            symbol: str,\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch historical market capitalization data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol. <code>limit</code> <code>int</code> Maximum number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of historical market capitalization data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_symbols_list","title":"Method: async_symbols_list","text":"<pre><code>def async_symbols_list() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of stock symbols.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of stock symbols data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_etf_list","title":"Method: async_etf_list","text":"<pre><code>def async_etf_list() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of ETFs.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of ETF data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_available_traded_list","title":"Method: async_available_traded_list","text":"<pre><code>def async_available_traded_list() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of available traded symbols.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of available traded symbols data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_stock_screener","title":"Method: async_stock_screener","text":"<pre><code>def async_stock_screener(\n            market_cap_more_than: Optional[Union[float,\n            int]] = None,\n            market_cap_lower_than: Optional[Union[float,\n            int]] = None,\n            beta_more_than: Optional[Union[float,\n            int]] = None,\n            beta_lower_than: Optional[Union[float,\n            int]] = None,\n            volume_more_than: Optional[Union[float,\n            int]] = None,\n            volume_lower_than: Optional[Union[float,\n            int]] = None,\n            dividend_more_than: Optional[Union[float,\n            int]] = None,\n            dividend_lower_than: Optional[Union[float,\n            int]] = None,\n            price_more_than: Optional[Union[float,\n            int]] = None,\n            price_lower_than: Optional[Union[float,\n            int]] = None,\n            is_etf: Optional[bool] = None,\n            is_actively_trading: Optional[bool] = None,\n            sector: Optional[str] = None,\n            industry: Optional[str] = None,\n            country: Optional[str] = None,\n            exchange: Optional[Union[str,\n            List[str]]] = None,\n            limit: int = DEFAULT_LIMIT,\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch stock screener data based on various filters. Parameters:</p> Name Type Description <code>market_cap_more_than</code> <code>Optional[Union[float, int]]</code> Minimum market capitalization. <code>market_cap_lower_than</code> <code>Optional[Union[float, int]]</code> Maximum market capitalization. <code>beta_more_than</code> <code>Optional[Union[float, int]]</code> Minimum beta value. <code>beta_lower_than</code> <code>Optional[Union[float, int]]</code> Maximum beta value. <code>volume_more_than</code> <code>Optional[Union[float, int]]</code> Minimum trading volume. <code>volume_lower_than</code> <code>Optional[Union[float, int]]</code> Maximum trading volume. <code>dividend_more_than</code> <code>Optional[Union[float, int]]</code> Minimum dividend. <code>dividend_lower_than</code> <code>Optional[Union[float, int]]</code> Maximum dividend. <code>price_more_than</code> <code>Optional[Union[float, int]]</code> Minimum stock price. <code>price_lower_than</code> <code>Optional[Union[float, int]]</code> Maximum stock price. <code>is_etf</code> <code>Optional[bool]</code> Filter for ETFs. <code>is_actively_trading</code> <code>Optional[bool]</code> Filter for actively trading stocks. <code>sector</code> <code>Optional[str]</code> Filter by sector. <code>industry</code> <code>Optional[str]</code> Filter by industry. <code>country</code> <code>Optional[str]</code> Filter by country. <code>exchange</code> <code>Optional[Union[str, List[str]]]</code> Filter by exchange(s). <code>limit</code> <code>int</code> Number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of stock screener data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_delisted_companies","title":"Method: async_delisted_companies","text":"<pre><code>def async_delisted_companies(\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of delisted companies. Parameters:</p> Name Type Description <code>limit</code> <code>int</code> Number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of delisted companies data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_stock_news","title":"Method: async_stock_news","text":"<pre><code>def async_stock_news(\n            tickers: Optional[Union[str,\n            List[str]]] = None,\n            limit: int = DEFAULT_LIMIT,\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch stock news for given ticker(s). Parameters:</p> Name Type Description <code>tickers</code> <code>Optional[Union[str, List[str]]]</code> Ticker symbol(s) to fetch news for. <code>limit</code> <code>int</code> Number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of stock news data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_earnings_surprises","title":"Method: async_earnings_surprises","text":"<pre><code>def async_earnings_surprises(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch earnings surprises data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch earnings surprises data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of earnings surprises data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_sec_filings","title":"Method: async_sec_filings","text":"<pre><code>def async_sec_filings(\n            symbol: str,\n            filing_type: str = \"\",\n            limit: int = DEFAULT_LIMIT,\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch SEC filings for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch SEC filings for. <code>filing_type</code> <code>str</code> Type of SEC filing to filter by. <code>limit</code> <code>int</code> Number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of SEC filings data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_press_releases","title":"Method: async_press_releases","text":"<pre><code>def async_press_releases(\n            symbol: str,\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch press releases for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch press releases for. <code>limit</code> <code>int</code> Number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of press releases data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_stock_peers","title":"Method: async_stock_peers","text":"<pre><code>def async_stock_peers(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch stock peers data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch peers data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of stock peers data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_analyst_estimates","title":"Method: async_analyst_estimates","text":"<pre><code>def async_analyst_estimates(\n            symbol: str,\n            period: str = \"annual\",\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch analyst estimates data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch analyst estimates for. <code>period</code> <code>str</code> Period for analyst estimates (annual or quarterly). <code>limit</code> <code>int</code> Number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of analyst estimates data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_available_cryptocurrencies","title":"Method: async_available_cryptocurrencies","text":"<pre><code>def async_available_cryptocurrencies() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of available cryptocurrencies.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of available cryptocurrencies data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_cryptocurrencies_list","title":"Method: async_cryptocurrencies_list","text":"<pre><code>def async_cryptocurrencies_list() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of cryptocurrencies.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of cryptocurrencies data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_available_etfs","title":"Method: async_available_etfs","text":"<pre><code>def async_available_etfs() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of available ETFs.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of available ETFs data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_etf_price_realtime","title":"Method: async_etf_price_realtime","text":"<pre><code>def async_etf_price_realtime() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch real-time ETF price data.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of real-time ETF price data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_etf_info","title":"Method: async_etf_info","text":"<pre><code>def async_etf_info(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch ETF information for a given symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> ETF symbol to fetch information for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of ETF information data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_available_euronext","title":"Method: async_available_euronext","text":"<pre><code>def async_available_euronext() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of available Euronext symbols.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of available Euronext symbols data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_euronext_list","title":"Method: async_euronext_list","text":"<pre><code>def async_euronext_list() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of Euronext symbols.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of Euronext symbols data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_forex","title":"Method: async_forex","text":"<pre><code>def async_forex() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch forex data.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of forex data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_forex_list","title":"Method: async_forex_list","text":"<pre><code>def async_forex_list() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of forex symbols.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of forex symbols data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_available_forex","title":"Method: async_available_forex","text":"<pre><code>def async_available_forex() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of available forex currency pairs.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of available forex currency pairs data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_quote","title":"Method: async_quote","text":"<pre><code>def async_quote(\n            symbol: Union[str,\n            List[str]]\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch quote data for a given symbol or list of symbols. Parameters:</p> Name Type Description <code>symbol</code> <code>Union[str, List[str]]</code> Stock symbol or list of symbols to fetch quote data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of quote data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_historical_chart","title":"Method: async_historical_chart","text":"<pre><code>def async_historical_chart(\n            symbol: str,\n            time_delta: str,\n            from_date: str,\n            to_date: str,\n            time_series: str = \"line\",\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch historical chart data for a given symbol and time period. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch historical chart data for. <code>time_delta</code> <code>str</code> Time delta (e.g., \"1min\", \"5min\", \"1hour\", \"1day\", \"1week\", \"1month\"). <code>from_date</code> <code>str</code> Start date for the historical data (YYYY-MM-DD format). <code>to_date</code> <code>str</code> End date for the historical data (YYYY-MM-DD format). <code>time_series</code> <code>str</code> Time series type (e.g., \"line\", \"compact\", \"full\"). <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of historical chart data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_historical_price_full","title":"Method: async_historical_price_full","text":"<pre><code>def async_historical_price_full(\n            symbol: Union[str,\n            List[str]],\n            from_date: Optional[str] = None,\n            to_date: Optional[str] = None,\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch historical price data for a given symbol or list of symbols. Parameters:</p> Name Type Description <code>symbol</code> <code>Union[str, List[str]]</code> Stock symbol or list of symbols to fetch historical price data for. <code>from_date</code> <code>Optional[str]</code> Start date for the historical data (YYYY-MM-DD format). <code>to_date</code> <code>Optional[str]</code> End date for the historical data (YYYY-MM-DD format). <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of historical price data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_quote_short","title":"Method: async_quote_short","text":"<pre><code>def async_quote_short(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch short quote data for a given symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch short quote data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of short quote data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_exchange_realtime","title":"Method: async_exchange_realtime","text":"<pre><code>def async_exchange_realtime(\n            exchange: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch real-time exchange data for a given exchange. Parameters:</p> Name Type Description <code>exchange</code> <code>str</code> Exchange to fetch real-time data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of real-time exchange data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_historical_stock_dividend","title":"Method: async_historical_stock_dividend","text":"<pre><code>def async_historical_stock_dividend(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch historical stock dividend data for a given symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch historical dividend data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of historical stock dividend data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_historical_stock_split","title":"Method: async_historical_stock_split","text":"<pre><code>def async_historical_stock_split(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch historical stock split data for a given symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch historical split data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of historical stock split data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_historical_survivorship_bias_free_eod","title":"Method: async_historical_survivorship_bias_free_eod","text":"<pre><code>def async_historical_survivorship_bias_free_eod(\n            symbol: str,\n            date: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch historical survivorship bias-free EOD data for a given symbol and date. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch historical survivorship bias-free EOD data for. <code>date</code> <code>str</code> Date for the historical data (YYYY-MM-DD format). <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of historical survivorship bias-free EOD data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_technical_indicators","title":"Method: async_technical_indicators","text":"<pre><code>def async_technical_indicators(\n            symbol: str,\n            period: int = 10,\n            statistics_type: str = \"SMA\",\n            time_delta: str = \"daily\",\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch technical indicators data for a given symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch technical indicators for. <code>period</code> <code>int</code> Period for the technical indicator calculation. <code>statistics_type</code> <code>str</code> Type of technical indicator (e.g., \"SMA\", \"EMA\", \"RSI\", \"STOCH\"). <code>time_delta</code> <code>str</code> Time delta (e.g., \"1min\", \"5min\", \"1hour\", \"1day\", \"1week\", \"1month\"). <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of technical indicators data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_available_tsx","title":"Method: async_available_tsx","text":"<pre><code>def async_available_tsx() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of available TSX symbols.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of available TSX symbols data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_tsx_list","title":"Method: async_tsx_list","text":"<pre><code>def async_tsx_list() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of TSX symbols.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of TSX symbols data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_insider_trading","title":"Method: async_insider_trading","text":"<pre><code>def async_insider_trading(\n            symbol: Optional[str] = None,\n            reporting_cik: Optional[int] = None,\n            company_cik: Optional[int] = None,\n            limit: int = DEFAULT_LIMIT,\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch insider trading data. Parameters:</p> Name Type Description <code>symbol</code> <code>Optional[str]</code> Stock symbol to fetch insider trading data for. <code>reporting_cik</code> <code>Optional[int]</code> Reporting CIK to fetch insider trading data for. <code>company_cik</code> <code>Optional[int]</code> Company CIK to fetch insider trading data for. <code>limit</code> <code>int</code> Number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of insider trading data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_mapper_cik_name","title":"Method: async_mapper_cik_name","text":"<pre><code>def async_mapper_cik_name(\n            name: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch CIK mapper data for a given name. Parameters:</p> Name Type Description <code>name</code> <code>str</code> Name to fetch CIK mapper data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of CIK mapper data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_mapper_cik_company","title":"Method: async_mapper_cik_company","text":"<pre><code>def async_mapper_cik_company(\n            ticker: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch CIK mapper data for a given company ticker. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> Ticker symbol to fetch CIK mapper data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of CIK mapper data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_insider_trading_rss_feed","title":"Method: async_insider_trading_rss_feed","text":"<pre><code>def async_insider_trading_rss_feed(\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch insider trading RSS feed data. Parameters:</p> Name Type Description <code>limit</code> <code>int</code> Number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of insider trading RSS feed data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_institutional_holders","title":"Method: async_institutional_holders","text":"<pre><code>def async_institutional_holders(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch institutional holders data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch institutional holders data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of institutional holders data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_mutual_fund_holders","title":"Method: async_mutual_fund_holders","text":"<pre><code>def async_mutual_fund_holders(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch mutual fund holders data for a given stock symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch mutual fund holders data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of mutual fund holders data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_etf_holders","title":"Method: async_etf_holders","text":"<pre><code>def async_etf_holders(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch ETF holders data for a given ETF symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> ETF symbol to fetch holders data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of ETF holders data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_etf_sector_weightings","title":"Method: async_etf_sector_weightings","text":"<pre><code>def async_etf_sector_weightings(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch ETF sector weightings data for a given ETF symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> ETF symbol to fetch sector weightings data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of ETF sector weightings data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_etf_country_weightings","title":"Method: async_etf_country_weightings","text":"<pre><code>def async_etf_country_weightings(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch ETF country weightings data for a given ETF symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> ETF symbol to fetch country weightings data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of ETF country weightings data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_sec_rss_feeds","title":"Method: async_sec_rss_feeds","text":"<pre><code>def async_sec_rss_feeds(\n            limit: int = DEFAULT_LIMIT,\n            download: bool = False,\n            filename: str = \"sec_rss_feeds.csv\",\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch SEC RSS feeds data. Parameters:</p> Name Type Description <code>limit</code> <code>int</code> Number of results to return. <code>download</code> <code>bool</code> Whether to download the data as a CSV file. <code>filename</code> <code>str</code> Filename to save the CSV file as. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of SEC RSS feeds data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_cik_list","title":"Method: async_cik_list","text":"<pre><code>def async_cik_list() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of CIK identifiers.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of CIK identifier data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_cik_search","title":"Method: async_cik_search","text":"<pre><code>def async_cik_search(\n            name: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Search for CIK identifiers by company name. Parameters:</p> Name Type Description <code>name</code> <code>str</code> Company name to search for CIK identifiers. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of CIK identifier data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_cik","title":"Method: async_cik","text":"<pre><code>def async_cik(\n            cik_id: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch data for a given CIK identifier. Parameters:</p> Name Type Description <code>cik_id</code> <code>str</code> CIK identifier to fetch data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of CIK data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_form_13f","title":"Method: async_form_13f","text":"<pre><code>def async_form_13f(\n            cik_id: str,\n            date: Optional[str] = None\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch Form 13F data for a given CIK identifier. Parameters:</p> Name Type Description <code>cik_id</code> <code>str</code> CIK identifier to fetch Form 13F data for. <code>date</code> <code>Optional[str]</code> Date to filter the Form 13F data (YYYY-MM-DD format). <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of Form 13F data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_cusip","title":"Method: async_cusip","text":"<pre><code>def async_cusip(\n            cik_id: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch CUSIP data for a given CIK identifier. Parameters:</p> Name Type Description <code>cik_id</code> <code>str</code> CIK identifier to fetch CUSIP data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of CUSIP data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_indexes","title":"Method: async_indexes","text":"<pre><code>def async_indexes() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of market indexes.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of market indexes data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_sp500_constituent","title":"Method: async_sp500_constituent","text":"<pre><code>def async_sp500_constituent(\n            download: bool = False,\n            filename: str = \"sp500_constituents.csv\",\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch S&amp;P 500 constituents data. Parameters:</p> Name Type Description <code>download</code> <code>bool</code> Whether to download the data as a CSV file. <code>filename</code> <code>str</code> Filename to save the CSV file as. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of S&amp;P 500 constituents data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_historical_sp500_constituent","title":"Method: async_historical_sp500_constituent","text":"<pre><code>def async_historical_sp500_constituent() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch historical S&amp;P 500 constituents data.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of historical S&amp;P 500 constituents data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_nasdaq_constituent","title":"Method: async_nasdaq_constituent","text":"<pre><code>def async_nasdaq_constituent(\n            download: bool = False,\n            filename: str = \"nasdaq_constituents.csv\",\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch NASDAQ constituents data. Parameters:</p> Name Type Description <code>download</code> <code>bool</code> Whether to download the data as a CSV file. <code>filename</code> <code>str</code> Filename to save the CSV file as. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of NASDAQ constituents data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_historical_nasdaq_constituent","title":"Method: async_historical_nasdaq_constituent","text":"<pre><code>def async_historical_nasdaq_constituent() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch historical NASDAQ constituents data.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of historical NASDAQ constituents data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_dowjones_constituent","title":"Method: async_dowjones_constituent","text":"<pre><code>def async_dowjones_constituent(\n            download: bool = False,\n            filename: str = \"dowjones_constituents.csv\",\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch Dow Jones constituents data. Parameters:</p> Name Type Description <code>download</code> <code>bool</code> Whether to download the data as a CSV file. <code>filename</code> <code>str</code> Filename to save the CSV file as. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of Dow Jones constituents data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_historical_dowjones_constituent","title":"Method: async_historical_dowjones_constituent","text":"<pre><code>def async_historical_dowjones_constituent() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch historical Dow Jones constituents data.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of historical Dow Jones constituents data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_available_indexes","title":"Method: async_available_indexes","text":"<pre><code>def async_available_indexes() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of available market indexes.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of available market indexes data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_available_mutual_funds","title":"Method: async_available_mutual_funds","text":"<pre><code>def async_available_mutual_funds() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of available mutual funds.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of available mutual funds data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_mutual_fund_list","title":"Method: async_mutual_fund_list","text":"<pre><code>def async_mutual_fund_list() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of mutual funds.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of mutual funds data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_senate_trading_rss","title":"Method: async_senate_trading_rss","text":"<pre><code>def async_senate_trading_rss(\n            page: int = 0\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch Senate trading RSS feed data. Parameters:</p> Name Type Description <code>page</code> <code>int</code> Page number for the RSS feed data. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of Senate trading RSS feed data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_senate_trading_symbol","title":"Method: async_senate_trading_symbol","text":"<pre><code>def async_senate_trading_symbol(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch Senate trading data for a given symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch Senate trading data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of Senate trading data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_senate_disclosure_rss","title":"Method: async_senate_disclosure_rss","text":"<pre><code>def async_senate_disclosure_rss(\n            page: int = 0\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch Senate disclosure RSS feed data. Parameters:</p> Name Type Description <code>page</code> <code>int</code> Page number for the RSS feed data. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of Senate disclosure RSS feed data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_senate_disclosure_symbol","title":"Method: async_senate_disclosure_symbol","text":"<pre><code>def async_senate_disclosure_symbol(\n            symbol: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch Senate disclosure data for a given symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch Senate disclosure data for. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of Senate disclosure data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_shares_float","title":"Method: async_shares_float","text":"<pre><code>def async_shares_float(\n            symbol: str,\n            all: bool = False\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch shares float data for a given symbol or for all symbols. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch shares float data for. <code>all</code> <code>bool</code> Whether to fetch shares float data for all symbols. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of shares float data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_actives","title":"Method: async_actives","text":"<pre><code>def async_actives() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch data for actively traded stocks.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of actively traded stocks data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_gainers","title":"Method: async_gainers","text":"<pre><code>def async_gainers() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch data for top gainers in the stock market.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of top gainers data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_losers","title":"Method: async_losers","text":"<pre><code>def async_losers() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch data for top losers in the stock market.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of top losers data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_market_hours","title":"Method: async_market_hours","text":"<pre><code>def async_market_hours() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch market hours data.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of market hours data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_sectors_performance","title":"Method: async_sectors_performance","text":"<pre><code>def async_sectors_performance(\n            limit: int = DEFAULT_LIMIT\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch sectors performance data. Parameters:</p> Name Type Description <code>limit</code> <code>int</code> Number of results to return. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of sectors performance data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_commitment_of_traders_report_list","title":"Method: async_commitment_of_traders_report_list","text":"<pre><code>def async_commitment_of_traders_report_list() -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch list of available Commitment of Traders reports.</p> <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of Commitment of Traders reports data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_commitment_of_traders_report","title":"Method: async_commitment_of_traders_report","text":"<pre><code>def async_commitment_of_traders_report(\n            symbol: str,\n            from_date: str,\n            to_date: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch Commitment of Traders report data. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch Commitment of Traders report data for. <code>from_date</code> <code>str</code> Start date for the Commitment of Traders report data (YYYY-MM-DD format). <code>to_date</code> <code>str</code> End date for the Commitment of Traders report data (YYYY-MM-DD format). <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of Commitment of Traders report data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_commitment_of_traders_report_analysis","title":"Method: async_commitment_of_traders_report_analysis","text":"<pre><code>def async_commitment_of_traders_report_analysis(\n            symbol: str,\n            from_date: str,\n            to_date: str\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch Commitment of Traders report analysis data. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch Commitment of Traders report analysis data for. <code>from_date</code> <code>str</code> Start date for the Commitment of Traders report analysis data (YYYY-MM-DD format). <code>to_date</code> <code>str</code> End date for the Commitment of Traders report analysis data (YYYY-MM-DD format). <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of Commitment of Traders report analysis data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_institutional_symbol_ownership","title":"Method: async_institutional_symbol_ownership","text":"<pre><code>def async_institutional_symbol_ownership(\n            symbol: str,\n            limit: int,\n            include_current_quarter: bool = False\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch institutional symbol ownership data. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch institutional ownership data for. <code>limit</code> <code>int</code> Number of results to return. <code>include_current_quarter</code> <code>bool</code> Whether to include current quarter data. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of institutional symbol ownership data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_earning_call_transcript","title":"Method: async_earning_call_transcript","text":"<pre><code>def async_earning_call_transcript(\n            symbol: str,\n            year: int,\n            quarter: int\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch earning call transcript data for a given symbol, year, and quarter. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch earning call transcript data for. <code>year</code> <code>int</code> Year for the earning call transcript. <code>quarter</code> <code>int</code> Quarter for the earning call transcript. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of earning call transcript data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_batch_earning_call_transcript","title":"Method: async_batch_earning_call_transcript","text":"<pre><code>def async_batch_earning_call_transcript(\n            symbol: str,\n            year: int\n        ) -&gt; Optional[List[Dict]]\n</code></pre> <p>Fetch batch earning call transcript data for a given symbol and year. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch batch earning call transcript data for. <code>year</code> <code>int</code> Year for the batch earning call transcript. <p>Returns:</p> Type Description <code>Optional[List[Dict]]</code> List of batch earning call transcript data dictionaries, or None if an error occurs."},{"location":"connectors/fmp_connector/#method-async_earning_call_transcripts_available_dates","title":"Method: async_earning_call_transcripts_available_dates","text":"<pre><code>def async_earning_call_transcripts_available_dates(\n            symbol: str\n        ) -&gt; Optional[List[List]]\n</code></pre> <p>Fetch available dates for earning call transcripts for a given symbol. Parameters:</p> Name Type Description <code>symbol</code> <code>str</code> Stock symbol to fetch available earning call transcript dates for. <p>Returns:</p> Type Description <code>Optional[List[List]]</code> List of available earning call transcript dates, or None if an error occurs."},{"location":"connectors/fred_connector/","title":"Module Information","text":"<p>Description: Fred Data Connector of QuantJourney Framework </p> <p>This utility class facilitates the fetching of financial and economic data from the Federal Reserve Economic Data (FRED) API for use in quantitative analysis. Leveraging FRED's extensive repository, it supports the retrieval of various datasets including macroeconomic indicators, interest rates, employment data, and more, making it a valuable tool for data-driven decision-making in finance and economics.</p> <p>The FRED Data Connector is designed with async capabilities to enhance performance when dealing with large volumes of data or fetching data from multiple series concurrently. It abstracts the complexity of asynchronous programming and the FRED API, providing a straightforward interface for data retrieval.</p> <p>Features: - Support for fetching a wide range of financial and economic datasets from FRED. - Asynchronous data retrieval for improved performance and efficiency. - Easy integration with financial analysis and quantitative research projects. - Flexible date range specification for historical data analysis. - Utilizes the official FRED API, requiring an API key for access.</p> <p>Author: jpolec</p> <p>Date: 18-03-2024</p>"},{"location":"connectors/fred_connector/#class-fredconnector","title":"Class: FredConnector()","text":""},{"location":"connectors/fred_connector/#method-search","title":"Method: search","text":"<pre><code>def search(\n            search_string: str\n        ) -&gt; List[Dict]\n</code></pre> <p>Search the FRED API for a given search string.</p> <p>Examples:</p> <pre><code>search_results = dc.fred.search(\"GDP\")\nsearch_results = dc.fred.search(\"unemployment rate\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>search_string</code> <code>str</code> The string to search the FRED API for. <p>Returns:</p> Type Description <code>List[Dict]</code> A list of dictionaries containing the search results."},{"location":"connectors/fred_connector/#method-get_series","title":"Method: get_series","text":"<pre><code>def get_series(\n            search_id: str,\n            observation_start: Optional[str] = None,\n            observation_end: Optional[str] = None\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get series data between a start and end date.</p> <p>Examples:</p> <pre><code>series_data = dc.fred.get_series(\"GDP\", observation_start=\"2020-01-01\", observation_end=\"2020-12-31\")\nseries_data = dc.fred.get_series(\"unemployment rate\", observation_start=\"2020-01-01\", observation_end=\"2020-12-31\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>search_id</code> <code>str</code> The ID of the series to fetch. <code>observation_start</code> <code>Optional[str]</code> The start date for the data in 'YYYY-MM-DD' format. Defaults to None. <code>observation_end</code> <code>Optional[str]</code> The end date for the data in 'YYYY-MM-DD' format. Defaults to None. <p>Returns:</p> Type Description <code>pd.DataFrame</code> The series data."},{"location":"connectors/fred_connector/#method-get_series_as_of_date","title":"Method: get_series_as_of_date","text":"<pre><code>def get_series_as_of_date(\n            search_id: str,\n            date: str\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get series data for a specific date.</p> <p>Examples:</p> <pre><code>series_data = dc.fred.get_series_as_of_date(\"GDP\", \"2023-04-01\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>search_id</code> <code>str</code> The ID of the series to fetch. <code>date</code> <code>str</code> The date for the data in 'YYYY-MM-DD' format. <p>Returns:</p> Type Description <code>pd.DataFrame</code> The series data for the specified date."},{"location":"connectors/fred_connector/#method-get_series_info","title":"Method: get_series_info","text":"<pre><code>def get_series_info(\n            search_id: str\n        ) -&gt; dict\n</code></pre> <p>Get information about a series.</p> <p>Examples:</p> <pre><code>series_info = dc.fred.get_series_info(\"GDP\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>search_id</code> <code>str</code> The ID of the series to fetch. <p>Returns:</p> Type Description <code>dict</code> Information about the series."},{"location":"connectors/fred_connector/#method-get_release_series","title":"Method: get_release_series","text":"<pre><code>def get_release_series(\n            release_id: str,\n            limit: int = 1000,\n            order_by: str = 'popularity'\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get series data for a specific release.</p> <p>Examples:</p> <pre><code>release_series = dc.fred.get_release_series(\"BACDINA066MNFRBNY\", limit=10, order_by=\"popularity\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>release_id</code> <code>str</code> The ID of the release to fetch. <code>limit</code> <code>int</code> The maximum number of series to return. Defaults to 1000. <code>order_by</code> <code>str</code> The order of the series. Can be \"popularity\" or \"series_id\". Defaults to \"popularity\". <p>Returns:</p> Type Description <code>pd.DataFrame</code> The series data for the specified release."},{"location":"connectors/fred_connector/#method-get_series_first_release","title":"Method: get_series_first_release","text":"<pre><code>def get_series_first_release(\n            search_id: str\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get the first release of a series.</p> <p>Examples:</p> <pre><code>first_release = dc.fred.get_series_first_release(\"GDP\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>search_id</code> <code>str</code> The ID of the series to fetch. <p>Returns:</p> Type Description <code>pd.DataFrame</code> The first release of the series."},{"location":"connectors/fred_connector/#method-get_series_latest_release","title":"Method: get_series_latest_release","text":"<pre><code>def get_series_latest_release(\n            search_id: str\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get the latest release of a series.</p> <p>Examples:</p> <pre><code>latest_release = dc.fred.get_series_latest_release(\"GDP\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>search_id</code> <code>str</code> The ID of the series to fetch. <p>Returns:</p> Type Description <code>pd.DataFrame</code> The latest release of the series."},{"location":"connectors/fred_connector/#method-get_series_all_releases","title":"Method: get_series_all_releases","text":"<pre><code>def get_series_all_releases(\n            search_id: str\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get all releases of a series.</p> <p>Examples:</p> <pre><code>all_releases = dc.fred.get_series_all_releases(\"GDP\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>search_id</code> <code>str</code> The ID of the series to fetch. <p>Returns:</p> Type Description <code>pd.DataFrame</code> All releases of the series."},{"location":"connectors/oanda_connector/","title":"Module Information","text":"<p>Description: Oanda Data Connector of QuantJourney Framework</p> <p>This script contains the OandaConnector class, which is used to interact with the Oanda API. The class provides methods to fetch account information, instruments, and historical OHLCV data.</p> <p>Source: https://oanda-api-v20.readthedocs.io/ https://developer.oanda.com/rest-live-v20/introduction/</p> <p>Author: jpolec</p> <p>Date: 18-03-2024</p>"},{"location":"connectors/oanda_connector/#class-oandaconnector","title":"Class: OandaConnector()","text":""},{"location":"connectors/oanda_connector/#method-get_account_summary","title":"Method: get_account_summary","text":"<pre><code>def get_account_summary() -&gt; Dict\n</code></pre> <p>Retrieve the summary for the Oanda account.</p> <p>Returns:</p> Type Description <code>Dict</code> The account summary."},{"location":"connectors/oanda_connector/#method-get_account_details","title":"Method: get_account_details","text":"<pre><code>def get_account_details() -&gt; Dict\n</code></pre> <p>Retrieve the details for the Oanda account.</p> <p>Returns:</p> Type Description <code>Dict</code> The account details."},{"location":"connectors/oanda_connector/#method-get_account_instruments","title":"Method: get_account_instruments","text":"<pre><code>def get_account_instruments() -&gt; Dict\n</code></pre> <p>Retrieve the instruments for the Oanda account.</p> <p>Returns:</p> Type Description <code>Dict</code> The account instruments."},{"location":"connectors/oanda_connector/#method-fetch_data","title":"Method: fetch_data","text":"<pre><code>def fetch_data(\n            url: str,\n            session\n        ) -&gt; Dict\n</code></pre> <p>Asynchronously fetch data from the Oanda API. Parameters:</p> Name Type Description <code>url</code> <code>str</code> The URL to fetch data from. <code>session</code> <code>None</code> The aiohttp ClientSession object. <p>Returns:</p> Type Description <code>Dict</code> The JSON response from the API."},{"location":"connectors/oanda_connector/#method-async_get_ohlcv","title":"Method: async_get_ohlcv","text":"<pre><code>def async_get_ohlcv(\n            tickers: List[str],\n            exchanges: List[str],\n            granularity: str,\n            period_starts: List[str],\n            period_ends: List[str]\n        ) -&gt; List[pd.DataFrame]\n</code></pre> <p>Asynchronously fetches OHLCV data from OANDA for a given list of tickers and exchanges. Parameters:</p> Name Type Description <code>tickers</code> <code>List[str]</code> List of stock tickers. <code>exchanges</code> <code>List[str]</code> List of stock exchanges corresponding to tickers. <code>granularity</code> <code>str</code> Time period ('5m', '15m', '30m', '1h', '1d'). <code>period_starts</code> <code>List[str]</code> List of start dates for each ticker's data retrieval period. <code>period_ends</code> <code>List[str]</code> List of end dates for each ticker's data retrieval period. <p>Returns:</p> Type Description <code>List[pd.DataFrame]</code> List of pandas DataFrames containing the historical stock data for each ticker."},{"location":"connectors/oanda_connector/#method-format_date","title":"Method: format_date","text":"<pre><code>def format_date(\n            series\n        ) -&gt; datetime.date\n</code></pre> <p>Format the date in the Oanda series data. Parameters:</p> Name Type Description <code>series</code> <code>str</code> The series data from Oanda. <p>Returns:</p> Type Description <code>datetime.date</code> The formatted date."},{"location":"connectors/oanda_connector/#method-get_ohlcv","title":"Method: get_ohlcv","text":"<pre><code>def get_ohlcv(\n            ticker: str,\n            exchange: str,\n            granularity: str,\n            period_start: str = \"\",\n            period_end: str = \"\",\n            period_days: int = 1000\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Get historical OHLCV data from OANDA. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker symbol. <code>exchange</code> <code>str</code> The stock exchange. <code>granularity</code> <code>str</code> Time period ('5m', '15m', '30m', '1h', '1d'). <code>period_start</code> <code>str</code> The start date for the historical data query. <code>period_end</code> <code>str</code> The end date for the historical data query. <code>period_days</code> <code>int</code> The number of days to fetch data for. <p>Returns:</p> Type Description <code>pd.DataFrame</code> A pandas DataFrame containing the historical stock data"},{"location":"connectors/oanda_connector/#method-get_cfd_leverage","title":"Method: get_cfd_leverage","text":"<pre><code>def get_cfd_leverage(\n            ticker\n        ) -&gt; float\n</code></pre> <p>Get the leverage factor for a given CFD instrument. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The CFD instrument ticker. <p>Returns:</p> Type Description <code>float</code> The leverage factor."},{"location":"connectors/oanda_connector/#method-get_cfd_marginrate","title":"Method: get_cfd_marginrate","text":"<pre><code>def get_cfd_marginrate(\n            ticker\n        ) -&gt; float\n</code></pre> <p>Get the margin rate for a given CFD instrument. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The CFD instrument ticker. <p>Returns:</p> Type Description <code>float</code> The margin rate."},{"location":"connectors/oanda_connector/#method-get_cfd_tickvalue","title":"Method: get_cfd_tickvalue","text":"<pre><code>def get_cfd_tickvalue(\n            ticker\n        ) -&gt; float\n</code></pre> <p>Get the tick value for a given CFD instrument. Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The CFD instrument ticker. <p>Returns:</p> Type Description <code>float</code> The tick value."},{"location":"connectors/quandl_connector/","title":"Module Information","text":"<p>Description: Quandl Data Connector of QuantJourney Framework</p> <p>This utility class facilitates the fetching of financial and economic data from Quandl for use in quantitative analysis.  Leveraging Quandl's vast repository, it supports the retrieval of various datasets including macroeconomic indicators, ETFs,  commodities, financial metrics, and more, making it a versatile tool for data-driven decision-making in finance.</p> <p>The Quandl Data Poller is designed with async capabilities to enhance performance when dealing with large volumes of data or  fetching data from multiple datasets concurrently. It abstracts the complexity of asynchronous programming and the Quandl API,  providing a straightforward interface for data retrieval.</p> <p>Features: - Support for fetching a wide range of financial and economic datasets from Quandl. - Asynchronous data retrieval for improved performance and efficiency. - Easy integration with financial analysis and quantitative trading strategies. - Flexible date range specification for historical data analysis. - Utilizes the official Quandl API, requiring an API key for access.</p> <p>Author: jpolec</p> <p>Date: 18-03-2024</p>"},{"location":"connectors/quandl_connector/#class-quandlconnector","title":"Class: QuandlConnector()","text":""},{"location":"connectors/quandl_connector/#method-async_get_quandl_data","title":"Method: async_get_quandl_data","text":"<pre><code>def async_get_quandl_data(\n            dataset_codes: List[str],\n            start_date: Optional[str] = None,\n            end_date: Optional[str] = None\n        ) -&gt; List[pd.DataFrame]\n</code></pre> <p>Fetches data from Quandl asynchronously for a given list of dataset codes. Parameters:</p> Name Type Description <code>dataset_codes</code> <code>List[str]</code> List of Quandl dataset codes. <code>start_date</code> <code>Optional[str]</code> Start date in 'YYYY-MM-DD' format. Defaults to None. <code>end_date</code> <code>Optional[str]</code> End date in 'YYYY-MM-DD' format. Defaults to None. <p>Returns:</p> Type Description <code>List[pd.DataFrame]</code> List of DataFrames containing the data for each dataset code."},{"location":"connectors/quandl_connector/#method-async_get_dataset_metadata","title":"Method: async_get_dataset_metadata","text":"<pre><code>def async_get_dataset_metadata(\n            dataset_code: str\n        ) -&gt; dict\n</code></pre> <p>Fetches metadata for a dataset from Quandl asynchronously. Parameters:</p> Name Type Description <code>dataset_code</code> <code>str</code> Quandl dataset code. <p>Returns:</p> Type Description <code>dict</code> Metadata for the dataset."},{"location":"connectors/quandl_connector/#method-async_search_datasets","title":"Method: async_search_datasets","text":"<pre><code>def async_search_datasets(\n            query: str\n        ) -&gt; List[dict]\n</code></pre> <p>Searches for datasets on Quandl asynchronously based on a query string. Parameters:</p> Name Type Description <code>query</code> <code>str</code> Query string to search for datasets. <p>Returns:</p> Type Description <code>List[dict]</code> List of datasets matching the search query."},{"location":"connectors/quandl_connector/#method-async_get_dataset_codes","title":"Method: async_get_dataset_codes","text":"<pre><code>def async_get_dataset_codes(\n            database_code: str\n        ) -&gt; List[str]\n</code></pre> <p>Fetches dataset codes for a Quandl database asynchronously. Parameters:</p> Name Type Description <code>database_code</code> <code>str</code> Quandl database code. <p>Returns:</p> Type Description <code>List[str]</code> List of dataset codes in the database."},{"location":"connectors/quandl_connector/#method-async_get_database_metadata","title":"Method: async_get_database_metadata","text":"<pre><code>def async_get_database_metadata(\n            database_code: str\n        ) -&gt; dict\n</code></pre> <p>Fetches metadata for a Quandl database asynchronously. Parameters:</p> Name Type Description <code>database_code</code> <code>str</code> Quandl database code. <p>Returns:</p> Type Description <code>dict</code> Metadata for the database."},{"location":"connectors/sec_connector/","title":"Module Information","text":"<p>Description: Sec Data Connector of QuantJourney Framework</p> <p>SEC Services</p> <ol> <li>EDGAR https://www.sec.gov/edgar/searchedgar/companysearch 1) python3 -m pip install sec-edgar-api (https://github.com/jadchaar/sec-edgar-api) 2) python3 -m pip install sec-api (https://sec-api.io/) 3) https://www.sec.gov/developer... Note: The SEC does not allow \"unclassified\" bots or automated tools to crawl the site. However, `solutions' can be found online, but we will not support them here under Fair Access protocls.</li> <li>SEC-API</li> </ol> <p>Author: jpolec</p> <p>Date: 18-03-2024</p>"},{"location":"connectors/sec_connector/#class-secconnector","title":"Class: SecConnector()","text":""},{"location":"connectors/sec_connector/#method-get_edgar_submissions","title":"Method: get_edgar_submissions","text":"<pre><code>def get_edgar_submissions(\n            cik: str\n        ) -&gt; list\n</code></pre> <p>Retrieve a list of submissions for a given CIK.</p> <p>Examples:</p> <pre><code>submissions = get_edgar_submissions(cik='0000320193')\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>cik</code> <code>str</code> Central Index Key of the company. <p>Returns:</p> Type Description <code>list</code> List of submission details."},{"location":"connectors/sec_connector/#method-get_edgar_company_facts","title":"Method: get_edgar_company_facts","text":"<pre><code>def get_edgar_company_facts(\n            cik: str\n        ) -&gt; dict\n</code></pre> <p>Retrieve company facts for a given CIK.</p> <p>Examples:</p> <pre><code>company_facts = get_edgar_company_facts(cik='0000320193')\n\n{'cik': 320193, 'entityName': 'Apple Inc.', 'facts': {'dei': {'EntityCommonStockSharesOutstanding':\n{'label': 'Entity Common Stock, Shares Outstanding', 'description': \"Indicate number of shares or\nother units outstanding of each of registrant's classes of capital or common stock or other ownership\ninterests, if and as stated on cover of related periodic report. Where multiple classes or units exist\ndefine each class/interest by adding class of stock items such as Common Class A [Member], Common Class B [Member]\nor Partnership Interest [Member] onto the Instrument [Domain] of the Entity Listings, Instrument.\",\n'units': {'shares': [{'end': '2009-06-27', 'val': 895816758, 'accn': '0001193125-09-153165', 'fy': 2009,\n'fp': 'Q3', 'form': '10-Q', 'filed': '2009-07-22', 'frame': 'CY2009Q2I'}, {'end': '2009-10-16',\n'val': 900678473, 'accn': '0001193125-09-214859', 'fy': 2009, 'fp': 'FY', 'form': '10-K', 'filed': '2009-10-27'},\n{'end': '2009-10-16', 'val': 900678473, 'accn': '0001193125-10-012091', 'fy': 2009, 'fp': 'FY', 'form': '10-K/A', 'filed':\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>cik</code> <code>str</code> Central Index Key of the company. <p>Returns:</p> Type Description <code>dict</code> Dictionary of company facts."},{"location":"connectors/sec_connector/#method-get_edgar_company_concept","title":"Method: get_edgar_company_concept","text":"<pre><code>def get_edgar_company_concept(\n            cik: str,\n            taxonomy: str = \"dei\",\n            tag: str = \"EntityPublicFloat\"\n        ) -&gt; dict\n</code></pre> <p>Retrieve company concept data for a given CIK.</p> <p>Examples:</p> <pre><code>company_concept = get_edgar_company_concept(cik='0000320193', taxonomy='dei', tag='EntityPublicFloat')\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>cik</code> <code>str</code> Central Index Key of the company. <code>taxonomy</code> <code>str, optional</code> Taxonomy for the concept data. Defaults to \"dei\". <code>tag</code> <code>str, optional</code> Tag for the concept data. Defaults to \"EntityPublicFloat\". <p>Returns:</p> Type Description <code>dict</code> Dictionary of company concept data."},{"location":"connectors/sec_connector/#method-get_edgar_frame","title":"Method: get_edgar_frame","text":"<pre><code>def get_edgar_frame(\n            taxonomy: str = \"us-gaap\",\n            tag: str = \"AccountsPayableCurrent\",\n            unit: str = \"USD\",\n            year: str = \"2022\",\n            quarter: int = 1\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Retrieve financial data for a given taxonomy, tag, and filing period.</p> <p>Examples:</p> <pre><code>financial_data = get_edgar_frame(taxonomy=\"us-gaap\", tag=\"AccountsPayableCurrent\", unit=\"USD\", year=\"2022\", quarter=1)\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>taxonomy</code> <code>str, optional</code> Taxonomy for the financial data. Defaults to \"us-gaap\". <code>tag</code> <code>str, optional</code> Tag for the financial data. Defaults to \"AccountsPayableCurrent\". <code>unit</code> <code>str, optional</code> Unit of the financial data. Defaults to \"USD\". <code>year</code> <code>str, optional</code> Year of the filing period. Defaults to \"2022\". <code>quarter</code> <code>int, optional</code> Quarter of the filing period. Defaults to 1. <p>Returns:</p> Type Description <code>pd.DataFrame</code> DataFrame of financial data."},{"location":"connectors/sec_connector/#method-calculate_sec13f_holding_changes","title":"Method: calculate_sec13f_holding_changes","text":"<pre><code>def calculate_sec13f_holding_changes(\n            df: pd.DataFrame,\n            start_date: str = '2021-03-31',\n            end_date: str = '2021-06-30'\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Calculate changes in holdings between two reporting periods.</p> <p>Examples:</p> <pre><code>holding_changes = calculate_sec13f_holding_changes(df, start_date='2021-03-31', end_date='2021-06-30')\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>df</code> <code>pd.DataFrame</code> DataFrame containing 13F holdings data. <code>start_date</code> <code>str</code> Start date of the comparison period in 'YYYY-MM-DD' format. <code>end_date</code> <code>str</code> End date of the comparison period in 'YYYY-MM-DD' format. <p>Returns:</p> Type Description <code>pd.DataFrame</code> DataFrame containing holding changes."},{"location":"connectors/sec_connector/#method-get_13f_filings","title":"Method: get_13f_filings","text":"<pre><code>def get_13f_filings(\n            cik: str,\n            start_date='2021-01-01'\n        ) -&gt; list\n</code></pre> <p>Fetch 13F filings from the SEC Edgar system. Parameters:</p> Name Type Description <code>cik</code> <code>str</code> Central Index Key of the company. <code>start_date</code> <code>str</code> Start date for fetching filings in 'YYYY-MM-DD' format. <p>Returns:</p> Type Description <code>list</code> List of 13F filings."},{"location":"connectors/sec_connector/#method-flatten_and_process_filings","title":"Method: flatten_and_process_filings","text":"<pre><code>def flatten_and_process_filings(\n            filings\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Flatten and process raw 13F filings into a structured pandas DataFrame.</p> <p>params: filings (list): List of 13F filings.</p> <p>returns: pd.DataFrame: DataFrame containing processed filings data.</p> <p>Returns:</p> Type Description"},{"location":"connectors/sec_connector/#method-analyze_investment_trends","title":"Method: analyze_investment_trends","text":"<pre><code>def analyze_investment_trends(\n            holding_changes\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Analyze investment trends from holding changes data.</p> <p>params: holding_changes (pd.DataFrame): DataFrame containing holding changes data.</p> <p>returns: pd.DataFrame: DataFrame containing investment trend analysis.</p> <p>Returns:</p> Type Description"},{"location":"connectors/sec_connector/#method-get_holdings_by_ticker","title":"Method: get_holdings_by_ticker","text":"<pre><code>def get_holdings_by_ticker(\n            ticker,\n            start_date='2021-01-01',\n            end_date='2021-06-30'\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Retrieve holdings information for a specific ticker across filings within the specified period.</p> <p>params:</p> <p>returns:</p> <p>Returns:</p> Type Description"},{"location":"connectors/sec_connector/#method-identify_new_holdings","title":"Method: identify_new_holdings","text":"<pre><code>def identify_new_holdings(\n            current_period,\n            previous_period\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Identify new holdings in the current period compared to the previous period.</p> <p>params: current_period: previous_period:</p> <p>returns:</p> <p>Returns:</p> Type Description"},{"location":"connectors/sec_connector/#method-track_disposed_holdings","title":"Method: track_disposed_holdings","text":"<pre><code>def track_disposed_holdings(\n            current_period,\n            previous_period\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Track holdings that were disposed of since the previous period.</p> <p>params: current_period: previous_period: returns:</p> <p>Returns:</p> Type Description"},{"location":"connectors/sec_connector/#method-analyze_sector_allocation","title":"Method: analyze_sector_allocation","text":"<pre><code>def analyze_sector_allocation(\n            filings\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Analyze sector allocation based on the current holdings in the filings.</p> <p>params: filings:</p> <p>returns:</p> <p>Returns:</p> Type Description"},{"location":"connectors/sec_connector/#method-generate_investment_report","title":"Method: generate_investment_report","text":"<pre><code>def generate_investment_report(\n            new_holdings,\n            disposed_holdings,\n            sector_allocation\n        ) -&gt; dict\n</code></pre> <p>Generate a comprehensive report of investment findings.</p> <p>params: new_holdings: disposed_holdings: sector_allocation:</p> <p>returns: dict: Comprehensive investment report.</p> <p>Returns:</p> Type Description"},{"location":"connectors/yf_connector/","title":"Module Information","text":"<p>Description: YFinance Connector of QuantJourney Framework</p> <p>This connector facilitates the fetching of historical stock data from Yahoo Finance. It uses the yfinance library to fetch historical OHLCV data for a list of stock tickers. And is optimized for asynchronous fetching of data for multiple tickers, with a concurrency limit.</p> <p>Attributes: semaphore (asyncio.Semaphore): A semaphore to control the concurrency limit of the requests.</p> <p>Parameters: MAX_RETRIES = 3 MAX_CONCURRENT_REQUESTS = 10  # Concurrency limit</p> <p>Author: jpolec</p> <p>Date: 18-03-2024</p>"},{"location":"connectors/yf_connector/#class-yfinanceconnector","title":"Class: YFinanceConnector()","text":""},{"location":"connectors/yf_connector/#method-async_get_ohlcv","title":"Method: async_get_ohlcv","text":"<pre><code>def async_get_ohlcv(\n            tickers: List[str],\n            exchanges: List[str],\n            period_starts: List[datetime],\n            period_ends: List[datetime],\n            granularity: str\n        ) -&gt; List[pd.DataFrame]\n</code></pre> <p>Get historical OHLCV data for a list of stock tickers asynchronously.</p> <p>Examples:</p> <pre><code>dfs = await async_get_ohlcv(\ntickers=[\"AAPL\", \"GOOGL\", \"MSFT\"],\nexchanges=[\"NAS\", \"NAS\", \"NAS\"],\n)\n\nTesting async_get_ohlcv with tickers: ['AAPL', 'GOOGL', 'MSFT', 'AMZN', 'FB', 'TSLA', 'NVDA', 'JPM', 'V', 'PYPL']\nDataFrame shape: (251, 6)\ndatetime        open        high         low       close  \\\n0 2022-01-03 05:00:00+00:00  175.597058  180.583650  175.478569  179.724564\n1 2022-01-04 05:00:00+00:00  180.336790  180.642895  176.870854  177.443573\n2 2022-01-05 05:00:00+00:00  177.354683  177.907649  172.447089  172.723572\n3 2022-01-06 05:00:00+00:00  170.531463  173.098822  169.484776  169.840256\n4 2022-01-07 05:00:00+00:00  170.719078  171.953382  168.882433  170.008118\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>tickers</code> <code>List[str]</code> A list of stock ticker symbols. <code>exchanges</code> <code>List[str]</code> A list of stock exchange symbols corresponding to each ticker. <code>period_starts</code> <code>List[datetime]</code> A list of start dates for the historical data query. <code>period_ends</code> <code>List[datetime]</code> A list of end dates for the historical data query. <code>granularity</code> <code>str</code> The granularity of the data ('1m', '2m', '5m', etc. up to '3mo'). <p>Returns:</p> Type Description <code>List[pd.DataFrame]</code> A list of pandas DataFrames containing the historical stock data for each ticker."},{"location":"connectors/yf_connector/#method-_run_with_semaphore","title":"Method: _run_with_semaphore","text":"<pre><code>def _run_with_semaphore(\n            func,\n            *args\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Runs a function with a semaphore to limit the concurrency of requests. Supportive function for async_get_ohlcv - used in SEMAPHORE (self.semaphore) context manager. So no more than MAX_CONCURRENT_REQUESTS requests are made at a time. Parameters:</p> Name Type Description <code>func</code> <code>None</code> The function to run. <code>args</code> <code>None</code> The arguments to pass to the function. <p>Returns:</p> Type Description <code>pd.DataFrame</code> The result of the function."},{"location":"connectors/yf_connector/#method-get_current_ohlcv_price","title":"Method: get_current_ohlcv_price","text":"<pre><code>def get_current_ohlcv_price(\n            ticker: str\n        ) -&gt; Optional[float]\n</code></pre> <p>Fetches the current price of a given stock ticker using Yahoo Finance.</p> <p>Examples:</p> <pre><code>current_price = get_current_ohlcv_price(\"AAPL\")\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker symbol. <p>Returns:</p> Type Description <code>Optional[float]</code> The current price of the stock, or None if the price is not available."},{"location":"connectors/yf_connector/#method-get_history","title":"Method: get_history","text":"<pre><code>def get_history(\n            ticker: str,\n            period_start: datetime,\n            period_end: datetime,\n            granularity: str,\n            tries: int = 0\n        ) -&gt; pd.DataFrame\n</code></pre> <p>Function to fetch historical data for a given stock ticker using Yahoo Finance's history function.</p> <p>Examples:</p> <pre><code>df = get_history(\"AAPL\", datetime(2022, 1, 1), datetime(2022, 12, 31), \"1d\")\n\nTesting get_history with ticker: AAPL\nDataFrame shape: (251, 6)\ndatetime        open        high         low       close  \\\n0 2022-01-03 05:00:00+00:00  175.597058  180.583650  175.478569  179.724564\n1 2022-01-04 05:00:00+00:00  180.336790  180.642895  176.870854  177.443573\n2 2022-01-05 05:00:00+00:00  177.354683  177.907649  172.447089  172.723572\n3 2022-01-06 05:00:00+00:00  170.531463  173.098822  169.484776  169.840256\n4 2022-01-07 05:00:00+00:00  170.719078  171.953382  168.882433  170.008118\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>ticker</code> <code>str</code> The stock ticker symbol. <code>tickermeta</code> <code>str</code> Additional metadata string to append to the ticker for specific queries. <code>period_start</code> <code>datetime</code> The start date for the historical data query. <code>period_end</code> <code>datetime</code> The end date for the historical data query. <code>granularity</code> <code>str</code> The granularity of the data ('1m', '2m', '5m', etc. up to '3mo'). <code>tries</code> <code>int, optional</code> Current count of retry attempts. Defaults to 0. <p>Returns:</p> Type Description <code>pd.DataFrame</code> In case of an empty result or failure after retries, returns an empty DataFrame."},{"location":"engine/base_class/","title":"Base Strategy Class for Backtesting Framework","text":"<p>Date: 27-02-2024 &amp; 01-04-2024  </p> <p>This documentation outlines the base class for all trading strategies in the Qlib framework. It provides a comprehensive suite of tools for data management, signal generation, risk management, and much more, facilitating rigorous and detailed backtesting of trading strategies.</p>"},{"location":"engine/base_class/#base-strategy-class","title":"Base Strategy Class","text":"<p>The <code>BaseStrategy</code> class is an abstract base class for all trading strategies, providing shared utilities and structure.</p>"},{"location":"engine/base_class/#constructor","title":"Constructor","text":"<p>Initializes the strategy with configuration and optional parameters.</p> Parameter Type Description Default config_file_path str Path to the configuration JSON file. None **kwargs dict Optional keyword arguments for extra settings. None"},{"location":"engine/base_class/#key-methods","title":"Key Methods","text":""},{"location":"engine/base_class/#strategy_load_state","title":"<code>strategy_load_state</code>","text":"<p>Loads the strategy's state from a file.</p> Parameter Type Description file_name str The name of the file to load from."},{"location":"engine/base_class/#strategy_save_state","title":"<code>strategy_save_state</code>","text":"<p>Saves the strategy's state to a file.</p> Parameter Type Description file_name str The name of the file to save to."},{"location":"engine/base_class/#run_simulation","title":"<code>run_simulation</code>","text":"<p>Executes the trading strategy across a defined range of trading dates.</p> Parameter Type Description verbose bool Prints detailed logs if set to True."},{"location":"engine/base_class/#preprocess_data","title":"<code>preprocess_data</code>","text":"<p>Prepares data for the backtesting process by fetching market data, calculating returns, and more.</p>"},{"location":"engine/base_class/#components","title":"Components","text":"<p>The strategy class integrates multiple components from the QuantJP backtesting engine:</p> <ul> <li>DataManager: Manages data retrieval and preprocessing.</li> <li>SignalGenerator: Generates trading signals based on technical indicators.</li> <li>RiskManagement: Manages risk and adjusts trading positions accordingly.</li> <li>PortfolioOptimizer: Optimizes the portfolio to achieve the best performance based on given constraints.</li> <li>PerformanceAnalytics: Analyzes and reports on the performance of the strategy.</li> </ul>"},{"location":"engine/base_class/#unit-tests","title":"Unit Tests","text":"Test Case Description <code>IDENTIFY_REGIME</code> Tests the market regime identification component. <code>COMPUTE_INDICATORS</code> Tests the computation of technical indicators. <code>GENERATE_SIGNALS</code> Tests the generation of trading signals. <code>PREPROCESS_STRATEGIES</code> Tests the preprocessing of strategy parameters. <code>PREPROCESS_MARKET_REGIME</code> Tests preprocessing of market regime data. <code>GENERATE_DAILY_TRANSACTIONS</code> Tests the generation of daily transactions. <code>CALCULATE_TRANSACTION_COSTS</code> Tests the calculation of transaction costs. <code>RUN_SIMULATION</code> Tests the complete simulation process. <code>RUN_STRATEGY</code> Tests the execution of the strategy with real data."},{"location":"engine/base_class/#usage","title":"Usage","text":"<p>To run a unit test for identifying the market regime:</p> <p>```python unit_test = UnitTests.IDENTIFY_REGIME run_unit_test(unit_test)</p>"},{"location":"engine/cost_model/","title":"Cost Model in Backtesting Framework","text":"<p>Date: 01-04-2024  </p> <p>This documentation outlines the Cost Model class for all trading strategies in the Qlib framework.</p>"},{"location":"engine/cost_model/#cost-model-class","title":"Cost Model Class","text":"<p>It is used in [class BaseStrategy(ABC)]../docs/engine/base_class) class, which is an abstract base class for all trading strategies, providing shared utilities and structure.</p> <p>-The rest will be added-</p>"},{"location":"engine/data_manager/","title":"Module Information","text":"<p>Description: Backtesting Framework for Trading Strategies</p> <pre><code>DataManager - Class for managing data for trading strategies.\n</code></pre> <p>Author: jpolec</p> <p>Date: 27-02-2024 and 01-04-2024</p>"},{"location":"engine/data_manager/#class-datamanager","title":"Class: DataManager","text":""},{"location":"engine/data_manager/#method-init","title":"Method: init","text":"<pre><code>def __init__(\n    self,\n    config: Dict[str, Any]) -&gt; dict:\n</code></pre> <p>Initialize the DataManager with the specified configuration.</p> <p>Parameters:</p> Name Type Description <code>config</code> <code>Dict[str, Any]</code> Configuration options for the DataManager."},{"location":"engine/data_manager/#method-get_market_data","title":"Method: get_market_data","text":"<pre><code>def get_market_data(\n    self,\n    instruments: List[str],\n    trading_range: Dict[str, str]) -&gt; Dict[str, pd.DataFrame]: \"\"\" Get market data for specified instruments and trading range. Args: instruments (List[str]) -&gt; dict:\n</code></pre> <p>Get market data for specified instruments and trading range.</p> <p>Parameters:</p> Name Type Description <code>instruments</code> <code>List[str]</code> A list of ticker symbols. <code>trading_range</code> <code>Dict[str, str]</code> A dictionary with 'start' and 'end' dates as strings. <code>str]) -&gt; Dict[str</code> `` <p>Returns:</p> Type Description <code>Dict[str, pd.DataFrame]</code> A dictionary where keys are instrument symbols and values are DataFrames containing historical market data for each instrument."},{"location":"engine/data_manager/#method-compute_returns","title":"Method: compute_returns","text":"<pre><code>def compute_returns(\n    self,\n    market_data: Dict[str, pd.DataFrame],\n    instruments: List[str]) -&gt; Dict[str, pd.DataFrame]: \"\"\" Compute returns based on closing prices. \"\"\" for instrument in instruments: market_data[instrument]['Returns'] = market_data[instrument]['Close'].pct_change() return market_data #@timer def compute_returns_ewm(self,\n    market_data: Dict[str, pd.DataFrame],\n    instruments: List[str],\n    span: int = 30) -&gt; dict:\n</code></pre> <p>Compute returns based on closing prices.</p>"},{"location":"engine/data_manager/#method-compute_volatility","title":"Method: compute_volatility","text":"<pre><code>def compute_volatility(\n    self,\n    market_data: Dict[str, pd.DataFrame],\n    instruments: List[str],\n    window: int = 20) -&gt; Dict[str, pd.DataFrame]: \"\"\" Compute volatility based on returns. \"\"\" for instrument in instruments: market_data[instrument]['Volatility'] = market_data[instrument]['Returns'].rolling(window).std() * np.sqrt(252) return market_data #@timer def compute_ewm_volatility(self,\n    market_data: Dict[str, pd.DataFrame],\n    instruments: List[str],\n    ewm_span: int = 60) -&gt; Dict[str, pd.DataFrame]: \"\"\" Compute EWM volatility based on returns. \"\"\" for instrument in instruments: returns = market_data[instrument]['Returns'] market_data[instrument]['EWM_Volatility'] = returns.ewm(span=ewm_span).std() * np.sqrt(252) return market_data #@timer def get_ewm_volatility(self,\n    instrument: str,\n    date: pd.Timestamp) -&gt; dict:\n</code></pre> <p>Compute volatility based on returns.</p>"},{"location":"engine/data_manager/#class-unittests","title":"Class: UnitTests","text":""},{"location":"engine/data_manager/#method-run_unit_test","title":"Method: run_unit_test","text":"<pre><code>def run_unit_test(\n    unit_test: UnitTests) -&gt; dict:\n</code></pre>"},{"location":"engine/execution_manager/","title":"Execution Manager in Backtesting Framework","text":"<p>Date: 01-04-2024  </p> <p>This documentation outlines the Execution Manager class for all trading strategies in the Qlib framework.</p>"},{"location":"engine/execution_manager/#execution-manager-class","title":"Execution Manager Class","text":"<p>It is used in [class BaseStrategy(ABC)]../docs/engine/base_class) class, which is an abstract base class for all trading strategies, providing shared utilities and structure.</p> <p>-The rest will be added-</p>"},{"location":"engine/forecast_engine/","title":"Forecast Engine in Backtesting Framework","text":"<p>Date: 01-04-2024  </p> <p>This documentation outlines the Forecast Engine class for all trading strategies in the Qlib framework.</p>"},{"location":"engine/forecast_engine/#forecast-engine-class","title":"Forecast Engine Class","text":"<p>It is used in [class BaseStrategy(ABC)]../docs/engine/base_class) class, which is an abstract base class for all trading strategies, providing shared utilities and structure.</p> <p>-The rest will be added-</p>"},{"location":"engine/market_regime/","title":"Market Regime in Backtesting Framework","text":"<p>Date: 01-04-2024  </p> <p>This documentation outlines the Market Regime class for all trading strategies in the Qlib framework.</p>"},{"location":"engine/market_regime/#market-regime-class","title":"Market Regime Class","text":"<p>It is used in [class BaseStrategy(ABC)]../docs/engine/base_class) class, which is an abstract base class for all trading strategies, providing shared utilities and structure.</p> <p>-The rest will be added-</p>"},{"location":"engine/market_regime_with_ml/","title":"Market Regime with ML in Backtesting Framework","text":"<p>Date: 01-04-2024  </p> <p>This documentation outlines the Market Regime with ML class for all trading strategies in the Qlib framework.</p>"},{"location":"engine/market_regime_with_ml/#market-regime-with-ml-class","title":"Market Regime with ML Class","text":"<p>It is used in [class BaseStrategy(ABC)]../docs/engine/base_class) class, which is an abstract base class for all trading strategies, providing shared utilities and structure.</p> <p>-The rest will be added-</p>"},{"location":"engine/monte_carlo_analyzer/","title":"Monte Carlo Analyzer in Backtesting Framework","text":"<p>Date: 01-04-2024  </p> <p>This documentation outlines the Monte Carlo Analyzer class for all trading strategies in the Qlib framework.</p>"},{"location":"engine/monte_carlo_analyzer/#monte-carlo-analyzer-class","title":"Monte Carlo Analyzer Class","text":"<p>It is used in [class BaseStrategy(ABC)]../docs/engine/base_class) class, which is an abstract base class for all trading strategies, providing shared utilities and structure.</p> <p>-The rest will be added-</p>"},{"location":"engine/performance_analytics/","title":"Performance Analytics in Backtesting Framework","text":"<p>Date: 01-04-2024  </p> <p>This documentation outlines the Performance Analytics class for all trading strategies in the Qlib framework.</p>"},{"location":"engine/performance_analytics/#performance-analytics-class","title":"Performance Analytics Class","text":"<p>It is used in [class BaseStrategy(ABC)]../docs/engine/base_class) class, which is an abstract base class for all trading strategies, providing shared utilities and structure.</p> <p>-The rest will be added-</p>"},{"location":"engine/performance_reporting/","title":"Performance Reporting in Backtesting Framework","text":"<p>Date: 01-04-2024  </p> <p>This documentation outlines the Performance Reporting class for all trading strategies in the Qlib framework.</p>"},{"location":"engine/performance_reporting/#performance-reporting-class","title":"Performance Reporting Class","text":"<p>It is used in [class BaseStrategy(ABC)]../docs/engine/base_class) class, which is an abstract base class for all trading strategies, providing shared utilities and structure.</p> <p>-The rest will be added-</p>"},{"location":"engine/portfolio_construction/","title":"Portfolio Construction in Backtesting Framework","text":"<p>Date: 01-04-2024  </p> <p>This documentation outlines the Portfolio Construction class for all trading strategies in the Qlib framework.</p>"},{"location":"engine/portfolio_construction/#portfolio-construction-class","title":"Portfolio Construction Class","text":"<p>It is used in [class BaseStrategy(ABC)]../docs/engine/base_class) class, which is an abstract base class for all trading strategies, providing shared utilities and structure.</p> <p>-The rest will be added-</p>"},{"location":"engine/portfolio_optimizer/","title":"Portfolio Optimizer in Backtesting Framework","text":"<p>Date: 01-04-2024  </p> <p>This documentation outlines the Portfolio Optimizer class for all trading strategies in the Qlib framework.</p>"},{"location":"engine/portfolio_optimizer/#portfolio-optimizer-class","title":"Portfolio Optimizer Class","text":"<p>It is used in [class BaseStrategy(ABC)]../docs/engine/base_class) class, which is an abstract base class for all trading strategies, providing shared utilities and structure.</p> <p>-The rest will be added-</p>"},{"location":"engine/profitloss_tracker/","title":"Portfolio Tracker in Backtesting Framework","text":"<p>Date: 01-04-2024  </p> <p>This documentation outlines the Portfolio Tracker class for all trading strategies in the Qlib framework.</p>"},{"location":"engine/profitloss_tracker/#portfolio-tracker-class","title":"Portfolio Tracker Class","text":"<p>It is used in [class BaseStrategy(ABC)]../docs/engine/base_class) class, which is an abstract base class for all trading strategies, providing shared utilities and structure.</p> <p>-The rest will be added-</p>"},{"location":"engine/risk_management/","title":"Module Information","text":"<p>Description: Backtesting Framework for Trading Strategies</p> <pre><code>RiskManagment - Class for managing risk in trading strategies.\n\nFunctions:\n    - manage_portfolio_risk: Perform portfolio-level risk management and diversification analysis.\n    - manage_instrument_risk: Apply risk management rules to the given orders based on portfolio-level risk and configuration settings.\n    - check_risk_limits: Checks whether a given order for an instrument complies with risk limits.\n    - calculate_portfolio_risk: Calculate the portfolio-level risk metric based on the proposed orders.\n    - calculate_instrument_volatility: Calculate the volatility of an instrument.\n    - calculate_portfolio_volatility: Calculate the portfolio-level volatility based on instrument volatilities.\n    - get_historical_returns: Retrieve historical returns for the specified instrument.\n</code></pre> <p>Author: jpolec</p> <p>Date: 27-02-2024 and 01-04-2024</p>"},{"location":"engine/risk_management/#class-riskmanagement","title":"Class: RiskManagement","text":""},{"location":"engine/risk_management/#method-init","title":"Method: init","text":"<pre><code>def __init__(\n    self,\n    config: Dict[str, Any]) -&gt; dict:\n</code></pre> <p>Initialize the RiskManagement with the specified configuration.</p> <p>Parameters:</p> Name Type Description <code>config</code> <code>Dict[str, Any]</code> Configuration options for the RiskManagement."},{"location":"engine/risk_management/#method-load_risk_params","title":"Method: load_risk_params","text":"<pre><code>def load_risk_params(\n    self,\n    config: Dict[str, Any]) -&gt; pd.DataFrame: \"\"\" Create DataFrame from nested dictionaries with correct indices and handling Args: config (Dict[str, Any]) -&gt; dict:\n</code></pre> <p>Create DataFrame from nested dictionaries with correct indices and handling</p> <p>Parameters:</p> Name Type Description <code>config</code> <code>Dict[str, Any]</code> The configuration dictionary with risk parameters."},{"location":"engine/risk_management/#method-set_portfolio","title":"Method: set_portfolio","text":"<pre><code>def set_portfolio(\n    self,\n    portfolio: PortfolioOptimizer) -&gt; dict:\n</code></pre> <p>Register the PortfolioOptimizer instance for the risk management calculations.</p> <p>Parameters:</p> Name Type Description <code>portfolio</code> <code>PortfolioOptimizer</code> The PortfolioOptimizer instance."},{"location":"engine/risk_management/#method-set_pnl_tracker","title":"Method: set_pnl_tracker","text":"<pre><code>def set_pnl_tracker(\n    self,\n    pnl_tracker: ProfitLossTracker) -&gt; dict:\n</code></pre> <p>Register the ProfitLossTracker instance for the risk management calculations.add()</p> <p>Parameters:</p> Name Type Description <code>pnl_tracker</code> <code>ProfitLossTracker</code> The ProfitLossTracker instance. <p>Returns:</p> Type Description <code>None</code> None"},{"location":"engine/risk_management/#method-assess_risk_management","title":"Method: assess_risk_management","text":"<pre><code>def assess_risk_management(\n    self,\n    market_regime: str,\n    current_date: pd.Timestamp) -&gt; dict:\n</code></pre> <p>Assess the risk management strategies based on the identified market regime and current date.</p> <p>Parameters:</p> Name Type Description <code>market_regime</code> <code>str</code> The identified market regime ('bull', 'bear', or 'sideways'). <code>current_date</code> <code>pd.Timestamp</code> The current date for which to adapt the risk management strategies."},{"location":"engine/risk_management/#method-calculate_new_holding_size","title":"Method: calculate_new_holding_size","text":"<pre><code>def calculate_new_holding_size(\n    self,\n    strategy: str,\n    instrument: str,\n    signal: int,\n    market_data: pd.DataFrame,\n    current_market_regime: str,\n    ) -&gt; dict:\n</code></pre> <p>Calculate new holding size for a given instrument and strategy based on risk management rules.</p> <pre><code>Explanation:\n</code></pre> <ol> <li> <p>risk per trade - calculate the risk per trade based on the account size and the risk percentage.</p> </li> <li> <p>instrument volatility - calculate the instrument volatility based on the ATR value.</p> </li> <li> <p>position size - calculate the position size based on the risk per trade and the instrument volatility.</p> </li> <li> <p>position change - check if the position change is below the inertia threshold.</p> </li> <li> <p>max quantity - calculate the maximum quantity based on the available cash.</p> </li> <li> <p>target position size - adjust the position size based on the signal and available cash/quantity.</p> </li> </ol> <p>Parameters:</p> Name Type Description <code>strategy</code> <code>str</code> The strategy name. <code>instrument</code> <code>str</code> The instrument symbol. <code>signal</code> <code>int</code> The signal for the instrument (1 for buy, -1 for sell). <code>market_data</code> <code>pd.DataFrame</code> The historical market data for the instrument. <code>current_market_regime</code> <code>str</code> The current market regime. <code>|</code> <p>Returns:</p> Type Description <code>float</code> The calculated position size."},{"location":"engine/risk_management/#method-adjust_transactions_with_risk_profiles","title":"Method: adjust_transactions_with_risk_profiles","text":"<pre><code>def adjust_transactions_with_risk_profiles(\n    self,\n    daily_transactions_dict,\n    market_data,\n    current_market_regime) -&gt; dict:\n</code></pre> <p>Optimize the transactions based on the risk management rules and market regime.</p> <pre><code>It is checking:\n</code></pre> <ol> <li> <p>Stop-loss level (stop_loss_level) if the potential loss exceeds the stop-loss level.</p> <p>It works both for 'buy' and 'sell' orders by adjusting the order quantity.</p> </li> <li> <p>Volatility scaling (volatility_scaling) to adjust the order quantity based on the instrument volatility.</p> </li> <li> <p>Leverage ratio (leverage_ratio) to apply leverage to the order quantity.</p> </li> <li> <p>Maximum positions (max_positions) to limit the number of positions in the portfolio.</p> </li> <li> <p>Risk percentage (risk_percentage) to limit the risk per trade based on the account size.</p> </li> <li> <p>Maximum drawdown (max_drawdown) to limit the drawdown based on the new portfolio value.</p> </li> <li> <p>Maximum risk percentage (max_risk_percentage) to limit the risk based on the portfolio value.</p> </li> <li> <p>Liquidity risk (max_liquidity_risk) to limit the order quantity based on the average volume.</p> </li> <li> <p>Sector exposure (max_sector_exposure) to limit the sector exposure based on the portfolio value.</p> </li> </ol> <p>Parameters:</p> Name Type Description <code>daily_transactions_dict</code> <code>Dict[str, List[Dict[str, Any]]]</code> A dictionary containing lists of transactions, grouped by strategy. <code>market_data</code> <code>Dict[str, pd.DataFrame]</code> The market data for each instrument. <code>current_market_regime</code> <code>str</code> The current market regime. <p>Returns:</p> Type Description <code>Dict[str, List[Dict[str, Any]]]</code> A dictionary containing the adjusted lists of transactions, grouped by strategy."},{"location":"engine/risk_management/#method-calculate_instrument_volatility","title":"Method: calculate_instrument_volatility","text":"<pre><code>def calculate_instrument_volatility(\n    self,\n    instrument: str,\n    market_data: pd.DataFrame) -&gt; dict:\n</code></pre> <p>Calculate the volatility of an instrument based on historical data.</p> <p>Parameters:</p> Name Type Description <code>instrument</code> <code>str</code> The instrument symbol. <code>market_data</code> <code>pd.DataFrame</code> The market data for the instrument. <p>Returns:</p> Type Description <code>float</code> The calculated instrument volatility."},{"location":"engine/risk_management/#method-calculate_potential_loss","title":"Method: calculate_potential_loss","text":"<pre><code>def calculate_potential_loss(\n    self,\n    instrument: str,\n    quantity: float,\n    instrument_data: pd.DataFrame,\n    current_market_regime: str) -&gt; dict:\n</code></pre> <p>Calculate the potential loss for a given instrument and quantity based on the market data.</p> <p>Parameters:</p> Name Type Description <code>instrument</code> <code>str</code> The instrument symbol. <code>quantity</code> <code>float</code> The order quantity. <code>instrument_data</code> <code>pd.DataFrame</code> The market data for the instrument. <code>current_market_regime</code> <code>str</code> The current market regime. <p>Returns:</p> Type Description <code>float</code> The potential loss."},{"location":"engine/risk_management/#method-calculate_new_drawdown","title":"Method: calculate_new_drawdown","text":"<pre><code>def calculate_new_drawdown(\n    self,\n    instrument: str,\n    quantity: float,\n    market_data: Dict[str, pd.DataFrame]) -&gt; dict:\n</code></pre> <p>Calculate the new drawdown for a given instrument and quantity based on the market data.</p> <p>Parameters:</p> Name Type Description <code>instrument</code> <code>str</code> The instrument symbol. <code>quantity</code> <code>float</code> The order quantity. <code>market_data</code> <code>Dict[str, pd.DataFrame]</code> The market data for each instrument. <p>Returns:</p> Type Description <code>float</code> The new drawdown."},{"location":"engine/risk_management/#method-calculate_liquidity_risk","title":"Method: calculate_liquidity_risk","text":"<pre><code>def calculate_liquidity_risk(\n    self,\n    instrument: str,\n    quantity: float,\n    market_data: Dict[str, pd.DataFrame]) -&gt; dict:\n</code></pre> <p>Calculate the liquidity risk for a given instrument and order quantity.</p> <p>Parameters:</p> Name Type Description <code>instrument</code> <code>str</code> The instrument symbol. <code>quantity</code> <code>float</code> The order quantity. <code>market_data</code> <code>Dict[str, pd.DataFrame]</code> The market data for each instrument. <p>Returns:</p> Type Description <code>float</code> The liquidity risk."},{"location":"engine/risk_management/#method-calculate_sector_exposure","title":"Method: calculate_sector_exposure","text":"<pre><code>def calculate_sector_exposure(\n    self,\n    instrument: str,\n    quantity: float,\n    market_data: Dict[str, pd.DataFrame]) -&gt; dict:\n</code></pre> <p>Calculate the sector exposure for a given instrument and order quantity.</p> <p>Parameters:</p> Name Type Description <code>instrument</code> <code>str</code> The instrument symbol. <code>quantity</code> <code>float</code> The order quantity. <code>market_data</code> <code>Dict[str, pd.DataFrame]</code> The market data for each instrument. <p>Returns:</p> Type Description <code>float</code> The sector exposure as a percentage of the portfolio value."},{"location":"engine/risk_management/#method-calculate_portfolio_risk","title":"Method: calculate_portfolio_risk","text":"<pre><code>def calculate_portfolio_risk(\n    self,\n    market_data: Dict[str, pd.DataFrame]) -&gt; dict:\n</code></pre> <p>Calculate the portfolio risk based on the current positions and market data.</p> <p>Parameters:</p> Name Type Description <code>market_data</code> <code>Dict[str, pd.DataFrame]</code> The market data for each instrument. <p>Returns:</p> Type Description <code>float</code> The calculated portfolio risk."},{"location":"engine/risk_management/#method-check_portfolio_risk","title":"Method: check_portfolio_risk","text":"<pre><code>def check_portfolio_risk(\n    self,\n    market_data: Dict[str, pd.DataFrame]) -&gt; dict:\n</code></pre> <p>Check if the portfolio risk exceeds the maximum allowed risk.</p> <p>Parameters:</p> Name Type Description <code>market_data</code> <code>Dict[str, pd.DataFrame]</code> The market data for each instrument. <p>Returns:</p> Type Description <code>bool</code> True if the portfolio risk exceeds the maximum allowed risk, False otherwise."},{"location":"engine/risk_management/#method-calculate_pnl","title":"Method: calculate_pnl","text":"<pre><code>def calculate_pnl(\n    self,\n    market_data: Dict[str, pd.DataFrame]) -&gt; dict:\n</code></pre> <p>Calculate the profit and loss (PnL) of the portfolio.</p> <p>Parameters:</p> Name Type Description <code>market_data</code> <code>Dict[str, pd.DataFrame]</code> The market data for each instrument."},{"location":"engine/risk_management/#method-calculate_kelly_criterion_position_size","title":"Method: calculate_kelly_criterion_position_size","text":"<pre><code>def calculate_kelly_criterion_position_size(\n    self,\n    win_probability: float,\n    win_loss_ratio: float) -&gt; dict:\n</code></pre> <p>Calculate the optimal position size using the Kelly criterion.</p> <p>Parameters:</p> Name Type Description <code>win_probability</code> <code>float</code> The probability of a winning trade. <code>win_loss_ratio</code> <code>float</code> The ratio of average win to average loss. <p>Returns:</p> Type Description <code>float</code> The optimal position size based on the Kelly criterion."},{"location":"engine/risk_management/#method-update_portfolio_metrics","title":"Method: update_portfolio_metrics","text":"<pre><code>def update_portfolio_metrics(\n    self,\n    market_data: Dict[str, pd.DataFrame]) -&gt; dict:\n</code></pre> <p>Update the portfolio metrics based on the current market data.</p> <p>Parameters:</p> Name Type Description <code>market_data</code> <code>Dict[str, pd.DataFrame]</code> The market data for each instrument."},{"location":"engine/risk_management/#method-manage_risk","title":"Method: manage_risk","text":"<pre><code>def manage_risk(\n    self,\n    orders: List[Dict[str, Any]],\n    market_data: Dict[str, pd.DataFrame]) -&gt; List[Dict[str, Any]] -&gt; List[Dict[str, Any]]: \"\"\" Manage the risk of the portfolio based on the orders and market data. Args: orders (List[Dict[str, Any]]) -&gt; dict:\n</code></pre> <p>Manage the risk of the portfolio based on the orders and market data.</p> <p>Parameters:</p> Name Type Description <code>orders</code> <code>List[Dict[str, Any]]</code> The list of orders. <code>market_data</code> <code>Dict[str, pd.DataFrame]</code> The market data for each instrument. <p>Returns:</p> Type Description <code>List[Dict[str, Any]]</code> The updated list of orders after risk management."},{"location":"engine/risk_management/#method-calculate_order_risk","title":"Method: calculate_order_risk","text":"<pre><code>def calculate_order_risk(\n    self,\n    instrument: str,\n    quantity: float,\n    market_data: Dict[str, pd.DataFrame]) -&gt; dict:\n</code></pre> <p>Calculate the risk of an order.</p> <p>Parameters:</p> Name Type Description <code>instrument</code> <code>str</code> The instrument symbol. <code>quantity</code> <code>float</code> The order quantity. <code>market_data</code> <code>Dict[str, pd.DataFrame]</code> The market data for each instrument. <p>Returns:</p> Type Description <code>float</code> The calculated order risk."},{"location":"engine/risk_management/#method-calculate_value_at_risk","title":"Method: calculate_value_at_risk","text":"<pre><code>def calculate_value_at_risk(\n    self,\n    instrument_data: pd.DataFrame,\n    confidence_level: float = 0.95,\n    lookback_period: int = 252) -&gt; dict:\n</code></pre> <p>Calculate the Value at Risk (VaR) for the given instrument data.</p> <p>Parameters:</p> Name Type Description <code>instrument_data</code> <code>pd.DataFrame</code> Historical price data for the instrument. <code>confidence_level</code> <code>float</code> The confidence level for VaR calculation (default: 0.95). <code>lookback_period</code> <code>int</code> The number of historical periods to consider for VaR calculation (default: 252). <p>Returns:</p> Type Description <code>float</code> The calculated Value at Risk (VaR)."},{"location":"engine/risk_management/#method-calculate_expected_shortfall","title":"Method: calculate_expected_shortfall","text":"<pre><code>def calculate_expected_shortfall(\n    self,\n    instrument_data: pd.DataFrame,\n    confidence_level: float = 0.95,\n    lookback_period: int = 252) -&gt; dict:\n</code></pre> <p>Calculate the Expected Shortfall (ES) for the given instrument data.</p> <p>Parameters:</p> Name Type Description <code>instrument_data</code> <code>pd.DataFrame</code> Historical price data for the instrument. <code>confidence_level</code> <code>float</code> The confidence level for ES calculation (default: 0.95). <code>lookback_period</code> <code>int</code> The number of historical periods to consider for ES calculation (default: 252). <p>Returns:</p> Type Description <code>float</code> The calculated Expected Shortfall (ES)."},{"location":"engine/risk_management/#class-unittests","title":"Class: UnitTests","text":""},{"location":"engine/risk_management/#method-run_unit_test","title":"Method: run_unit_test","text":"<pre><code>def run_unit_test(\n    unit_test: UnitTests) -&gt; dict:\n</code></pre>"},{"location":"engine/signal_generator/","title":"Signal Generator in Backtesting Framework","text":"<p>Date: 01-04-2024  </p> <p>This documentation outlines the Signal Generator class for all trading strategies in the Qlib framework.</p>"},{"location":"engine/signal_generator/#signal-generator-class","title":"Signal Generator Class","text":"<p>It is used in [class BaseStrategy(ABC)]../docs/engine/base_class) class, which is an abstract base class for all trading strategies, providing shared utilities and structure.</p> <p>-The rest will be added-</p>"},{"location":"engine/transaction_cost_analysis/","title":"Transaction Cost Analysis in Backtesting Framework","text":"<p>Date: 01-04-2024  </p> <p>This documentation outlines the Transaction Cost Analysis class for all trading strategies in the Qlib framework.</p>"},{"location":"engine/transaction_cost_analysis/#transaction-cost-analysis-class","title":"Transaction Cost Analysis Class","text":"<p>It is used in [class BaseStrategy(ABC)]../docs/engine/base_class) class, which is an abstract base class for all trading strategies, providing shared utilities and structure.</p> <p>-The rest will be added-</p>"},{"location":"engine/volatility_engine/","title":"Volatility Engine in Backtesting Framework","text":"<p>Date: 01-04-2024  </p> <p>This documentation outlines the Volatility Engine class for all trading strategies in the Qlib framework.</p>"},{"location":"engine/volatility_engine/#volatility-engine-class","title":"Volatility Engine Class","text":"<p>It is used in [class BaseStrategy(ABC)]../docs/engine/base_class) class, which is an abstract base class for all trading strategies, providing shared utilities and structure.</p> <p>-The rest will be added-</p>"},{"location":"exchanges/ibkr_exchange/","title":"IBKR Exchange","text":"<p>To be uploaded.</p>"},{"location":"membership/membership/","title":"Become a Member","text":"Become a Member of Quant Journey Join over 2000 Subscribers!     After becoming an eligible member, you'll get access to the private GitHub repository with all Quant Journey code, invited to our quant community on Discord, granted access to exclusive blog posts on strategies, receive early access to new features \ud83d\ude80, and gain insights from expert-led webinars (planned), have an introductory 1:1 call, and access to monthly podcasts.    Please note full package is from annual and founding membership only!     \ud83e\udd16       Trading Strategies      <p>Access to strategies with full code. Adding 1-2 new strategies per week, and over 25 in archive already.</p> <p>For $25</p>  Join on Ko-Fi         <p>Pay monthly, cancel anytime \ud83d\udc4c</p> \ud83d\ude80       Monthly Access      <p>Access to Discord community, exclusive blog posts, all strategies, expert-led webinars, and monthly podcasts.</p> <p>For $49</p>  Join on Substack        <p>Pay monthly, cancel anytime \ud83d\udc4c</p> \ud83d\ude80       Annual Access      <p>All in Monthly plus access to private GitHub repository, quant community on Discord, exclusive blog posts, early access to new features \ud83d\ude80, expert-led webinars, introductory 1:1 call, and monthly podcasts.</p> <p>For $499 one time</p>  Join on Substack        <p>Pay once and enjoy access for a year! \ud83e\udd18</p> <sub>\ud83d\udca1 Remark: For personal use only. By becoming a member, you agree to Terms of Use.</sub> <sub>\ud83d\udca1 Tip: Limited time offer for early contributors. With each new milestone, the price will steadily increase to match that of competitors. By sponsoring now, you will become an early contributor and secure this price to access all the features that will follow.</sub>    ---     Testimonials See what others are saying about Quant Journey Membership Comparison Compare packages Feature Trading Strategies Monthly Annual Access to strategies \u2714 \u2714 \u2714 Discord community \u2714 \u2714 \u2714 Exclusive blog posts \u2718 \u2714 \u2714 Expert-led webinars \u2714 \u2714 \u2714 Monthly podcasts \u2714 \u2714 \u2714 Private GitHub repository \u2718 \u2718 \u2714 Early access to new features \u2718 \u2718 \u2714 Introductory 1:1 call \u2718 \u2718 \u2714 Price $25 $49 $499 Payment frequency One-time Monthly Annual"},{"location":"strat/strategies/","title":"Quantitative Trading Strategies","text":"<p>Quantitative trading strategies utilize mathematical models to identify trading opportunities. Here are some of the top strategies used by quantitative traders:</p> <ul> <li>Statistical Arbitrage:</li> <li> <p>Exploits price discrepancies between related assets based on historical correlation and mean reversion.</p> </li> <li> <p>Momentum Investing:</p> </li> <li> <p>Follows the principle that assets that have performed well in the recent past will continue to perform well in the near future.</p> </li> <li> <p>Mean Reversion:</p> </li> <li> <p>Based on the theory that prices and returns eventually move back towards the mean or average.</p> </li> <li> <p>Machine Learning Techniques:</p> </li> <li> <p>Uses algorithms such as neural networks and decision trees to predict market movements based on large data sets.</p> </li> <li> <p>High-Frequency Trading (HFT):</p> </li> <li> <p>Involves making thousands of trades within seconds, exploiting small price gaps and trading volume.</p> </li> <li> <p>Factor Investing:</p> </li> <li> <p>Focuses on capturing risk premiums in the markets through exposure to certain risk factors like size, value, and momentum.</p> </li> <li> <p>Event-Driven Strategies:</p> </li> <li>Seeks to profit from stocks or securities that are influenced by events such as mergers, acquisitions, or significant corporate announcements.</li> </ul>"},{"location":"strat/strategies/#further-reading","title":"Further Reading","text":"<ul> <li>For more in-depth analysis and case studies on quantitative trading strategies, refer to our Documentation or visit our Blog.</li> </ul>"},{"location":"strat/statistical_arbitrage/event_driven/","title":"Event-Driven Strategies","text":"<p>This part describes the strategy for Backtesting Framewor.</p> <p>--It will be added soon.--</p>"},{"location":"strat/statistical_arbitrage/factor_investing/","title":"Factor Investing","text":"<p>This part describes the strategy for Backtesting Framewor.</p> <p>--It will be added soon.--</p>"},{"location":"strat/statistical_arbitrage/hft/","title":"High-Frequency Trading (HFT)","text":"<p>This part describes the strategy for Backtesting Framewor.</p> <p>--It will be added soon.--</p>"},{"location":"strat/statistical_arbitrage/machine_learning/","title":"Machine Learning Techniques","text":"<p>This part describes the strategy for Backtesting Framewor.</p> <p>--It will be added soon.--</p>"},{"location":"strat/statistical_arbitrage/mean_reversion/","title":"Mean Reversion","text":"<p>This part describes the strategy for Backtesting Framewor.</p> <p>--It will be added soon.--</p>"},{"location":"strat/statistical_arbitrage/momentum_investing/","title":"Momentum Investing","text":"<p>This part describes the strategy for Backtesting Framewor.</p> <p>--It will be added soon.--</p>"},{"location":"strat/statistical_arbitrage/overview/","title":"Statistical Arbitrage","text":"<p>This part describes the strategy for Backtesting Framewor.</p> <p>--It will be added soon.--</p>"},{"location":"terms/privacy/","title":"Privacy Policy","text":"Privacy Policy for Quant Journey <p>Last updated: July 20, 2024</p> 1. Introduction <p>QuantJourney (\"we\", \"our\", or \"us\") is committed to protecting your privacy. This Privacy Policy explains how we collect, use, disclose, and safeguard your information when you use our website, web portal, and development framework (collectively, the \"Services\").</p> 2. Information We Collect 2.1 Personal Information <p>We may collect personally identifiable information, such as:</p> <ul> <li>Name</li> <li>Email address</li> <li>IP address</li> <li>Usage data</li> </ul> 2.2 Non-Personal Information <p>We may also collect non-personal information, including:</p> <ul> <li>Browser type</li> <li>Operating system</li> <li>Access times</li> <li>Pages viewed</li> </ul> 3. How We Use Your Information <p>We use the collected information for various purposes, including:</p> <ul> <li>Providing and maintaining our Services</li> <li>Improving our Services</li> <li>Analyzing usage of our Services</li> <li>Communicating with you</li> <li>Preventing fraud and abuse</li> </ul> 4. Data Storage and Security <p>We implement industry-standard security measures to protect your data. However, no method of transmission over the Internet or electronic storage is 100% secure. We cannot guarantee absolute security of your data.</p> 5. Third-Party Services <p>Our Services may contain links to third-party websites or services. We are not responsible for the privacy practices or content of these third-party sites.</p> 6. Data Retention <p>We retain your personal information for as long as necessary to provide our Services and comply with legal obligations. You may request deletion of your data at any time.</p> 7. Your Rights <p>You have the right to:</p> <ul> <li>Access your personal information</li> <li>Correct inaccurate information</li> <li>Request deletion of your data</li> <li>Object to processing of your information</li> <li>Request restriction of processing</li> </ul> 8. Children's Privacy <p>Our Services are not intended for children under 13. We do not knowingly collect personal information from children under 13. If we become aware that we have collected personal information from children under 13, we will take steps to delete such information.</p> 9. Changes to This Privacy Policy <p>We may update our Privacy Policy from time to time. We will notify you of any changes by posting the new Privacy Policy on this page and updating the \"Last Updated\" date.</p> 10. Contact Us <p>If you have any questions about this Privacy Policy, please contact us at:</p> <p>QuantJourney Email: jakub@quantjourney.pro</p>"},{"location":"terms/terms-of-usage/","title":"Terms of Use","text":"Terms of Use for Quant Journey <p>Last updated: July 20, 2024</p> 1. AGREEMENT TO OUR LEGAL TERMS <p>These Legal Terms constitute a legally binding agreement made between you, whether personally or on behalf of an entity (\"you\"), and Quant Journey (\"Company,\" \"we,\" \"us,\" or \"our\"), concerning your access to and use of the quantjourney framework available on GitHub (the \"Repo\"), and pages quantjourney.pro (the \"Site\") and others, as well as any other related products and services that refer or link to these Legal Terms (collectively, the \"Services\").</p> <p>You agree that by accessing the Services, you have read, understood, and agreed to be bound by all of these Legal Terms. IF YOU DO NOT AGREE WITH ALL OF THESE LEGAL TERMS, THEN YOU ARE EXPRESSLY PROHIBITED FROM USING THE SERVICES AND YOU MUST DISCONTINUE USE IMMEDIATELY.</p> <p>Supplemental terms and conditions or documents that may be posted on the Services from time to time are hereby expressly incorporated herein by reference. We reserve the right, in our sole discretion, to make changes or modifications to these Legal Terms from time to time. We will alert you about any changes by updating the \"Last updated\" date of these Legal Terms, and you waive any right to receive specific notice of each such change. It is your responsibility to periodically review these Legal Terms to stay informed of updates. You will be subject to, and will be deemed to have been made aware of and to have accepted, the changes in any revised Legal Terms by your continued use of the Services after the date such revised Legal Terms are posted.</p> <p>We recommend that you print a copy of these Legal Terms for your records.</p> 2. OUR SERVICES <p>Quant Journey provides quantitative trading education, tools, resources, code and related services. Our content is for informational and educational purposes only and does not constitute financial advice. You acknowledge that all information provided when using the Services is not intended for distribution to or use by any person or entity in any jurisdiction or country where such distribution or use would be contrary to law or regulation or which would subject us to any registration requirement within such jurisdiction or country.</p> <p>The Services are not tailored to comply with industry-specific regulations, particularly financial regulations imposed by government entities such as the Securities and Exchange Commission (SEC) and others. Therefore, if your interactions are subject to such laws, you may not use the Services, or you may use them at your own risk. You may not use the Services in a way that would violate the Gramm-Leach-Bliley Act (GLBA), the Sarbanes-Oxley Act (SOX), the Payment Card Industry Data Security Standard (PCI DSS), or any other financial regulations. It is your responsibility to ensure that your use of the Services is in compliance with all applicable laws and regulations. Failure to comply with these laws may result in legal consequences, and the Company disclaims any liability for your non-compliant use of the Services.</p> 3. INTELLECTUAL PROPERTY RIGHTS Our intellectual property <p>We are the owner or the licensee of all intellectual property rights in our Services, including all source code, databases, functionality, software, website designs, audio, video, text, photographs, and graphics in the Services (collectively, the \"Content\"), as well as the trademarks, service marks, and logos contained therein (the \"Marks\").</p> <p>Our Content and Marks are protected by copyright and trademark laws (and various other intellectual property rights and unfair competition laws) and treaties in the United States and around the world.</p> <p>The Content and Marks are provided in or through the Services \"AS IS\" for your personal, non-commercial use only.</p> Your use of our Services <p>Subject to your compliance with these Legal Terms, including the \"PROHIBITED ACTIVITIES\" section below, we grant you a non-exclusive, non-transferable, revocable license to:</p> <ul> <li>access the Services; and</li> <li>download or print a copy of any portion of the Content to which you have properly gained access,</li> </ul> <p>solely for your personal, non-commercial use.</p> <p>Except as set out in this section or elsewhere in our Legal Terms, no part of the Services and no Content or Marks may be copied, reproduced, aggregated, republished, uploaded, posted, publicly displayed, encoded, translated, transmitted, distributed, sold, licensed, or otherwise exploited for any commercial purpose whatsoever, without our express prior written permission.</p> <p>If you wish to make any use of the Services, Content, or Marks other than as set out in this section or elsewhere in our Legal Terms, please address your request to: jakub@quantjourney.pro. If we ever grant you the permission to post, reproduce, or publicly display any part of our Services or Content, you must identify us as the owners or licensors of the Services, Content, or Marks and ensure that any copyright or proprietary notice appears or is visible on posting, reproducing, or displaying our Content.</p> <p>We reserve all rights not expressly granted to you in and to the Services, Content, and Marks.</p> <p>Any breach of these Intellectual Property Rights will constitute a material breach of our Legal Terms and your right to use our Services will terminate immediately.</p> 4. USER REPRESENTATIONS <p>By using the Services, you represent and warrant that: (1) you have the legal capacity and you agree to comply with these Legal Terms; (2) you are not under the age of 13; (3) you are not a minor in the jurisdiction in which you reside, or if a minor, you have received parental permission to use the Services; (4) you will not access the Services through automated or non-human means, whether through a bot, script or otherwise; (5) you will not use the Services for any illegal or unauthorized purpose; and (6) your use of the Services will not violate any applicable law or regulation.</p> <p>If you provide any information that is untrue, inaccurate, not current, or incomplete, we have the right to suspend or terminate your account and refuse any and all current or future use of the Services (or any portion thereof).</p> 5. PURCHASES AND PAYMENT <p>We accept the following forms of payment:</p> <ul> <li>Credit Card via Stripe</li> <li>GitHub Sponsors</li> <li>Substack via Stripe</li> <li>Ko-fi</li> </ul> <p>You agree to provide current, complete, and accurate purchase and account information for all purchases made via the Services. You further agree to promptly update account and payment information, including email address, payment method, and payment card expiration date, so that we can complete your transactions and contact you as needed. Sales tax will be added to the price of purchases as deemed required by us. We may change prices at any time. All payments shall be in US dollars.</p> <p>You agree to pay all charges at the prices then in effect for your purchases and any applicable shipping fees, and you authorize us to charge your chosen payment provider for any such amounts upon placing your order. If your order is subject to recurring charges, then you consent to our charging your payment method on a recurring basis without requiring your prior approval for each recurring charge, until such time as you cancel the applicable order. We reserve the right to correct any errors or mistakes in pricing, even if we have already requested or received payment.</p> <p>We reserve the right to refuse any order placed through the Services. We may, in our sole discretion, limit or cancel quantities purchased per person, per household, or per order. These restrictions may include orders placed by or under the same customer account, the same payment method, and/or orders that use the same billing or shipping address. We reserve the right to limit or prohibit orders that, in our sole judgment, appear to be placed by dealers, resellers, or distributors.</p> 6. CANCELLATION <p>All purchases are non-refundable. You can cancel your subscription at any time by logging into your account or contacting us using the contact information provided below. Your cancellation will take effect at the end of the current paid term.</p> <p>If you are unsatisfied with our Services, please email us at jakub@quantjourney.pro.</p> 7. SOFTWARE <p>We may include software for use in connection with our Services, primarily available through \"the Repo.\" If such software is accompanied by an end user license agreement (\"EULA\"), the terms of the EULA will govern your use of the software. If such software is not accompanied by a EULA, we grant you a non-exclusive, revocable, personal, and non-transferable license to use the software solely in connection with our Services and in accordance with these Legal Terms. Any software and any related documentation is provided \"AS IS\" without warranty of any kind, either express or implied, including, without limitation, the implied warranties of merchantability, fitness for a particular purpose, or non-infringement. You accept any and all risks arising from the use or performance of any software. You may not reproduce or redistribute any software except in accordance with the EULA or these Legal Terms.</p> 8. PROHIBITED ACTIVITIES <p>You may not access or use the Services for any purpose other than that for which we make the Services available. The Services may not be used in connection with any commercial endeavors except those that are specifically endorsed or approved by us.</p> <p>As a user of the Services, you agree not to:</p> <ul> <li>Systematically retrieve data or other content from the Services to create or compile, directly or indirectly, a collection, compilation, database, or directory without written permission from us.</li> <li>Trick, defraud, or mislead us and other users, especially in any attempt to learn sensitive account information such as user passwords.</li> <li>Circumvent, disable, or otherwise interfere with security-related features of the Services, including features that prevent or restrict the use or copying of any Content or enforce limitations on the use of the Services and/or the Content contained therein.</li> <li>Use any information obtained from the Services in order to harass, abuse, or harm another person.</li> <li>Make improper use of our support services or submit false reports of abuse or misconduct.</li> <li>Use the Services in a manner inconsistent with any applicable laws or regulations.</li> <li>Engage in unauthorized framing of or linking to the Services.</li> <li>Engage in any automated use of the system, such as using scripts to send comments or messages, or using any data mining, robots, or similar data gathering and extraction tools.</li> <li>Delete the copyright or other proprietary rights notice from any Content.</li> <li>Upload or transmit (or attempt to upload or to transmit) any material that acts as a passive or active information collection or transmission mechanism, including without limitation, clear graphics interchange formats (\"gifs\"), 1\u00d71 pixels, web bugs, cookies, or other similar devices (sometimes referred to as \"spyware\" or \"passive collection mechanisms\" or \"pcms\").</li> <li>Interfere with, disrupt, or create an undue burden on the Services or the networks or services connected to the Services.</li> <li>Attempt to bypass any measures of the Services designed to prevent or restrict access to the Services, or any portion of the Services.</li> <li>Copy or adapt the Services' software, including but not limited to Flash, PHP, HTML, JavaScript, or other code, for your own personal use.</li> <li>Use a buying agent or purchasing agent to make purchases on the Services.</li> <li>Make any unauthorized use of the Services, including collecting usernames and/or email addresses of users by electronic or other means for the purpose of sending unsolicited email, or creating user accounts by automated means or under false pretenses.</li> <li>Use the Services as part of any effort to compete with us or otherwise use the Services and/or the Content for any revenue-generating endeavor or commercial enterprise.</li> </ul> 9. USER GENERATED CONTRIBUTIONS <p>The Services may provide you with the opportunity to create, submit, post, display, transmit, perform, publish, distribute, or broadcast content and materials to us or on the Services, including but not limited to text, writings, video, audio, photographs, graphics, comments, suggestions, or personal information or other material (collectively, \"Contributions\"). Contributions may be viewable by other users of the Services and through third-party websites. When you create or make available any Contributions, you thereby represent and warrant that:</p> <ul> <li>The creation, distribution, transmission, public display, or performance, and the accessing, downloading, or copying of your Contributions do not and will not infringe the proprietary rights, including but not limited to the copyright, patent, trademark, trade secret, or moral rights of any third party.</li> <li>You are the creator and owner of or have the necessary licenses, rights, consents, releases, and permissions to use and to authorize us, the Services, and other users of the Services to use your Contributions in any manner contemplated by the Services and these Legal Terms.</li> <li>You have the written consent, release, and/or permission of each and every identifiable individual person in your Contributions to use the name or likeness of each and every such identifiable individual person to enable inclusion and use of your Contributions in any manner contemplated by the Services and these Legal Terms.</li> <li>Your Contributions are not false, inaccurate, or misleading.</li> <li>Your Contributions are not unsolicited or unauthorized advertising, promotional materials, pyramid schemes, chain letters, spam, mass mailings, or other forms of solicitation.</li> <li>Your Contributions are not used to harass or threaten (in the legal sense of those terms) any other person and to promote violence against a specific person or class of people.</li> <li>Your Contributions do not violate any applicable law, regulation, or rule.</li> <li>Your Contributions do not violate the privacy or publicity rights of any third party.</li> <li>Your Contributions do not otherwise violate, or link to material that violates, any provision of these Legal Terms, or any applicable law or regulation.</li> </ul> <p>Any use of the Services in violation of the foregoing violates these Legal Terms and may result in, among other things, termination or suspension of your rights to use the Services.</p> 10. CONTRIBUTION LICENSE <p>You and Services agree that we may access, store, process, and use any information and personal data that you provide and your choices (including settings).</p> <p>By submitting suggestions or other feedback regarding the Services, you agree that we can use and share such feedback for any purpose without compensation to you.</p> <p>We do not assert any ownership over your Contributions. You retain full ownership of all of your Contributions and any intellectual property rights or other proprietary rights associated with your Contributions. We are not liable for any statements or representations in your Contributions provided by you in any area on the Services. You are solely responsible for your Contributions to the Services and you expressly agree to exonerate us from any and all responsibility and to refrain from any legal action against us regarding your Contributions.</p> 11. THIRD-PARTY WEBSITES AND CONTENT <p>The Services may contain (or you may be sent via the Site) links to other websites (\"Third-Party Websites\") as well as articles, photographs, text, graphics, pictures, designs, music, sound, video, information, applications, software, and other content or items belonging to or originating from third parties (\"Third-Party Content\"). Such Third-Party Websites and Third-Party Content are not investigated, monitored, or checked for accuracy, appropriateness, or completeness by us, and we are not responsible for any Third-Party Websites accessed through the Services or any Third-Party Content posted on, available through, or installed from the Services, including the content, accuracy, offensiveness, opinions, reliability, privacy practices, or other policies of or contained in the Third-Party Websites or the Third-Party Content. Inclusion of, linking to, or permitting the use or installation of any Third-Party Websites or any Third-Party Content does not imply approval or endorsement thereof by us. If you decide to leave the Services and access the Third-Party Websites or to use or install any Third-Party Content, you do so at your own risk, and you should be aware these Legal Terms no longer govern. You should review the applicable terms and policies, including privacy and data gathering practices, of any website to which you navigate from the Services or relating to any applications you use or install from the Services. Any purchases you make through Third-Party Websites will be through other websites and from other companies, and we take no responsibility whatsoever in relation to such purchases which are exclusively between you and the applicable third party. You agree and acknowledge that we do not endorse the products or services offered on Third-Party Websites and you shall hold us blameless from any harm caused by your purchase of such products or services. Additionally, you shall hold us blameless from any losses sustained by you or harm caused to you relating to or resulting in any way from any Third-Party Content or any contact with Third-Party Websites.</p> 12. ADVERTISERS <p>We allow advertisers to display their advertisements and other information in certain areas of the Services, such as sidebar advertisements or banner advertisements. We simply provide the space to place such advertisements, and we have no other relationship with advertisers.</p> 13. SERVICES MANAGEMENT <p>We reserve the right, but not the obligation, to: (1) monitor the Services for violations of these Legal Terms; (2) take appropriate legal action against anyone who, in our sole discretion, violates the law or these Legal Terms, including without limitation, reporting such user to law enforcement authorities; (3) in our sole discretion and without limitation, refuse, restrict access to, limit the availability of, or disable (to the extent technologically feasible) any of your Contributions or any portion thereof; (4) in our sole discretion and without limitation, notice, or liability, to remove from the Services or otherwise disable all files and content that are excessive in size or are in any way burdensome to our systems; and (5) otherwise manage the Services in a manner designed to protect our rights and property and to facilitate the proper functioning of the Services.</p> 14. PRIVACY POLICY <p>We care about data privacy and security. By using the Services, you agree to be bound by our Privacy Policy posted on the Services, which is incorporated into these Legal Terms. Please be advised the Services are hosted in the United States. If you access the Services from any other region of the world with laws or other requirements governing personal data collection, use, or disclosure that differ from applicable laws in the United States, then through your continued use of the Services, you are transferring your data to the United States, and you expressly consent to have your data transferred to and processed in the United States. Further, we do not knowingly accept, request, or solicit information from children or knowingly market to children. Therefore, in accordance with the U.S. Children's Online Privacy Protection Act, if we receive actual knowledge that anyone under the age of 13 has provided personal information to us without the requisite and verifiable parental consent, we will delete that information from the Services as quickly as is reasonably practical.</p> 15. TERM AND TERMINATION <p>These Legal Terms shall remain in full force and effect while you use the Services. WITHOUT LIMITING ANY OTHER PROVISION OF THESE LEGAL TERMS, WE RESERVE THE RIGHT TO, IN OUR SOLE DISCRETION AND WITHOUT NOTICE OR LIABILITY, DENY ACCESS TO AND USE OF THE SERVICES (INCLUDING BLOCKING CERTAIN IP ADDRESSES), TO ANY PERSON FOR ANY REASON OR FOR NO REASON, INCLUDING WITHOUT LIMITATION FOR BREACH OF ANY REPRESENTATION, WARRANTY, OR COVENANT CONTAINED IN THESE LEGAL TERMS OR OF ANY APPLICABLE LAW OR REGULATION. WE MAY TERMINATE YOUR USE OR PARTICIPATION IN THE SERVICES OR DELETE ANY CONTENT OR INFORMATION THAT YOU POSTED AT ANY TIME, WITHOUT WARNING, IN OUR SOLE DISCRETION.</p> <p>If we terminate or suspend your account for any reason, you are prohibited from registering and creating a new account under your name, a fake or borrowed name, or the name of any third party, even if you may be acting on behalf of the third party. In addition to terminating or suspending your account, we reserve the right to take appropriate legal action, including without limitation pursuing civil, criminal, and injunctive redress.</p> 16. MODIFICATIONS AND INTERRUPTIONS <p>We reserve the right to change, modify, or remove the contents of the Services at any time or for any reason at our sole discretion without notice. However, we have no obligation to update any information on our Services. We will not be liable to you or any third party for any modification, price change, suspension, or discontinuance of the Services.</p> <p>We cannot guarantee the Services will be available at all times. We may experience hardware, software, or other problems or need to perform maintenance related to the Services, resulting in interruptions, delays, or errors. We reserve the right to change, revise, update, suspend, discontinue, or otherwise modify the Services at any time or for any reason without notice to you. You agree that we have no liability whatsoever for any loss, damage, or inconvenience caused by your inability to access or use the Services during any downtime or discontinuance of the Services. Nothing in these Legal Terms will be construed to obligate us to maintain and support the Services or to supply any corrections, updates, or releases in connection therewith.</p> 17. DISPUTE RESOLUTION Restrictions <p>The Parties agree that any arbitration shall be limited to the Dispute between the Parties individually. To the full extent permitted by law, (a) no arbitration shall be joined with any other proceeding; (b) there is no right or authority for any Dispute to be arbitrated on a class-action basis or to utilize class action procedures; and (c) there is no right or authority for any Dispute to be brought in a purported representative capacity on behalf of the general public or any other persons. By using the Services, you acknowledge and agree that you are accepting the terms as-is and have no rights to dispute, challenge, or seek modification of these terms in any form.</p> Exceptions to Informal Negotiations and Arbitration <p>The Parties agree that the following Disputes are not subject to the above provisions concerning informal negotiations and binding arbitration: (a) any Disputes seeking to enforce or protect, or concerning the validity of, any of the intellectual property rights of a Party; (b) any Dispute related to, or arising from, allegations of theft, piracy, invasion of privacy, or unauthorized use; and (c) any claim for injunctive relief. If this provision is found to be illegal or unenforceable, then neither Party will elect to arbitrate any Dispute falling within that portion of this provision found to be illegal or unenforceable and such Dispute shall be decided by a court of competent jurisdiction within the courts listed for jurisdiction above, and the Parties agree to submit to the personal jurisdiction of that court.</p> 18. CORRECTIONS <p>There may be information on the Services that contains typographical errors, inaccuracies, or omissions, including descriptions, pricing, availability, and various other information. We reserve the right to correct any errors, inaccuracies, or omissions and to change or update the information on the Services at any time, without prior notice.</p> 18. DISCLAIMER <p>THE SERVICES ARE PROVIDED ON AN AS-IS AND AS-AVAILABLE BASIS. YOU AGREE THAT YOUR USE OF THE SERVICES WILL BE AT YOUR SOLE RISK. THE SERVICES DO NOT CONSTITUTE FINANCIAL, LEGAL, OR ANY OTHER PROFESSIONAL ADVICE. TO THE FULLEST EXTENT PERMITTED BY LAW, WE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED, IN CONNECTION WITH THE SERVICES AND YOUR USE THEREOF, INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NON-INFRINGEMENT. WE MAKE NO WARRANTIES OR REPRESENTATIONS ABOUT THE ACCURACY OR COMPLETENESS OF THE SERVICES' CONTENT OR THE CONTENT OF ANY WEBSITES LINKED TO THE SERVICES AND WE WILL ASSUME NO LIABILITY OR RESPONSIBILITY FOR ANY (1) ERRORS, MISTAKES, OR INACCURACIES OF CONTENT AND MATERIALS, (2) PERSONAL INJURY OR PROPERTY DAMAGE, OF ANY NATURE WHATSOEVER, RESULTING FROM YOUR ACCESS TO AND USE OF THE SERVICES, (3) ANY UNAUTHORIZED ACCESS TO OR USE OF OUR SECURE SERVERS AND/OR ANY AND ALL PERSONAL INFORMATION AND/OR FINANCIAL INFORMATION STORED THEREIN, (4) ANY INTERRUPTION OR CESSATION OF TRANSMISSION TO OR FROM THE SERVICES, (5) ANY BUGS, VIRUSES, TROJAN HORSES, OR THE LIKE WHICH MAY BE TRANSMITTED TO OR THROUGH THE SERVICES BY ANY THIRD PARTY, AND/OR (6) ANY ERRORS OR OMISSIONS IN ANY CONTENT AND MATERIALS OR FOR ANY LOSS OR DAMAGE OF ANY KIND INCURRED AS A RESULT OF THE USE OF ANY CONTENT POSTED, TRANSMITTED, OR OTHERWISE MADE AVAILABLE VIA THE SERVICES. WE DO NOT WARRANT, ENDORSE, GUARANTEE, OR ASSUME RESPONSIBILITY FOR ANY PRODUCT OR SERVICE ADVERTISED OR OFFERED BY A THIRD PARTY THROUGH THE SERVICES, ANY HYPERLINKED WEBSITE, OR ANY WEBSITE OR MOBILE APPLICATION FEATURED IN ANY BANNER OR OTHER ADVERTISING, AND WE WILL NOT BE A PARTY TO OR IN ANY WAY BE RESPONSIBLE FOR MONITORING ANY TRANSACTION BETWEEN YOU AND ANY THIRD-PARTY PROVIDERS OF PRODUCTS OR SERVICES. AS WITH THE PURCHASE OF A PRODUCT OR SERVICE THROUGH ANY MEDIUM OR IN ANY ENVIRONMENT, YOU SHOULD USE YOUR BEST JUDGMENT AND EXERCISE CAUTION WHERE APPROPRIATE. BY USING THE SERVICES, YOU ACKNOWLEDGE AND AGREE THAT YOU ARE ACCEPTING THE TERMS AS-IS, WITHOUT ANY RIGHT TO DISPUTE, CHALLENGE, OR SEEK MODIFICATION OF THESE TERMS.</p> 19. LIMITATIONS OF LIABILITY <p>IN NO EVENT WILL WE OR OUR DIRECTORS, EMPLOYEES, OR AGENTS BE LIABLE TO YOU OR ANY THIRD PARTY FOR ANY DIRECT, INDIRECT, CONSEQUENTIAL, EXEMPLARY, INCIDENTAL, SPECIAL, OR PUNITIVE DAMAGES, INCLUDING LOST PROFIT, LOST REVENUE, LOSS OF DATA, OR OTHER DAMAGES ARISING FROM YOUR USE OF THE SERVICES, EVEN IF WE HAVE BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. NOTWITHSTANDING ANYTHING TO THE CONTRARY CONTAINED HEREIN, OUR LIABILITY TO YOU FOR ANY CAUSE WHATSOEVER AND REGARDLESS OF THE FORM OF THE ACTION, WILL AT ALL TIMES BE LIMITED TO THE AMOUNT PAID, IF ANY, BY YOU TO US DURING THE SIX (6) MONTH PERIOD PRIOR TO ANY CAUSE OF ACTION ARISING. CERTAIN US STATE LAWS AND INTERNATIONAL LAWS DO NOT ALLOW LIMITATIONS ON IMPLIED WARRANTIES OR THE EXCLUSION OR LIMITATION OF CERTAIN DAMAGES. IF THESE LAWS APPLY TO YOU, SOME OR ALL OF THE ABOVE DISCLAIMERS OR LIMITATIONS MAY NOT APPLY TO YOU, AND YOU MAY HAVE ADDITIONAL RIGHTS.</p> 20. INDEMNIFICATION <p>You agree to defend, indemnify, and hold us harmless, including our subsidiaries, affiliates, and all of our respective officers, agents, partners, and employees, from and against any loss, damage, liability, claim, or demand, including reasonable attorneys' fees and expenses, made by any third party due to or arising out of: (1) your Contributions; (2) use of the Services; (3) breach of these Legal Terms; (4) any breach of your representations and warranties set forth in these Legal Terms; (5) your violation of the rights of a third party, including but not limited to intellectual property rights; or (6) any overt harmful act toward any other user of the Services with whom you connected via the Services. Notwithstanding the foregoing, we reserve the right, at your expense, to assume the exclusive defense and control of any matter for which you are required to indemnify us, and you agree to cooperate, at your expense, with our defense of such claims. We will use reasonable efforts to notify you of any such claim, action, or proceeding which is subject to this indemnification upon becoming aware of it.</p> 21. USER DATA <p>We will maintain certain data that you transmit to the Services for the purpose of managing the performance of the Services, as well as data relating to your use of the Services. Although we perform regular routine backups of data, you are solely responsible for all data that you transmit or that relates to any activity you have undertaken using the Services. You agree that we shall have no liability to you for any loss or corruption of any such data, and you hereby waive any right of action against us arising from any such loss or corruption of such data.</p> 22. ELECTRONIC COMMUNICATIONS, TRANSACTIONS, AND SIGNATURES <p>Visiting the Services, sending us emails, and completing online forms constitute electronic communications. You consent to receive electronic communications, and you agree that all agreements, notices, disclosures, and other communications we provide to you electronically, via email and on the Services, satisfy any legal requirement that such communication be in writing. YOU HEREBY AGREE TO THE USE OF ELECTRONIC SIGNATURES, CONTRACTS, ORDERS, AND OTHER RECORDS, AND TO ELECTRONIC DELIVERY OF NOTICES, POLICIES, AND RECORDS OF TRANSACTIONS INITIATED OR COMPLETED BY US OR VIA THE SERVICES. You hereby waive any rights or requirements under any statutes, regulations, rules, ordinances, or other laws in any jurisdiction which require an original signature or delivery or retention of non-electronic records, or to payments or the granting of credits by any means other than electronic means.</p> 23. MISCELLANEOUS <p>These Legal Terms and any policies or operating rules posted by us on the Services or in respect to the Services constitute the entire agreement and understanding between you and us. Our failure to exercise or enforce any right or provision of these Legal Terms shall not operate as a waiver of such right or provision. These Legal Terms operate to the fullest extent permissible by law. We may assign any or all of our rights and obligations to others at any time. We shall not be responsible or liable for any loss, damage, delay, or failure to act caused by any cause beyond our reasonable control. If any provision or part of a provision of these Legal Terms is determined to be unlawful, void, or unenforceable, that provision or part of the provision is deemed severable from these Legal Terms and does not affect the validity and enforceability of any remaining provisions. There is no joint venture, partnership, employment or agency relationship created between you and us as a result of these Legal Terms or use of the Services. You agree that these Legal Terms will not be construed against us by virtue of having drafted them. You hereby waive any and all defenses you may have based on the electronic form of these Legal Terms and the lack of signing by the parties hereto to execute these Legal Terms.</p> 24. CONTACT US <p>In order to resolve a complaint regarding the Services or to receive further information regarding use of the Services, please contact us at:</p> <p>Quant Journey Email: jakub@quantjourney.pro</p>"},{"location":"tutorials/backtesting-general/","title":"Backtesting - How easy is it to get it wrong?","text":"<p>In today\u2019s post you will read about:</p> <ul> <li>backtesting principles like setting benchmarks and objectives to avoid unsuitable ideas and overfitting,</li> <li>details the components of a trading strategy including filters, signals, and rules,</li> <li>how to implement and evaluate backtesting and trading strategies through code snippets.</li> </ul>"},{"location":"tutorials/backtesting-general/#design-testing-and-optimisation-of-bactestig-systems","title":"Design, Testing, and Optimisation of Bactestig Systems","text":"<p>The benefit of an accurately tested systematic strategy is trading profit. </p> <p>Many analysts and portfolio managers face numerous challenges when developing systematic trading systems.  Each part of the system must be carefully built to ensure it doesn\u2019t lose money and stays financially stable. The process includes formulating hypothesis, then turning  trading ideas into tests, regularly checking the results, and carefully managing the risks of overfitting. A well-designed system not only helps in evaluating and refining strategies but also keeps them competitive in fast-changing markets. It needs to be quick, enabling you to test your idea within minutes. Ideally, it should not take more than 30 minutes from conception to confirmation and subsequent refinement. </p> <p>You might ask why not just use established backtesting tools like Backtrader or QuantConnect? The simple answer, as Jim Simons has previously addressed, is that using common tools often yields common results. While these platforms are suitable for basic strategies and can provide quick outcomes, they are less adept at handling more sophisticated techniques such as conditional portfolio optimizations, regime identification, advanced risk management, and the integration of machine learning. Even if you want to modify their code, it will take you more time and effort to add such capabilities that meet your requirements.</p> <p>Foremost, here at QuantJourney blog, we are passionate about our educational journey to build your own modern, modular trading system and backtester framework. Learning to code as you go not only enhances your skills but also allows you to customize and directly observe the effects on your code, strategies, and ultimately, your financial returns..</p>"},{"location":"tutorials/backtesting-general/#backtesting-principles","title":"Backtesting Principles","text":"<p>Before diving into coding or developing trading ideas, each investor needs to reflect on some key questions related to their unique trading style and risk tolerance. These aspects vary widely among individuals and are fundamental to your approach. Here are some essential questions to consider:</p> <ul> <li>What assets do you plan to trade, and why?</li> <li>On which exchanges will you trade these assets, and why?</li> <li>Why not trade assets A, B and C in exchanges E, F and G?</li> <li>Why would your strategy work?</li> <li>What is the biggest risk associated with your strategy?</li> <li>When was last time this major risk occurred and what happened?</li> <li>What is your investment holding period, and why have you chosen this duration?</li> <li>What other things could go wrong?</li> <li>How frequently does the scenario your strategy relies on occur?</li> <li>What are your profit expectations? Why?</li> </ul> <p>Taking the time to answer these questions can seem tedious, but many investors skip this step and potentially end up losing money. The more prepared you are, the lower your chances of losses and the better your prospects for profit\u2014or at least for improving your strategy to become more profitable.</p>"},{"location":"tutorials/backtesting-general/#backtesting-framework-blocks","title":"Backtesting Framework Blocks","text":""},{"location":"tutorials/backtesting-general/#choosing-a-benchmark","title":"Choosing a benchmark","text":"<p>Selecting a benchmark is crucial but often overlooked by investors. A benchmark allows you to measure your performance and provides insight into how well your strategy performs. However, it's important not to become overly fixated on the benchmark, as this can lead to excessive adjustments. Here are some options for choosing a benchmark:</p> <ul> <li>Market Observables: these are common benchmarks for most traders. Metrics such as $/day, %/day, $/contract, % of daily volume.</li> <li>Archetypal Strategies: use established strategies, like an Moving Average Crossover (MA-cross) for a momentum strategy, as benchmarks. Or Moving Average Convergence Divergence (MACD) to determine the direction and strength of market trends in a trend following.</li> <li>Alternative Indices: indices like S&amp;P 500 Index, NASDAQ Composite Index, or more sophisticated as Vanguard Total Stock Market Index (VTSMX) can serve as benchmarks, especially relevant for strategies similar to those indexed, when you trade large caps (more on that below)</li> <li>Custom Tracking Portfolios: create a bespoke benchmark by assembling a tracking portfolio that mirrors a specific strategy archetype, such as a capitalization-weighted index which uses market cap to weight securities and rebalances periodically according to the index rules.</li> </ul> <p>Good benchmarks provide insight into what drives your strategy returns. Choosing more than one benchmark - which is quite common - can also help prevent overfitting by avoiding an exclusive focus on a single benchmark.</p> <p>I have implemented simple benchmark parameter in config file for backtesting framework as:</p> <pre><code>\"benchmark\": \"SPY\"  \n</code></pre> <p>which further can be expanded to have multiple benchmarks, or more complex ones.</p>"},{"location":"tutorials/backtesting-general/#choosing-an-objective","title":"Choosing an Objective","text":"<p>When creating a strategy, it's crucial to start with a well-defined objective.</p> <p>Your business objective should specify the expected returns on your capital, tail risk parameters, the level of leverage you intend to use, and your limits on potential drawdowns.</p> <p>For example, leverage limits are often strictly defined by your broker, and these directly affect your allowable drawdowns: using 10:1 leverage implies a strict 10% drawdown limit, while 4:1 leverage equates to a 25% drawdown limit. You should also establish clear return objectives, as a strategy may not be worthwhile if it cannot meet these targets.</p> <p>Once you've defined these objectives, you need to formulate them in a way that allows for easy programmatic evaluation of your strategy.</p> <p>The most commonly used objective of this type is the Sharpe Ratio (SR) which is most often calculated as mean return over volatility.  There are also many other modified Sharpe-style ratios.</p> <ul> <li>Information Ratio: annualised return over annualised risk,</li> <li>Profit factor: gross profits divided by gross losses,</li> <li>Sortino Ratio: similar to SR, but focuses only on downside volatility, calculating the excess return over the risk-free rate relative to the downside risk,</li> <li>Calmar Ratio: annualized return divided by the maximum drawdown,</li> <li>Return over expected tail loss: returns relative to the tail risk, focusing on potential losses in extreme market condition.</li> </ul> <p>Setting benchmarks and objectives early helps discard unsuitable ideas. Without understanding the strategy's context, you risk overfitting and poor analysis.</p>"},{"location":"tutorials/backtesting-general/#trading-strategy-filters-indicators-signals-rules","title":"Trading Strategy (Filters, Indicators, Signals, Rules)","text":"<p>A trading strategy or investment approach is more than just a testable hypothesis. After creating and confirming a hypothesis, you need to specify the strategy. I like the approach which formaizes the strategy structure into: filters \u2192 indicators \u2192 signals, \u2192 and rules.</p>"},{"location":"tutorials/backtesting-general/#filters","title":"Filters","text":"<p>Filters help to select the instruments to trade. They may be part of the formulated hypothesis, or they may be market characteristics that allow the rest of the strategy to trade better. For instance, in fundamental equity investing, some strategies consist solely of filters.</p> <p>In our code we use term eligibility to address filters, which is set in configuration file \u2018default_startegy.json\u2019 as:</p> <pre><code>\"eligibility_criteria\": {\n                            \"active_threshold\": 0.05,\n                            \"volatility_threshold\": 0.0002,\n                            \"liquidity_threshold\": 1000000,\n                            \"excluded_sectors\": [\"Banking\", \"Technology\"]\n</code></pre> <p>which allows to filter equities based on active threshold, volatility, and liquidity. If necessary, you can also exclude certain sectors.</p> <p>You can also specify the instruments you want to test against your strategy in the same config file or by stating it in the code, as shown below:</p> <p>```py linenums=\"1\", title=\"run.py\"     dc = DataConnector()     output = await dc.indices.async_fetch_russell_1000_index()     tickers = output['Ticker']</p> <pre><code>my_strategy = BaseStrategy(\n                            config_file_path=\"qlib/backtesting/strategies/default_strategy.json\",\n                            instruments=tickers,\n                            trading_range={'start': '2010-01-01', 'end': '2023-12-31'},\n                            initial_capital=20000,\n                            backtest_name=\"my_strategy\"\n)\n</code></pre> <pre><code>\nThe backtester code checks against them as follows:\n\n```python\ndef preprocess_eligibility(self) -&gt; None:\n        \"\"\"\n        Determine the eligibility of instruments based on specific criteria defined in the strategy parameters,\n        including checks for volatility, liquidity, active status, base close price, and future returns.\n\n        Args:\n            None\n\n        Returns:\n            dict: A dictionary where keys are instrument names, and values are booleans indicating eligibility.\n        \"\"\"\n        eligibility_criteria = self.config.get(\"eligibility_criteria\", {})\n\n        for instrument in self.instruments:\n            eligible = True\n\n            # Volatility check (last 5 days)\n            volatility_threshold = eligibility_criteria.get(\"volatility_threshold\", 0.00001)\n            volatility_mean = self.market_data[instrument]['Volatility'].rolling(window=5).mean()\n            volatility_eligible = volatility_mean &gt; volatility_threshold\n\n            # Liquidity check\n            liquidity_threshold = eligibility_criteria.get(\"liquidity_threshold\", 1000000)\n            liquidity_eligible = self.market_data[instrument]['Liquidity'].mean() &gt; liquidity_threshold\n\n            # Additional checks\n            active_eligible = self.market_data[instrument]['Active'].astype(\"bool\")\n            positive_close_eligible = (self.market_data[instrument]['Close'] &gt; 0).astype(\"bool\")\n\n            max_return_threshold = 0.20\n            last_return_eligible = (self.market_data[instrument]['Returns'] &lt; max_return_threshold).astype(\"bool\")\n\n            # Combine all eligibility checks\n            self.market_data[instrument]['Eligible'] = (\n                volatility_eligible\n                &amp; liquidity_eligible\n                &amp; active_eligible\n                &amp; positive_close_eligible\n                &amp; last_return_eligible\n            )\n</code></pre> <p>In advanced scenarios, we may expand or shrink the investible universe based on additional specific criteria / filters. These can encompass financial metrics such as P/E ratios and dividend yields or market behaviors like volatility and trading volume, or sector-specific data. By applying such filters, we can focus on assets that align with our specific investment criteria or risk profiles, effectively tailoring our approach to our strategy and risk tolerance. For instance, some use Lo's Variance Ratio to detect market patterns, adjusting their strategies to exploit trends or guard against reversals. This dynamic adjustment helps optimize returns and manage risks. </p> <p>Currently, this feature is not implemented. However, we do have a market regime identification system in place that adjusts daily transactions. This adjustment is made using a benchmark with a straightforward yet effective approach. Refer to the following configuration:</p> <pre><code>\"market_regime_params\": {\n                            \"indicators\": [\"moving_average_slope\", \"breadth_thrust\"],\n                            \"moving_average_slope\": 20,\n                            \"breadth_thrust\": 0.5\n        },\n</code></pre> <p>and function in code:</p> <pre><code>def preprocess_market_regime(self) -&gt; None:\n        \"\"\"\n        Preprocess the market regime based on the historical market data.\n        \"\"\"\n        logger.info(\"Preprocessing market regime.\")\n\n        benchmark = self.config['benchmark']\n        market_regime_data = self.data_manager.get_market_data([benchmark], self.trading_range)\n\n        if market_regime_data is None:\n            logger.error(\"Error fetching benchmark data.\")\n            raise ValueError(\"Error fetching benchmark data.\")\n\n        # Passing config to market regime class\n        market_regime_config = self.config.get('market_regime_params', {})\n\n        # Passing config to market regime class\n        self.market_regime = MarketRegime.create_with_data(market_regime_config, market_regime_data, benchmark)\n\n        # Calculate the market regime for each date in the trading range\n        self.market_regime_data = self.market_regime.identify_regime()\n\n        # Convert the market regime data to the desired index labels\n        self.market_regime_data = self.market_regime_data.replace({0: 'sideways', 1: 'bull', 2: 'bear'})\n\n        # # Get the trading dates as a timezone-aware DatetimeIndex and convert to UTC\n        trading_dates = pd.DatetimeIndex(self.data_manager.get_trading_dates(self.trading_range))\n        trading_dates_utc = trading_dates.tz_localize('UTC')\n\n        # Localize the market regime data to the 'UTC' timezone\n        self.market_regime_data = self.market_regime_data.tz_localize('UTC')\n\n        # Resample market_regime_data to match the frequency of trading dates\n        self.market_regime_data = self.market_regime_data.reindex(trading_dates_utc, method='bfill')\n\n        logger.info(\"Market regime preprocessing completed.\")\n</code></pre> <p>and use in the loop:</p> <pre><code># Get the market regime for the current date from the market_regime_series\ncurrent_market_regime = self.market_regime_data.loc[current_date]\n\n# Generate daily transactions for the current trading day based on the generated signals and current market regime\ndaily_transactions_dict = self.generate_daily_transactions(current_date, current_market_regime)\n\n# Adjust daily transactions based on the risk profiles\ndaily_transactions_adjusted_dict = self.risk_management.adjust_transactions_with_risk_profiles(daily_transactions_dict, self.market_data, current_market_regime)\n</code></pre>"},{"location":"tutorials/backtesting-general/#indicators","title":"Indicators","text":"<p>Indicators are quantitative values derived from market data. Examples of indicators include moving averages, RSI, MACD, volatility bands, channels, factor models, and theoretical pricing models. They are calculated in advance on market data (or on other indicators). Indicators have no knowledge of current positions or trades.</p> <p>A common risk when defining your indicators is confusing the indicator with the strategy. The indicator is a model that describes some aspect of the market or a theoretical price. It is not a strategy on its own. A strategy requires interactions with its other components to be fully specified.</p> <p>In the backtesting framework, you can use indicators from fundamental analysis - calculated as key ratios based on companies' financial statements (income statement, balance sheet, and profit and loss) - as well as technical indicators.  Just to name few:</p> <pre><code>Functions:\n        - RSI\n        - SMA\n        - EMA\n        - BB\n        - ATR\n        - SAR\n        - MACD\n        - STOCH\n        - ADX\n        - CCI\n        - WILLR\n        - OBV\n        - ROC\n        - TRIX\n        - KELTNER_CHANNELS\n        - DONCHIAN_CHANNELS\n        - AROON\n        - STDEV\n        - ULTIMATE_OSCILLATOR\n        - ADXR\n        - CMO\n        - MFI\n        - PRICE_ROC\n</code></pre> <p>and for fundamental ones:</p> <pre><code>gross_profit_margin\noperating_profit_margin\nnet_profit_margin\nreturn_on_assets\nreturn_on_equity\ndebt_to_equity\ncurrent_ratio\nquick_ratio\ncash_flow_to_debt\nprice_to_earnings\nprice_to_book\nprice_to_sales\nenterprise_value\nev_to_ebitda\nev_to_sales\npeg_ratio\ndividend_yield\ndividend_payout_ratio\nasset_turnover_ratio\ninventory_turnover_ratio\ndays_sales_outstanding\ndays_inventory_outstanding\ndays_payables_outstanding\ncash_conversion_cycle\nearnings_per_share\nbook_value_per_share\nfree_cash_flow_per_share\ncash_flow_per_share\noperating_cash_flow_ratio\nfree_cash_flow_to_equity\ncash_flow_to_debt_ratio\nprice_to_cash_flow_ratio\n</code></pre>"},{"location":"tutorials/backtesting-general/#signals","title":"Signals","text":"<p>In our backtesting framework we calculate indicators in SignalGeneration class (and functions as preprocess_signals) - that\u2019s because we use only those indicators, which are used for our strategy defined in the config file with signals.</p> <p>Signals describe the interaction between filters, market data, and indicators. Signal processes describe the desire for an action, but the strategy may choose not to act or may not be actionable at the time. They include \u2018classic\u2019 things like crossovers and thresholds, as well as more complicated interactions between pricing models, other indicators, and other signal processes. It is our experience that signals may often interact with other signals. The final signal is a composite of multiple things. The combination of intermediate signals will increase the likelihood of actually placing or modifying orders based on the final signal.</p> <p>First see the our config for signals:</p> <pre><code>\"signal_generator_params\": {\n                        \"buy_signals\": {\n                                    \"SMA_10_50_crossover\": \"SMA(10) &gt; SMA(50)\",\n                                    \"RSI_oversold\": \"RSI(14) &lt; 30\",\n                                    \"MACD_signal\": \"MACD(12, 26, 9) &gt; 0\"\n                        },\n                        \"sell_signals\": {\n                                    \"SMA_10_50_reverse_crossover\": \"SMA(10) &lt; SMA(50)\",\n                                    \"RSI_overbought\": \"RSI(14) &gt; 70\"\n                        }\n        },\n</code></pre> <p>Please note that like indicators, all the signals in our backtesting framework are calculated in advance on the market data:</p> <pre><code>def preprocess_signals(self) -&gt; None:\n        \"\"\"\n        Preprocess the technical indicators for each instrument based on the historical market data and the configuration.\n\n        Args:\n            instruments (list): A list of instruments to preprocess signals for.\n            market_data (dict): A dictionary containing historical market data per instrument.\n\n        Returns:\n            None\n        \"\"\"\n        logger.info(\"Preprocessing signals.\")\n\n        signals_config = self.config.get('signal_generator_params', {})\n        buy_signals = signals_config.get('buy_signals', {})\n        sell_signals = signals_config.get('sell_signals', {})\n        all_signals = {**buy_signals, **sell_signals}\n\n        # List of indicators to compute\n        unique_signals = set() \n\n        for signal_name, condition in all_signals.items():\n            parts = condition.replace(\", \", \",\").split()  # Replace avoids splitting function parameters    \n            for part in parts:\n                if '(' in part and ')' in part:\n                    start_idx = part.find('(')\n                    end_idx = part.find(')')\n\n                    indicator_name = part[:start_idx]\n                    params_str = part[start_idx+1:end_idx]\n\n                    try:\n                        params = tuple(int(p.strip()) for p in params_str.split(','))\n                    except ValueError:\n                        # Handle the case where conversion fails, indicating non-integer parameters\n                        # This block can be adjusted based on the specific needs or expected parameter types\n                        params = tuple(p.strip() for p in params_str.split(','))\n\n                    unique_signals.add((indicator_name, len(params), params))\n                else:\n                    indicator_name = ''.join(filter(str.isalnum, part.split()[0]))  # Removing any non-alphanumeric characters\n                    if indicator_name.isalpha():  # Check if the part is purely alphabetic\n                        unique_signals.add((indicator_name, 0, ()))\n\n        # Convert set of unique indicators back to a list of lists for the output\n        unique_signals_list = [list(item) for item in unique_signals]\n\n        for instrument in self.instruments:\n            market_data = self.market_data[instrument]\n            not_recognized_or_error_indicators = self.signal_generator.process_technical_indicators(instrument, market_data, unique_signals_list)\n            if not_recognized_or_error_indicators:\n                logger.error(f\"Error computing indicators: {not_recognized_or_error_indicators}\")\n                raise ValueError(f\"Error computing indicators: {not_recognized_or_error_indicators}\")\n\n        logger.info(\"Signal preprocessing completed.\")\n</code></pre> <p>What you can see, they are calculated prior simulation in a special class called SignalGenerator (additional module) with functions to evaluate signal per data, e.g. SMA(20), SMA(50) to calculate simple moving average over 20 and 50 days, and also give True/False if we asking \u2018SMA(20) &gt; SMA(50)\u2019.</p> <pre><code>def evaluate_signal(self, market_data, condition):\n        \"\"\"\n        Evaluate a signal condition by replacing function calls with their computed values.\n\n        Args:\n            market_data (pd.DataFrame): A DataFrame containing historical market data.\n            condition (str): The signal condition to evaluate.\n\n        Returns:\n            pd.Series: A Series containing the evaluated signal values:\n                1 for True (buy/sell signal), 0 for False (no signal).\n        \"\"\"\n        # Split the condition into parts\n        parts = condition.replace(\", \", \",\").split()\n\n        # Replace function calls with their computed values\n        for i, part in enumerate(parts):\n            if '(' in part and ')' in part:\n                start_idx = part.find('(')\n                end_idx = part.find(')')\n\n                indicator_name = part[:start_idx]\n                params_str = part[start_idx+1:end_idx]\n\n                try:\n                    params = tuple(int(p.strip()) for p in params_str.split(','))\n\n                except ValueError:\n                    params = tuple(p.strip() for p in params_str.split(','))\n\n                # Format parameters correctly for single-parameter scenarios without trailing commas\n                params_formatted = '_'.join(map(str, params))\n                #params_formatted = ','.join(map(str, params)).rstrip(',')\n\n                # If there are parameters, join them with an underscore; otherwise, just use the indicator name\n                column_name = f\"{indicator_name}_{params_formatted}\" if params_formatted else indicator_name\n\n                # Check and replace in your condition\n                if column_name in market_data.columns:\n                    parts[i] = f\"market_data['{column_name}']\"\n                else:\n                    print(market_data.columns)\n                    raise KeyError(f\"Column '{column_name}' not found in market_data.\")\n\n        # Join the modified parts back into the condition string\n        modified_condition = ' '.join(parts)\n\n        try:\n            # Evaluate the modified condition\n            signal_values = eval(modified_condition)\n\n            # Convert the boolean signal values to integers (1 for True, 0 for False)\n            signal_values = signal_values.astype(int)\n\n        except (KeyError, TypeError, ValueError):\n            # Handle errors related to missing or invalid data\n            signal_values = pd.Series(np.nan, index=market_data.index)\n\n        return signal_values\n</code></pre>"},{"location":"tutorials/backtesting-general/#rules","title":"Rules","text":"<p>Finally the rules.The two minimum requirements for a trading strategy are a rule to enter the market and a rule to exit the market. Typically, a strategy consists of buy and sell conditions that \"mirror\" each other. </p> <p>In the default configuration file, I've defined four strategies to run in parallel. The goal is to establish rules, which serve as basic guidelines for entering and exiting the market:</p> <pre><code>\"rules_params\": {\n                            \"simple_crossover\": {\n                                \"description\": \"A simple crossover\",\n                                \"buy\": \"SMA_10_50_crossover\",\n                                \"sell\": \"SMA_10_50_reverse_crossover\"\n                            },\n                            \"trend_following\": {\n                                \"description\": \"A trend-following rule\",\n                                \"buy\": \"SMA_10_50_crossover AND RSI_oversold\",\n                                \"sell\": \"SMA_10_50_reverse_crossover OR RSI_overbought\"\n                            },\n                            \"momentum\": {\n                                        \"description\": \"A momentum-based rule\",\n                                        \"buy\": \"MACD_signal\",\n                                        \"sell\": \"RSI_overbought\"\n                            },\n                            \"mean_reversion\": {\n                                        \"description\": \"A mean-reversion rule\",\n                                        \"buy\": \"RSI_oversold\",\n                                        \"sell\": \"RSI_overbought\"\n                            }\n        },\n</code></pre> <p>As we see, the rules, in both research/backtesting and in production, are what take input from market data, indicators, and signals, and actually take action. Entry, Exits, Risk, Profit Taking, and Portfolio Rebalancing are all rule processes. Rules are path dependent, meaning that they are aware of the current market state, the current portfolio, all working orders, and any other data available at the time the rule is being evaluated. No action is instantaneous, so rules also have a cost in time.</p> <p>Hypothesis Driven Development</p> <p>Creating a strategy is costly in terms of time, which is needed for research, and money for implementation into a live trading environment. To maximize return on this investment, we adopt a hypothesis-driven approach. This enables us to quickly confirm ideas, reject failures with minimal cost, and avoid many overfitting risks.</p> <p>Each component of the strategy, including filters, indicators, signals, and various types of rules, represents different parts of the strategy's hypothesis and business objectives. Our goal at every stage should be to ensure that every component of the strategy is effective: adding value, improving predictions, validating the hypothesis, etc., before proceeding to the next component.</p> <p>To understand the results of a trading model and hypothesis I like to follow the even steps model:</p> <ol> <li>Formulate the trading strategy.</li> <li>Write the rules in a definitive form.</li> <li>Test the trading strategy.</li> <li>Optimize the trading strategy.</li> <li>Trade the strategy.</li> <li>Monitor trading performance and compare it to test performance.</li> <li>Improve and refine the trading strategy.</li> </ol> <p>Each of these steps depends on the success of the preceding one. </p> <p>To comprehend the outcomes of a trading model and hypothesis, I prefer using the seven-step model:</p> <ol> <li>Formulate the trading strategy and benchmark.</li> <li>Define the filters, signals and rules explicitly.</li> <li>Test the trading strategy against benchmark.</li> <li>Optimise the trading strategy.</li> <li>Implement the strategy through trades.</li> <li>Monitor trading performance and compare it with the test performance.</li> <li>Enhance and refine the trading strategy.</li> </ol> <p>The success of each step is contingent upon the success of the previous one.</p> <p>During the creation and testing of hypotheses, most strategy ideas are rejected. Many observations about market conditions lack the structure needed to form a testable hypothesis. Even if these ideas might be correct, they cannot be used to create a quantitative strategy with confidence unless they can be quantified into a provable or disprovable conjecture. This process protects against pursuing fundamentally questionable or erroneous ideas and is a valuable use of time. The quicker an untestable idea is dismissed for more verifiable ones, the better.</p> <p>A bit more on elements of further roadmap and studies:</p> <p>You might have noticed the section of the code that evaluates indicators. This can be quite challenging without a defined action theory as indicators represent measurable aspects of reality, such as theoretical prices, factor impacts, series turning points, or slope. A solid understanding of an indicator's properties allows us to apply a symmetric filter to historical data, like ARMA or Kalman processes. However, these are descriptive rather than predictive, as they primarily describe past behavior. We can further refine our code by comparing the indicator with the filter using methods such as kernel methods, clustering, mean squared error, or distance measures.</p> <p>Similarly, a signal is a directional prediction for a specific point in time. The timing of this signal can vary based on the parameterisation of the indicator and/or signal functions.</p> <p>The same principle applies to signals per regime or region. When comparing input parameter expectations, you should see clusters of similar positive and/or negative return expectations in similar or contiguous parameter combinations.</p> <p>The signals generated by the backtests can also be empirically classified. You can measure statistics like the number of entry and exit signals, the distribution of the period between entries and exits, and the degree of overlap between entry and exit signals.</p> <p>This task has been started in a separate class called PerformanceReporting. However, it will need a few more days to be fully completed.</p> <p>Since every signal is a prediction, we can utilize the literature on model specification and testing of predictions when analyzing signal processes. Methods range from simple ones, such as mean squared model error or kernel distance from an ideal process, to more extensive evaluation techniques like the Akaike Information Criterion (AIC), Bayesian Information Criterion (BIC), or cross-validation.</p> <p>Finally we have signal decay - factors with faster decay require higher turnover, while higher turnover incurs greater transaction cost, which has to be balanced with the predictive power of the models. Some signals decay so quickly that alpha opportunity disappears within hours, minutesor even seconds. For example, a simple backtesting of the one-day reversal factor (i.e., buying stocks that have fallen the most on the previous day) seems to suggest that short-term reversal is a great strategy. The only problem is that the factor itself can only be computed after the market closes; therefore, the earliest time we can trade on the signal is at the next day\u2019s open.</p> <p>That is not yet implemented, hence offers quite interesting further development.</p> <p>Outliers, Z-Score</p> <p>As for my own studies, I backtesting a lot of Middle-East equities, there are a lot of outliers. And the easiest way to deal with outliers is to control them. More often than not, outliers are caused by data errors or specific events that are unlikely to be repeated in the future. There is little information on outliers and they usually cause more harm than good. We could either remove them from our sample completely or impose some restrictions by winsorization. Unlike data truncation, winsorization replaces data greater or less than certain extreme x percentiles (often set as 5%, 1%, or 0.1%) with the xth percentile values. That\u2019s is being implemented too.</p> <p>We use Z-score for data normalization as well. Our preferred method for this is through a ranking transformation, wherein we rank all stocks based on their factor scores. This ranking transformation transforms any distribution into a uniform one, effectively managing outliers into a reasonable data range. In our proprietary models, we take it a step further by applying an inverse normal transformation, ensuring our factors always follow a standard normal distribution with a mean of zero and a standard deviation of one.</p> <p>Given that there's more to cover and this post is already quite lengthy, the following topics will be discussed in more detail in the next post (likely next week):</p> <p>Regime analysis, rebalancing and asset allocation, the empirical nature of entry/exit rules, trader statistics, and a few biases such as look-ahead bias, survivorship bias, data mining bias, and data snooping bias.</p>"},{"location":"tutorials/tutorials/","title":"Blog on Quantitative Trading","text":"<p>In our blog at quantjourney.substack.com we explore various aspects of quantitative trading. From basic concepts to advanced methodologies, our articles cover a wide range of topics tailored for both beginners and seasoned traders. Please see here links to some key ones.</p>"},{"location":"tutorials/tutorials/#series-quant-trading-framework","title":"Series: Quant Trading Framework","text":"<p>Delve into our detailed examination of the Quant Trading Framework:</p> <ul> <li>Quant Trading Framework (Part 1)</li> <li>Quant Trading Framework (Part 2)</li> <li>Real-Time Order Book for Crypto &amp; Backtesting Framework (Part 3)</li> </ul>"},{"location":"tutorials/tutorials/#volatility-measures","title":"Volatility Measures","text":"<p>Insights into various volatility measures and their applications in trading:</p> <ul> <li>Yang-Zhang Volatility</li> <li>Rogers-Satchell Volatility</li> <li>Parkinson Historical Volatility</li> </ul>"},{"location":"tutorials/tutorials/#backtesting-techniques","title":"Backtesting Techniques","text":"<p>Learn about the potential pitfalls and best practices in backtesting trading strategies:</p> <ul> <li>Backtesting - How easy is it to get it wrong?</li> </ul>"},{"location":"tutorials/tutorials/#sector-analysis","title":"Sector Analysis","text":"<p>A closer look at stock performance across various sectors:</p> <ul> <li>Analyzing Stock Performance Across Key Sectors (Crypto, Metals, Energy, Weed)</li> </ul>"},{"location":"tutorials/tutorials/#special-topics","title":"Special Topics","text":"<p>Explore specialized areas and tools in quantitative trading:</p> <ul> <li>How to select ETFs - Simple Technical &amp; Fundamental Scanner with Quant Trading Framework</li> <li>Solving Conditional Value-at-Risk (CVaR) with CVXPY</li> <li>Top 30 Moving Average Methods (1/3)</li> </ul> <p>For further queries or suggestions, feel free to contact us via email. Subscribe to our newsletter for the latest updates and insights in quantitative trading.</p>"},{"location":"utils/data_connector/","title":"Module Information","text":"<p>Description: Data Connector class for QuantJourney Framework</p> <p>This class is designed to facilitate the acquisition and management of financial market data  from various external sources. It dynamically initializes data sources (or \"connectors\") and  asset types based on configuration, making it highly adaptable for quantitative analysis  in hedge fund applications.</p> <p>Features: - Dynamic data source initialization based on environment variables and configuration files. - Flexible asset class access through a unified interface, allowing for easy extension. - Robust error handling to ensure reliability in data fetching and processing.</p> <p>Author: jpolec</p> <p>Date: 27-02-2024 and 18-03-2024</p>"},{"location":"utils/data_connector/#class-dataconnector","title":"Class: DataConnector:()","text":""},{"location":"utils/data_connector/#method-load_configuration","title":"Method: load_configuration","text":"<pre><code>def load_configuration(\n            config_path\n        ) -&gt; None\n</code></pre> <p>Loads configuration from a JSON file. Parameters:</p> Name Type Description <code>config_path</code> <code>None</code> str, The path to the configuration file. <p>Returns:</p> Type Description <code>None</code> None"},{"location":"utils/data_connector/#method-initialize_connectors","title":"Method: initialize_connectors","text":"<pre><code>def initialize_connectors() -&gt; Dict[str, object]\n</code></pre> <p>Dynamically initializes connectors based on the loaded configuration.</p> <p>Returns:</p> Type Description <code>Dict[str, object]</code> A dictionary of initialized connectors."},{"location":"utils/data_connector/#method-get_asset_instance","title":"Method: get_asset_instance","text":"<pre><code>def get_asset_instance(\n            asset_type\n        ) -&gt; object\n</code></pre> <p>Dynamically gets or creates an instance of the requested asset type. Parameters:</p> Name Type Description <code>asset_type</code> <code>None</code> The type of asset to get or create. <p>Returns:</p> Type Description <code>object</code> The asset instance."},{"location":"utils/data_connector/#method-is_shutting_down","title":"Method: is_shutting_down","text":"<pre><code>def is_shutting_down() -&gt; bool\n</code></pre> <p>Attempt to infer if the interpreter is shutting down by checking if dummy threading operations fail, indicating cleanup has started. This is a heuristic and might not be 100% reliable across all Python versions.</p> <p>Returns:</p> Type Description <code>bool</code> True if the interpreter is shutting down, False otherwise."},{"location":"utils/data_connector/#method-close","title":"Method: close","text":"<pre><code>def close() -&gt; None\n</code></pre> <p>Ensure all connector resources are properly closed.</p> <p>Returns:</p> Type Description <code>None</code> None"},{"location":"utils/data_manager/","title":"Module Information","text":"<p>Description: DataManager class for QuantJourney Framework</p> <p>The DataManager class serves as the central hub for data storage and retrieval within the QuantJourney Framework.  It is engineered to interface with multiple types of databases and storage systems, offering a flexible and powerful way to manage financial data.  By leveraging configuration settings, the DataManager dynamically connects to various data storage solutions, making it an essential component for quantitative analysis in hedge fund operations.</p>"},{"location":"utils/data_manager/#features","title":"Features:","text":""},{"location":"utils/data_manager/#versatile-storage-system-integration-supporting-mongodb-arctic-s3-and-kdb-among-others-to-cater-to-diverse-data-storage-needs","title":"Versatile storage system integration, supporting MongoDB, Arctic, S3, and kdb+, among others, to cater to diverse data storage needs.","text":""},{"location":"utils/data_manager/#configuration-driven-connectivity-allowing-for-seamless-transitions-between-different-storage-backends-without-altering-the-codebase","title":"Configuration-driven connectivity, allowing for seamless transitions between different storage backends without altering the codebase.","text":""},{"location":"utils/data_manager/#advanced-data-handling-capabilities-including-support-for-time-series-data-ensuring-optimal-performance-for-both-historical-analysis-and-real-time-data-processing","title":"Advanced data handling capabilities, including support for time series data, ensuring optimal performance for both historical analysis and real-time data processing.","text":""},{"location":"utils/data_manager/#comprehensive-error-management-framework-providing-detailed-insights-into-connectivity-and-data-retrieval-issues-to-maintain-high-levels-of-data-integrity-and-availability","title":"Comprehensive error management framework, providing detailed insights into connectivity and data retrieval issues to maintain high levels of data integrity and availability.","text":""},{"location":"utils/data_manager/#streamlined-data-access-methods-facilitating-efficient-data-queries-and-manipulation-across-various-storage-platforms-with-minimal-overhead","title":"Streamlined data access methods, facilitating efficient data queries and manipulation across various storage platforms with minimal overhead.","text":"<p>Author: jpolec</p> <p>Date: 27-02-2024 and 18-03-2024</p>"},{"location":"utils/data_manager/#class-datamanager","title":"Class: DataManager:()","text":""},{"location":"utils/data_manager/#method-load_configuration","title":"Method: load_configuration","text":"<pre><code>def load_configuration(\n            config_path: str\n        ) -&gt; None\n</code></pre> <p>Loads storage configuration from a JSON file. Parameters:</p> Name Type Description <code>config_path</code> <code>str</code> Path to the configuration file."},{"location":"utils/data_manager/#method-initialize_storage","title":"Method: initialize_storage","text":"<pre><code>def initialize_storage() -&gt; None\n</code></pre> <p>Initializes the storage system based on the configuration.</p>"},{"location":"utils/data_manager/#method-is_shutting_down","title":"Method: is_shutting_down","text":"<pre><code>def is_shutting_down() -&gt; bool\n</code></pre> <p>Attempt to infer if the interpreter is shutting down by checking if dummy threading operations fail, indicating cleanup has started. This is a heuristic and might not be 100% reliable across all Python versions.</p> <p>Returns:</p> Type Description <code>bool</code> True if the interpreter is shutting down; False otherwise."},{"location":"utils/data_manager/#method-close","title":"Method: close","text":"<pre><code>def close() -&gt; None\n</code></pre> <p>Ensure all resources are properly closed.</p>"},{"location":"utils/data_manager/#method-initialize_kdb","title":"Method: initialize_kdb","text":"<pre><code>def initialize_kdb() -&gt; None\n</code></pre> <p>Set up the connection to kdb+</p>"},{"location":"utils/data_manager/#method-initialize_s3","title":"Method: initialize_s3","text":"<pre><code>def initialize_s3() -&gt; None\n</code></pre> <p>Set up the connection to AWS S3</p>"},{"location":"utils/data_manager/#method-initialize_arctic","title":"Method: initialize_arctic","text":"<pre><code>def initialize_arctic() -&gt; None\n</code></pre> <p>Set up the connection to ArcticDB</p>"},{"location":"utils/data_manager/#method-initialize_mongo","title":"Method: initialize_mongo","text":"<pre><code>def initialize_mongo() -&gt; None\n</code></pre> <p>Set up the connection to MongoDB.</p> <p>This method initializes the MongoDB connection using credentials and other configurations provided in the class's configuration data. It validates the presence of necessary configuration parameters and establishes a connection to the specified MongoDB cluster and database.</p>"},{"location":"utils/data_manager/#method-initialize_redis","title":"Method: initialize_redis","text":"<pre><code>def initialize_redis() -&gt; None\n</code></pre> <p>Set up the connection to Redis.</p>"},{"location":"utils/data_manager/#method-ensure_collection_exists","title":"Method: ensure_collection_exists","text":"<pre><code>def ensure_collection_exists(\n            collection_name: str\n        ) -&gt; bool\n</code></pre> <p>Ensure the collection exists in the database. Parameters:</p> Name Type Description <code>collection_name</code> <code>str</code> The name of the collection to check. <p>Returns:</p> Type Description <code>bool</code> True if the collection exists; False otherwise."},{"location":"utils/data_manager/#method-read_data","title":"Method: read_data","text":"<pre><code>def read_data(\n            **kwargs\n        ) -&gt; list\n</code></pre> <p>Read data from the storage based on the storage type, using flexible arguments.</p> <p>Examples:</p> <pre><code># Read data from MongoDB\ndata = await data_manager.read_data(storage_type='mongo', collection_name='my_collection', query={'symbol': 'AAPL'})\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments based on the storage type. <p>Returns:</p> Type Description <code>list</code> A list of data records read from the storage."},{"location":"utils/data_manager/#method-read_timeseries_data","title":"Method: read_timeseries_data","text":"<pre><code>def read_timeseries_data(\n            **kwargs\n        ) -&gt; list\n</code></pre> <p>Read timeseries data from the storage based on the storage type, using flexible arguments.</p> <p>Examples:</p> <pre><code># Read timeseries data from MongoDB\ndata = await data_manager.read_timeseries_data(storage_type='mongo', collection='my_collection', metadata={'symbol': 'AAPL'}, period_start='2022-01-01', period_end='2022-12-31')\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments based on the storage type. <p>Returns:</p> Type Description <code>list</code> A list of timeseries data records read from the storage."},{"location":"utils/data_manager/#method-read_fundamental_data","title":"Method: read_fundamental_data","text":"<pre><code>def read_fundamental_data(\n            **kwargs\n        ) -&gt; list\n</code></pre> <p>Read fundamental data from the storage based on the storage type, using flexible arguments.</p> <p>Examples:</p> <pre><code># Read fundamental data from MongoDB\ndata = await data_manager.read_fundamental_data(storage_type='mongo', collection='my_collection', query={'symbol': 'AAPL'})\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments based on the storage type. <p>Returns:</p> Type Description <code>list</code> A list of fundamental data records read from the storage."},{"location":"utils/data_manager/#method-write_data","title":"Method: write_data","text":"<pre><code>def write_data(\n            **kwargs\n        ) -&gt; None\n</code></pre> <p>Write data to the storage based on the storage type, using flexible arguments.</p> <p>Examples:</p> <pre><code># Write data to MongoDB\nawait data_manager.write_data(storage_type='mongo', collection_name='my_collection', symbol='AAPL', data=[{...}, {...}])\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments based on the storage type."},{"location":"utils/data_manager/#method-write_timeseries_data","title":"Method: write_timeseries_data","text":"<pre><code>def write_timeseries_data(\n            **kwargs\n        ) -&gt; None\n</code></pre> <p>Write timeseries data to the storage based on the storage type, using flexible arguments.</p> <p>Examples:</p> <pre><code># Write timeseries data to MongoDB\nawait data_manager.write_timeseries_data(storage_type='mongo', collection='my_collection', symbol='AAPL', data={...})\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments based on the storage type."},{"location":"utils/data_manager/#method-write_fundamental_data","title":"Method: write_fundamental_data","text":"<pre><code>def write_fundamental_data(\n            **kwargs\n        ) -&gt; None\n</code></pre> <p>Write fundamental data to the storage based on the storage type, using flexible arguments.</p> <p>Examples:</p> <pre><code># Write fundamental data to MongoDB\nawait data_manager.write_fundamental_data(storage_type='mongo', collection='my_collection', symbol='AAPL', data={...})\n\n</code></pre> <p>Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments based on the storage type."},{"location":"utils/data_manager/#method-read_data_from_mongo","title":"Method: read_data_from_mongo","text":"<pre><code>def read_data_from_mongo(\n            **kwargs\n        ) -&gt; list\n</code></pre> <p>Read data from MongoDB using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for MongoDB. <p>Returns:</p> Type Description <code>list</code> A list of data records read from MongoDB."},{"location":"utils/data_manager/#method-read_timeseries_data_from_mongo","title":"Method: read_timeseries_data_from_mongo","text":"<pre><code>def read_timeseries_data_from_mongo(\n            **kwargs\n        ) -&gt; list\n</code></pre> <p>Read timeseries data from MongoDB using flexible arguments, including metadata for filtering and checking against specified date ranges. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for MongoDB. <p>Returns:</p> Type Description <code>list</code> A list of timeseries data records read from MongoDB."},{"location":"utils/data_manager/#method-write_data_to_mongo","title":"Method: write_data_to_mongo","text":"<pre><code>def write_data_to_mongo(\n            **kwargs\n        ) -&gt; None\n</code></pre> <p>Write data to MongoDB using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for MongoDB."},{"location":"utils/data_manager/#method-write_timeseries_metadata_to_mongo","title":"Method: write_timeseries_metadata_to_mongo","text":"<pre><code>def write_timeseries_metadata_to_mongo(\n            collection_name,\n            period_start,\n            period_end,\n            **metadata\n        ) -&gt; bool\n</code></pre> <p>Write timeseries metadata to MongoDB, combining and updating segments as needed. Parameters:</p> Name Type Description <code>collection_name</code> <code>str</code> The name of the collection to write metadata to. <code>period_start</code> <code>str</code> The start date of the period to write metadata for. <code>period_end</code> <code>str</code> The end date of the period to write metadata for. <code>**metadata</code> <code>None</code> Flexible keyword arguments for metadata. <p>Returns:</p> Type Description <code>bool</code> True if the metadata was written successfully; False otherwise."},{"location":"utils/data_manager/#method-write_timeseries_data_to_mongo","title":"Method: write_timeseries_data_to_mongo","text":"<pre><code>def write_timeseries_data_to_mongo(\n            **kwargs\n        ) -&gt; None\n</code></pre> <p>Write timeseries data to MongoDB using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for MongoDB. <p>Returns:</p> Type Description <code>None</code> None"},{"location":"utils/data_manager/#method-write_fundamental_data_to_mongo","title":"Method: write_fundamental_data_to_mongo","text":"<pre><code>def write_fundamental_data_to_mongo(\n            **kwargs\n        ) -&gt; None\n</code></pre> <p>Write fundamental data to MongoDB using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for MongoDB."},{"location":"utils/data_manager/#method-read_fundamental_data_from_mongo","title":"Method: read_fundamental_data_from_mongo","text":"<pre><code>def read_fundamental_data_from_mongo(\n            **kwargs\n        )\n</code></pre> <p>Read fundamental data from MongoDB using flexible arguments, including metadata for filtering. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for MongoDB."},{"location":"utils/data_manager/#method-read_data_from_redis","title":"Method: read_data_from_redis","text":"<pre><code>def read_data_from_redis(\n            **kwargs\n        ) -&gt; list\n</code></pre> <p>Read data from Redis using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for Redis. <p>Returns:</p> Type Description <code>list</code> A list of data records read from Redis."},{"location":"utils/data_manager/#method-write_data_to_redis","title":"Method: write_data_to_redis","text":"<pre><code>def write_data_to_redis(\n            **kwargs\n        ) -&gt; None\n</code></pre> <p>Write data to Redis using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for Redis."},{"location":"utils/data_manager/#method-read_timeseries_data_from_redis","title":"Method: read_timeseries_data_from_redis","text":"<pre><code>def read_timeseries_data_from_redis(\n            **kwargs\n        )\n</code></pre> <p>Read timeseries data from Redis using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for Redis."},{"location":"utils/data_manager/#method-write_timeseries_data_to_redis","title":"Method: write_timeseries_data_to_redis","text":"<pre><code>def write_timeseries_data_to_redis(\n            **kwargs\n        )\n</code></pre> <p>Write timeseries data to Redis using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for Redis."},{"location":"utils/data_manager/#method-write_metadata_to_redis","title":"Method: write_metadata_to_redis","text":"<pre><code>def write_metadata_to_redis(\n            **kwargs\n        ) -&gt; None\n</code></pre> <p>Write metadata to Redis using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for Redis."},{"location":"utils/data_manager/#method-read_metadata_from_redis","title":"Method: read_metadata_from_redis","text":"<pre><code>def read_metadata_from_redis(\n            **kwargs\n        ) -&gt; dict\n</code></pre> <p>Read metadata from Redis using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for Redis. <p>Returns:</p> Type Description <code>dict</code> A dictionary containing the metadata read from Redis."},{"location":"utils/data_manager/#method-read_data_from_kdb","title":"Method: read_data_from_kdb","text":"<pre><code>def read_data_from_kdb(\n            **kwargs\n        ) -&gt; list\n</code></pre> <p>Read data from kdb+ using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for kdb+. <p>Returns:</p> Type Description <code>list</code> A list of data records read from kdb+."},{"location":"utils/data_manager/#method-write_data_to_kdb","title":"Method: write_data_to_kdb","text":"<pre><code>def write_data_to_kdb(\n            **kwargs\n        ) -&gt; None\n</code></pre> <p>Store data in kdb+ using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for kdb+."},{"location":"utils/data_manager/#method-read_data_from_arctic","title":"Method: read_data_from_arctic","text":"<pre><code>def read_data_from_arctic(\n            **kwargs\n        ) -&gt; list\n</code></pre> <p>Read data from the database (ArcticDB) using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for the database. <p>Returns:</p> Type Description <code>list</code> A list of data records read from the database."},{"location":"utils/data_manager/#method-write_data_to_arctic","title":"Method: write_data_to_arctic","text":"<pre><code>def write_data_to_arctic(\n            **kwargs\n        ) -&gt; None\n</code></pre> <p>Write data to the Arctic library using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for the Arctic library."},{"location":"utils/data_manager/#method-read_data_from_s3","title":"Method: read_data_from_s3","text":"<pre><code>def read_data_from_s3(\n            **kwargs\n        ) -&gt; list\n</code></pre> <p>Read data from AWS S3 using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for AWS S3. <p>Returns:</p> Type Description <code>list</code> A list of data records read from AWS S3."},{"location":"utils/data_manager/#method-write_data_to_s3","title":"Method: write_data_to_s3","text":"<pre><code>def write_data_to_s3(\n            **kwargs\n        ) -&gt; None\n</code></pre> <p>Write data to AWS S3 using flexible arguments. Parameters:</p> Name Type Description <code>**kwargs</code> <code>None</code> Flexible keyword arguments for AWS S3."}]}